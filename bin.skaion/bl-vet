#!/usr/bin/env bash

source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

for sig in 2 3 4 5 6 7 8 15
do
    trap "sig_exit $sig" $sig
done

#
# template ends.
########################################################################

: ${mapfile:="u-boot.map"}
: ${offset:="0x1FF75000"}
: ${corp_net_ip:="192.168.114.153"}
: ${qu_factory_default_ip:="192.168.1.30"}
: ${devip:="${corp_net_ip}"}
: ${capture:="tcpdump"}
: ${interface:="eth0"}
: ${testcases:=1}
: ${run:=1}
: ${count:=1}
: ${vetting_count:=1}
: ${vetfile=}
: ${suite=}
: ${payload=}
: ${payload_opt=}
: ${interval:=0.5}
: ${run_baseline_p=t}
: ${run_vet_p=}
: ${series=}
: ${yopp_p=true}
: ${QVET:="../quasar-vet"}

option_str="c:i:m:o:pr:s:t:v:d:T:Id:"
long_options=(
    "count:"
    "interface:"
    "if:"
    "interval:"
    "int:mapfile:"
    "map:"
    "mf:"
    "offset:"
    "off:"
    "payload"
    "pay"
    "run:"
    "run-name:"
    "suite:"
    "testcase:"
    "testcases:"
    "vetfile:"
    "vf:"
    "devip:"
    "qu-factory-default-ip" "qu-fac-def-ip" "qdef-ip" "qdefip"
    "corp-net-ip" "corp-ip" "cnip" "cip"
    "ip:"
    "vetting-count:" "vet-count:" "vc:"
    "baseline" "base" "bl"
    "no-baseline" "no-base" "nbl" "nb"
    "just-baseline" "just-base" "jbl" "jb"
    "vet"
    "no-vet"
    "just-vet" "jvet" "jv"
    "clean" "reset" "clear" "new"
    "series:"
    "vet-against:" "vet-agin:" "vet-vs:" "vet-db:"
    "no-yopp"
)

source dp-getopt+.sh || exit 1

########################################################################
while (($# > 0))
do
  #echo "1>$1<"
  #echo "2>$2<"
  case "$1" in
#
# quasar-vet args:
     -d|--devip|--dev-ip|--ip)
         shift; 
         devip="${1}"
         ;;
     --qu-factory-default-ip|--qu-fac-def-ip|--qdef-ip|--qdefip)
         devip="${qu_factory_default_ip}"
         ;;
     -corp-net-ip|--corp-ip|--cnip|--cip)
         devip="${corp_net_ip}"
         ;;
     -I|--interface|--if)
         shift; interface="${1}"
         ;;
     -c|--count)
         shift; count="${1}"
       ;;
     -i|--interval|--int)
         shift; interval="${1}"
       ;;
     -m|--mapfile|--map)
         shift; mapfile="${1}"
       ;;
     -o|--offset|--off)
         shift; offset="${1}"
       ;;
     -p|--payload|--pay)
         payload=t
         payload_opt="-p"
       ;;
     -r|--run|--run-name)
         shift; run="${1}"
       ;;
     -s|--suite)
         shift; suite="${1}"
         dbfile=db/$suite.db
       ;;
     -t|--testcases)
         shift; testcases="${1}"
       ;;
     -T|--testcase|--add-testcase)
         shift; testcases="${testcases} ${1}"
       ;;
     -v|--vetfile|--vf)
         shift; vetfile="${1}"
       ;;
    --vetting-count|--vet-count|--vc)
         shift; vetting_count="${1}"
	;;
     --baseline|--base|--bl)
         run_baseline_p=t
	;;
     --no-baseline|--no-base|--nbl|--nb)
         run_baseline_p=
         ;;
     --just-baseline|--just-base|--jbl|--jb)
         run_baseline_p=t
         run_vet_p=
         ;;
     --vet)
         run_vet_p=t
	;;
     --no-vet)
         run_vet_p=
         ;;
     --just-vet|--jvet|--jv)
         run_vet_p=t
         run_baseline_p=
         ;;
     --clean|--reset|--clear|--new)
         rm -rf db
         rm -rf runs
         ;;
     --series)
         shift
         series="${1}"
         ;;
     --vet-against|--vet-agin|--vet-vs|--vet-db)
         # ../quasar-vet -d 192.168.114.153 -t 8a -c 2000 -r c2000.baseline -p
         # ../quasar-vet -d 192.168.114.153 -t 8a -c 1 -r c1.vetting -v db/8a.c2000.baseline.db
         # 8a.c2000.baseline --> -t 8a --vc 1 -v db/8a.c2000.baseline.db
         shift
         baseline_to_vet="${1}"
         echo_id baseline_to_vet
         baseline_to_vet=$(echo "${baseline_to_vet}" | sed -r 's!(^.*/)(.*)(\.db$)!\2!')
         components=( $(echo "${baseline_to_vet}" | sed -r 's/\./ /g' ) )
         echo "components[@]>${components[@]}<"
         testcases="${components[0]}"
         count=$(echo "${components[1]}" | sed -r 's/^c//')
         vetfile="db/${baseline_to_vet}.db"
         echo_id vetfile
         vet_run_name="c${count}-vc${vetting_count}.vetting"
         run_baseline_p=
         run_vet_p=t
         ;;
     --no-yopp)
         yopp_p=false
         ;;
     --) shift; break
         ;;
      *) break
       ;;
  esac
  shift
done

if [ $? = 0 ]
then
    eval set -- "$q"
    dolAT=("$@")
    true
else
    Usage2 "getopt failed."   # If getopt even returns after an error.
    false
fi

# info
# baseline run:
# Something adds testcase name to the run (-r) name.
# ../quasar-vet -t 8a -c 100 -r c100.baseline -p

# vetting run:
# ../quasar-vet -t 8a -c 1 -r c1.vetting -v db/8a.c100.baseline.db
# positional args...
proto="${1}"
shift

tcases=($testcases)
tcname="${tcases[0]}"
bl_name_prefix="c${count}"
vet_name_prefix="c${vetting_count}"
tc_name_prefix="${tcname}.${bl_name_prefix}"
bl_run_name="${bl_name_prefix}.baseline"
# Something adds testcase name to the run (-r) name.
db_vet_name=${vetfile-"db/${tcname}.${bl_run_name}.db"}
: ${vet_run_name="${vet_name_prefix}.vetting"}

EExec_verbose_echo_id tcases
EExec_verbose_echo_id tcname
EExec_verbose_echo_id bl_name_prefix
EExec_verbose_echo_id vet_name_prefix
EExec_verbose_echo_id tc_name_prefix
EExec_verbose_echo_id bl_run_name
EExec_verbose_echo_id db_vet_name
EExec_verbose_echo_id vet_run_name

EExec_verbose_echo_id run_baseline_p

# If we want to compile a payload, we'll only want to do it during the
# baseline phase.
true_p "${run_baseline_p}" && {
    EExec "${QVET}" \
        -d "${devip}" \
        -t "${tcname}" \
        -c "${count}" \
        -r "${bl_run_name}" \
        ${payload_opt}
}

true_p "${run_vet_p}" && {
    EExec "${QVET}" \
        -d "${devip}" \
        -t "${tcname}" \
        -c "${vetting_count}" \
        -r "${vet_run_name}" \
        -v "${db_vet_name}"
}
              
$yopp_p && email-yopp "Base + vetting done."
exit 0
