#-*-Shell-script-*-
# source me.

# @todo XXX change complete with something that works in bash but doesn't
# make zsh barf.

# DP_BASH_ONLY()
# {
#     "$@"
# }

_dp_gnu_gnu_global_command_complete()
{
        local cur
        cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=($(global -c $cur))
}
complete -F _dp_gnu_global_command global

#
# use completions of "${1}" as sudo does.
# See `_dp_sp_complete' for more sophisticated usage.
#
_dp_commands_complete()
{
        local cur
        cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=($(compgen -c $cur))
}
complete -F _dp_commands_complete sp run-iff xit lessit no2

# Ripped from /bfd/sundry/davep/RCS/RCS.sam/home.davep/.rc/bash_completion,v
# I know not from whence it originally came.
# @(...) is an extended glob (extglob)
_dp_sp_complete()
{
    ## set -x
    local words cword
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    ## @todo XXX Why are these special?
    case "$prev" in
        -x)
	    # Allow -x <TAB> to complete as a command.
	    cur=${COMP_WORDS[COMP_CWORD]}
            COMPREPLY=($(compgen -c $cur))
            return
            ;;
        -X|-f)
            # argument required but no completion function available
            # (written) yet.
	    # 
            return
            ;;
    esac

    if [[ "$cur" == -* ]]; then
        COMPREPLY=( $( compgen -W '-1 -2 -3 -4 -5 -6 -7 -8 -9
            -x -X -f
            -l -ll -r -v -F -e -g -G -d -s' -- "$cur" ) )
        return
    else
	_dp_commands_complete
    fi
}
complete -F _dp_sp_complete sp

_dp_go_complete()
{
        local cur
        cur=${COMP_WORDS[COMP_CWORD]}
        COMPREPLY=($(go2env --grep-name-only "^$cur"))
}
complete -F _dp_go_complete g go dogo

_dp_ctags_etags_expand()
{
    local cur="$1"
    local tag_file
    tag_file=$(find-up TAGS-tags)
    if [ -n "${tag_file}" ]
    then
        COMPREPLY=($(\egrep "^$cur" "${tag_file}"))
        return
    fi

    tag_file=$(find-up TAGS)
    if [ -n "${tag_file}" ]
        then
#set -x
        COMPREPLY=($(get-ex-etags-tags "${tag_file}" | \egrep "^$cur"))
#set +x
        return
    fi
    return 1
}

_dp_ctags_etags_complete()
{
        local cur
        cur=${COMP_WORDS[COMP_CWORD]}
        _dp_ctags_etags_expand "${cur}"
}

# I have a pass routine of my own.  Treat it like pass.
# I though I had hijacked a completion function for which I had written a
# front end.  Can't make it work now.
# complete -o filenames -F _pass cpass

true
