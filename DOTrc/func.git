#!/usr/bin/env bash
# should be sourced, but the shebang tells us and emacs what mode to use.

#echo "DP_LOG>${DP_LOG}<"

true ${DP_GIT_BIN=git}		# Let path find it by default.
true ${DP_GIT_LOG_P=true}
true ${DP_GIT_LOG_DIR=$DP_LOG_DIR/${DP_GIT_BIN}}
true ${DP_GIT_LOG_FILE=$DP_GIT_LOG_DIR/commands}
true ${DP_GIT_LOG_FILE_ERR=${DP_GIT_LOG_FILE}.stderr}
# echo "DP_GIT_BIN>${DP_GIT_BIN}<"
# echo "DP_GIT_LOG_P>${DP_GIT_LOG_P}<"
# echo "DP_GIT_LOG_DIR>${DP_GIT_LOG_DIR}<"
# echo "DP_GIT_LOG_FILE>${DP_GIT_LOG_FILE}<"
# echo "DP_GIT_LOG_FILE_ERR>${DP_GIT_LOG_FILE_ERR}<"
mkdir -p "${DP_GIT_LOG_DIR}"

git_run_command()
{
    [ -n "${DP_GIT_LOG_P-}" ] && log_p=true
    if ! type "${DP_GIT_BIN}" >/dev/null 2>&1
    then
	echo "\$DP_GIT_BIN>${DP_GIT_BIN}< is not executable."
	return 1
    fi 1>&2
    if "${log_p}"
    then
	dp_log_header
	{
	    dp_log_header;
	    echo
	} 1>&2
	echo ": ${DP_GIT_BIN} $@"
    fi >> "${DP_GIT_LOG_FILE}" 2>> "${DP_GIT_LOG_FILE_ERR}"
    command "${DP_GIT_BIN}" "$@"
}

git_p()
{
    __gitdir
}

git_isa_rev()
{
    git_run_command rev-parse "$@" >/dev/null 2>&1
}

git_change_sandbox()
{
    [ "${1}" == "-x" ] && {
        set -x
        shift
    }

    local rev="${1-}"; shift
    # `chdir' with no args means to show us where we are.
    if [ -z "${rev}" ]
    then
        git_run_command branch
    else
        # Prevent braino of using gcd instead of cd if arg is a dir.
        [ -d "${rev}" ] && {
            read -e -p "${rev} is a dir. Continue [y/N]? "
            case "${REPLY}" in
                [yY]) ;;
                ""|[Nn]) echo 1>&2 "Bailing."; return 1;;
            esac
        }
        if ! git_isa_rev "${rev}"
        then
            # Not a rev.  See if it's an abbrev.
            if ! rev=$(dogo "${rev}")
            then
                echo "Cannot make heads nor tails of >${rev}<"
                return 1
            fi
        fi

        git_run_command checkout "${rev}" "$@"
        git_run_command stash list
        echo "??? You may want to consider reindexing the code."
    fi
}
DP_EXPORT_FUNC git_change_sandbox
alias gcd="git_change_sandbox"
alias gsb="git_change_sandbox"

githh()
{
    local dash_n
    if [ -z "${1-}" ]
    then
        dash_n=-0               # Everything
    else
        dash_n="$1"
    fi
    shift
    # Since I cannot figure out how to stop git using ^H for bolding, I'll
    # filter it myself.
    # Doesn't use ^H in all xemacs windows and I don't know why.
    if inside_emacs_p
    then
        git_run_command help "$@" | ul -t dumb | head -n "$dash_n"
    else
        git_run_command help "$@"
    fi
}

gith()
{
    githh "" "$@"
}

git() 
{
    #set -x
    [ -n "${DP_GIT_DEBUG-}" ] && {
	set -x
    }
    if [ "${1-}" = '-x' ]
    then
        set -x
        shift
    elif [ "${DP_GIT_DEBUG-}" ]
    then
	set -x
    fi

    local func="git(): "
    local cmd=${1}; shift
    local rc=0
    local checkop=$(git_run_command config --get ${cmd}.checkop 2>/dev/null)
    local msg=$(git_run_command config --get ${cmd}.msg 2>/dev/null)
    local disablemsg=$(git_run_command config --get ${cmd}.disablemsg 2>/dev/null)
    local disabled=$(git_run_command config --bool ${cmd}.disabled 2>/dev/null)
    local query=$(git_run_command config --bool ${cmd}.query 2>/dev/null)
    local yes_p=

    # Why predicate on this?
    # As it is, it will always be true.
    # [ -n "${func}checkop" ] && {
    [ -n "${checkop}" ] && {
        type -t "${checkop}" 1>/dev/null 2>&1 && {
            "${checkop}" "${cmd}" "$@" || {
                echo "${func}checkop>${checkop}< failed."
                return 1
            } 1>&2
        }
    }


    if ${disabled:-false} ; then
        echo "${func}The ${cmd} command is intentionally disabled in git config." >&2
        [ -n "${disablemsg}" ] && echo "${func}${disablemsg}"
        rc=1
        if ${query:-false}
        then
            while :
            do
              read -e -p "${func}Perform the command anyway [y/N]? "
              case "$REPLY" in
                  [yY1t]) yes_p=t; rc=0; break;;
                  [nN0]|"") yes_p=; rc=1; break;;
                  *) continue;;
              esac
            done
         fi
    fi

    case "${rc}" in
        0) git_run_command "${cmd}" "$@"
           rc=$?
           ;;
    esac

    [ -n "${msg-}" ] && {
        echo "${func}${cmd}.msg: $msg"
    }

    return $rc
}

true
