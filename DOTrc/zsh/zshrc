# -*-Shell-script-*-
# If you come from bash you might have to change your $PATH.
# Shouldn't this be in zshenv?  Yes, yes it should.  Away, away! To zshenv
# with PATH!  export PATH=$HOME/bin:/usr/local/bin:$PATH
# Actually into zsh_path

#
# It's utter bullshit that this is needed, but is blessedly possible, and
# seems to solve the terrible problem of the keyword ":", which should be the
# same as "true", but isn't.
# @todo XXX Will it work in all cases, e.g. might it need to be autoloaded?
# Also, there may be cases where functions don't work?
function :()
{
    true "$@"
}

# Can stuff like this go in a zsh hook?
# {
#     echo ">>>>>>>>>>>> $(date)"
#     env | fgrep -i tmux
#     echo "<<<<<<<<<<<< $(date)"
# } 1>> ~/log/zshrc.log 2>&1

if type python && type host-info.py
then
    HOST_INFO=host-info.py
elif [[ $SHELL != zsh ]]
then
    HOST_INFO=host_info_func
    host_info_func()
    {
        case "$1" in
            -n) echo $2;;
             *) echo "-";;
        esac
    }
    DP_EXPORT_FUNC host_info_func
else
    echo "Cannot find a suitable value for HOST_INFO."
fi > /dev/null 2>&1
export HOST_INFO

#echo 1>&2 "starting zshrc."
#dp_zsh_sig_trap ()
#{
#    {
#        local sig_num=$1; shift
#        echo
#        echo "sig_exit, sig_num: $sig_num"
#	echo "Press <Enter> to continue."
#	read
#        exit 1
#    } 1>&2
#}
#
#for sig in 2 3 4 5 6 7 8 15
#do
#    trap "dp_zsh_sig_trap $sig" $sig
#done


#set -e
#set -x

zmodload zsh/zprof		# @todo XXX part of zshrc. Add back?

#echo "B: func.early" 1>&2 
source ${DP_RC_DIR}/func.early
##echo "A: func.early" 1>&2 

export DP_ZSH_ENVIRONMENT_FUCKED=true
export DP_ZSH_FIX_FUCKED_ENVIRONMENT=true

if [[ -n "${DP_ZSH_ENVIRONMENT_FUCKED-}" ]] && "${DP_ZSH_FIX_FUCKED_ENVIRONMENT}"
then
    #echo "Performing fucked up environment hackage."
    run_under_bash()
    {
	bash -l -c "$@"
    }
fi

# Do this part of dp_source(dp) by hand since we don't source/include this
# file, zsh does.
enter_rc_file "zshrc"
dp_source ${DP_RC_DIR}/func.root
dp_source ${DP_ZSH_RC_DIR}/zsh-options

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="false"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"
HIST_STAMPS="yyyy-mm-dd"
export histchars='!,#'
export HISTFILE=$(mk-persistent-dropping-name.sh "zsh_history")

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Things to check out:
# alias-finder.plugin.zsh,
# /home/davep/.oh-my-zsh/plugins/bgnotify,
# colorize.plugin.zsh,
# common-aliases.plugin.zsh,	# Trim to my liking.
# compleat.plugin.zsh
# dircycle.plugin.zsh
# dirhistory.plugin.zsh
# emacs.plugin.zsh
# fasd.plugin.zsh
# history.plugin.zsh
# ~/.oh-my-zsh/plugins/pass/_pass
# pep8
# percol.plugin.zsh
# theme and sudo both use <esc><esc> as their binding.
# And currently the fuck doesn't work with the binding and generates a python
# error(traceback) when `fuck' is used on the command line.  Using <esc><esc>
# causes a little screen flash which could indicate the backtrace being
# swallowed.
##plugins=(percol rand-quote repo ripgrep sudo thefuck web-search)
# NB: web-search defines an alias named `sp'. And no one, NO ONE, 
# takes one of my favorite 2LAs away from me.
#
plugins=(
	percol
#	rand-quote
#	repo
#	ripgrep
#	thefuck
	themes
	tig
#	tmux
#	tmuxinator
	ubuntu
)

# Dumb fuckers, I'm sure no one will have used the name ZSH to mean something
# other than oh-my-zsh.
export ZSH_DISABLE_COMPFIX=true
true  ${DP_USE_OH_MY_ZSH:=true}
"${DP_USE_OH_MY_ZSH}" && dp_source $ZSH/oh-my-zsh.sh

export DP_ZSH_COMPLETIONS_DIR="${DP_ZSH_RC_DIR}/completions/davep"

fpath=(${DP_ZSH_COMPLETIONS_DIR} ${fpath})

dp_source zshrc.pre-oh-my-zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

dp_source ${DP_RC_DIR}/func
dp_source ${DP_ZSH_RC_DIR}/zsh-func
dp_source ${DP_ZSH_RC_DIR}/zsh-prompt
# Must come after sourcing zshrc.pre-oh-my-zsh because omz does some bindkeys
# that can clobber my bindings.  If there's any clobbering to be done, I want
# to be the one to do it.
dp_source ${DP_ZSH_RC_DIR}/zsh-keys
dp_source ${DP_ZSH_RC_DIR}/zsh-alias
dp_source ${DP_RC_DIR}/func.completion

# Load up the abbrev env definitions.
do_go2env

# Turn this off now, since errors will cause the current shell to exit.
set +e

# Do this part of dp_source(dp) by hand since we don't source/include this
# file, zsh does.
exit_rc_file "zshrc"

PATH="/home/davep/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/davep/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/davep/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/davep/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/davep/perl5"; export PERL_MM_OPT;
