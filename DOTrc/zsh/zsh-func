#!/usr/bin/env zsh

# echo 1>&2 "zsh-func: DP_ZSH_ENVIRONMENT_FUCKED>$DP_ZSH_ENVIRONMENT_FUCKED<"
# echo 1>&2 "zsh-func: DP_ZSH_FIX_FUCKED_ENVIRONMENT>$DP_ZSH_FIX_FUCKED_ENVIRONMENT<"

tildify()
{
    print -P '%~'
}
#problem with completion on dogo and dogO but not dog0. g()
#problem with completion on dogo and dogO but not dog0. {
#problem with completion on dogo and dogO but not dog0.     case "$1" in
#problem with completion on dogo and dogO but not dog0. 	-*)
#problem with completion on dogo and dogO but not dog0. 	    go-mgr "$@" ;;
#problem with completion on dogo and dogO but not dog0. 	*)
#problem with completion on dogo and dogO but not dog0. 	    # If a file name is given, assume we want to go to the containing
#problem with completion on dogo and dogO but not dog0. 	    # directory.
#problem with completion on dogo and dogO but not dog0.             if [ -f "${1}" ]
#problem with completion on dogo and dogO but not dog0.             then
#problem with completion on dogo and dogO but not dog0.                 dir=$(dirname "${1}")
#problem with completion on dogo and dogO but not dog0. 		# If $1 is a file and its dir part is '.' then we really want
#problem with completion on dogo and dogO but not dog0. 		# the original name as a abbreviation.
#problem with completion on dogo and dogO but not dog0. 		[ "${dir}" = "." ] && {
#problem with completion on dogo and dogO but not dog0. 		    dir="${1}"
#problem with completion on dogo and dogO but not dog0. 		}
#problem with completion on dogo and dogO but not dog0.             else
#problem with completion on dogo and dogO but not dog0.                 dir="${1}"
#problem with completion on dogo and dogO but not dog0.             fi
#problem with completion on dogo and dogO but not dog0. 	    gOcWd=$PWD; pushd $(dogo "${dir}") && export GoBack=$gOcWd ;;
#problem with completion on dogo and dogO but not dog0.     esac
#problem with completion on dogo and dogO but not dog0. }
