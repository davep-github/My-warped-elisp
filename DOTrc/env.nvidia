export DP_DOMAIN_NVIDIA=t
export DP_DOMAIN=NVIDIA
#
# These vars only make sense if there is one project/workspace/sandbox in use
# at a time. Sigh, the world isn't like that anymore and that's why things
# aren't getting any better. Contexts switches are expensive and that is not
# generally appreciated.
# However, multiple sandboxes/workspaces can be part of a single task. This,
# too, breaks here. So, it seems this is not very useful.
#
export SCRATCH_BASE="/home/scratch.dpanariti"
export PROJECT_WORK= #"${SCRATCH_BASE}_t124"
export PROJECT_NAME= #"hw.t124"
export PROJECT_ROOT= #"${PROJECT_WORK}"
export PROJECT_HOME= #"${PROJECT_ROOT}/${PROJECT_NAME}"
export PROJECT_BIN=

export DP_LOC_DB=$HOME/var/locate/loc.db

#  [ as of: 2013-02-13T18:53:04 ] permuted cscope dbs (-q)  don't work.
#  [ as of: 2014-01-14T12:07:55 ] the specific version below does.
export EXTAGTREE_DASH_Q="-q"
export DP_CSCOPE_PROGRAM="/home/toolroot/nvscopegrep/1.0/bin/cscope"

current_scratch_dir()
{
    local x=$(pwd | sed -rn 's!(^/home/scratch.[^/]+)(/|$)(.*)$!\1!p')
    if [ -z "$x" ]
    then
        false
    else
        echo "$x"
        true
    fi
}
export -f current_scratch_dir

# This is a hack to handle the case where most work is being done somewhere
# other than the root. Which is pretty likely, I'd imagine.
export PROJECT_INDEX=$PROJECT_HOME
export DP_P4_BOILER_PLATE="
# defined in env.nvidia: begin
P4PORT=p4hw.nvidia.com:2001
#P4DIFF=xxdiff
# defined in env.nvidia: end
"
#export DP_P4_CLIENT_TEMPLATE=dpanariti-t124-template
export DP_P4_CLIENT_TEMPLATE=dpanariti-t132-template
# p4 annoyingly|foolishly|stupidly|surprisingly|frustratingly|astonishingly
# has the values in //.p4config override environment variables. So we'll only
# use environment variables so the can be changed without needing to edit the
# stupid config file.
# Bonk! Bonk! On the head!
export P4DIFF=$(find-bin ec-diff tkdiff xxdiff mgdiff kompare p4merge diff)
export P4CONFIG=".p4config"
export P4EDITOR="ec-p4"
export P4_SW_ROOT="$HOME/sw"

#
# The normal environment (/bin, /usr/bin, /lib, /usr/lib, etc) are very
# conservative (stable) versions. More recent versions are kept here and they
# must be referenced explicitly.
export DP_ENV_NV_UTILS_PATH="
/home/utils/bin
/home/utils/fvwm-2.4.20/bin
/home/utils/Python-3.2.2/bin
/home/utils/Python-2.7.2/bin
/home/utils/p4-2012.1/bin
/home/utils/gdb-7.4/bin
/home/utils/perl-5.14/5.14.1-nothreads-64/bin
/home/utils/xxdiff-3.0.4/bin
/home/utils/figlet-2.2.5/bin
/home/utils/bash-3.2.48/
/home/utils/bash-4.2/bin
/home/utils/meld-1.6.1/bin
/home/utils/Python-2.7.2/bin
/home/utils/Python-3.2.2/bin
/home/utils/ipython-0.13
/home/utils/ddd-3.3.12/bin
/home/utils/less-444/bin
/home/utils/ctags-5.8/bin
/home/utils/xz-5.0.3/bin
$HOME/sw/sw/main/apps/p4review
/home/utils/firefox-17esr
/home/utils/coreutils-8.9/bin
/home/toolroot/nvscopegrep/1.0/bin"

# @todo XXX 
#
# I want to be able to override things, but want work things first in tests.
# Having context dependent paths seems like a problem in waiting.
#
# I could keep work stuff first and just drop symlinks into
# $DP_ENV_BIN_OVERRIDE as needed.
#if vsetp "${dp_interactive-}"
#then
#    PATH=$(dp_add_to_path_iff "$PATH" $DP_ENV_NV_UTILS_PATH)
#else
    PATH=$(dp_add_to_path_iff -p "$PATH" $DP_ENV_NV_UTILS_PATH)  # <<<<<<<<<<<<<<<<<<<<<<<<<<
#fi

export DP_ENV_NV_UTILS_LIB_PATH="
/home/utils/gtk+2.24.13/lib
/home/utils/firefox-17esr
/home/utils/dbus-glib-0.80/lib
"

LD_LIBRARY_PATH=$(dp_add_to_path_iff -p "${LD_LIBRARY_PATH-}" $DP_ENV_NV_UTILS_LIB_PATH)
#LD_LIBRARY_PATH=$(dp_add_to_path_iff "$LD_LIBRARY_PATH" $DP_ENV_NV_UTILS_LIB_PATH)
#
# we have an environment based (misguidedly, I'm sure ;-) on tcsh.
# There is no direct support for bash, so I'll add it here and in any other
# appropriate *.nvidia files.
export DP_ENV_NV_PATH=".
/usr/lib
/etc
/home/nv/bin
/usr/bin/X11
/usr/local/lsf/bin
/home/tools/td/td5303/linux/bin
/home/tools/synopsys/syn_2010.12-SP5/bin
/home/tools/synopsys/pt_2009.06-SP3/bin
/home/tools/synopsys/syn_2010.12-SP5/linux/mc/bin
/home/tools/synopsys/fm_2010.12-SP5/bin
/home/tools/verilint/2001.4.10-linux2.2
/home/tools/vcs/vcs_latest/virsimdir/bin
/home/tools/vcs/vcs_latest/bin
/home/tools/debussy/latest/bin
/home/tools/debussy/verdi_latest/bin
/usr/X11R6/bin"

PATH=$(dp_add_to_path_iff "$PATH" $DP_ENV_NV_PATH)

# Other NV environmental variables...
# Much code stolen from, or inspired by, smueller
# From envupdate's .cshrc:
# @todo XXX don't set these because our bashes are started from a tcsh and we
# should inherit everything. A nice feature of having the default shell be
# tcsh so it gets all of the envupdate stuff but we can fire up bashes for
# interactive work.

# to stop that nasty .flexlmrc file from being created 
export FLEXLM_NO_CKOUT_INSTALL_LIC=1
#tell synopsys tools not look for obsoleted keys 
export SCL_AUTHORIZE_LIST=1

# set the Novas idle license timeout to 15 minutes
export NOVAS_IDLE_LICENSE_CHECKBACK=15

# silences an annoying pop-up dialog
export NOVAS_IDLE_LICENSE_CHECKBACK_SILENCE=1

export HNAME=$HOST

# From envupdate's .cshrc_tools:

export LM_LICENSE_FILE="/home/tools/admin/license_files"
#export SNPSLMD_LICENSE_FILE=`/home/nv/bin/build_lic_list.pl /home/tools/admin/license_files/*synopsys*` # synopsys tools
#export SNPSLMD_LICENSE_FILE=$(/home/nv/bin/build_lic_list.pl /home/tools/admin/license_files/*synopsys*)
export CDS_LIC_FILE=5280@lic-14,5280@lic-15,5280@lic-16
export CDS_LIC_ONLY=true

# LSF batch-queue setup linux and solaris the same
export LSF_SERVERDIR=/usr/local/lsf/etc
#set   PATH_PROGS = "$PATH_PROGS /usr/local/lsf/bin"
#
# do we need verilog97a?

# Debussy setup
export DEBUSSY_HOME=/home/tools/debussy/latest
export VERDI_HOME=/home/tools/debussy/verdi_latest
#XXX TODO set PATH_PROGS = "$PATH_PROGS $DEBUSSY_HOME/bin $VERDI_HOME/bin"

# Special additional things to do after making a new sb.
#
# This is good for bad memories.
# Except I can't remember the name of the variable, either.
export AS2_FIX_TOOL_DATA=A783888
alias fix_tool_data='as2 retrieve $AS2_FIX_TOOL_DATA'

# VNC doesn't need scroll bar with these dimensions.
export VNC_GEOMETRY="1831x1030"

export DP_XEM_FRAME_WIDTH="0"
export DP_XEM_FRAME_HEIGHT="72"

dp4_new_client_post()
{
    echo "Update tool data file after 1st sync:
mecd tot
cd etc
Maybe run fix_tool_data?
"
}
export -f dp4_new_client_post

dp4_sync_post()
{
    dp4_new_client_post
}

export DP_NV_TGEN_PROCESS_NAMES="mods linsim sockserv32 cosim"
DP_NV_TGEN_PROCESS_PATTERN=
sep=
for n in ${DP_NV_TGEN_PROCESS_NAMES}
do
  DP_NV_TGEN_PROCESS_REGEXP="${DP_NV_TGEN_PROCESS_REGEXP}${sep}${n}"
  sep="|"
done
export DP_NV_TGEN_PROCESS_REGEXP
unset n sep

export DP_WORK_STATUS_DIR="${HOME}/work/status"
export DP_WORK_STATUS_TEMPLATE_FILE_NAME="template"
export DP_WORK_STATUS_FILE_NAME_FORMAT="status-%s.txt"

# When I'm in CA
#export TZ=PST8PDT
# :(dp-verbose-setenv "TZ" "PST8PDT"):
export TZ=EST5EDT
# :(dp-verbose-setenv "TZ" "EST5EDT"):

# All of //sw until it gets too big.
zzz_DP_NV_ME_DB_LOCS="ap //arch //sw/dev //sw/mods //sw/tools //hw/class //hw/kepler1_gklit3 //hw/tools"
#: ${DP_NV_ME_DB_LOCS=${zzz_DP_NV_ME_DB_LOCS}
DP_NV_ME_DB_LOCS=${zzz_DP_NV_ME_DB_LOCS}
unset zzz_DP_NV_ME_DB_LOCS

export DP_NV_ME_DB_LOCS

true
