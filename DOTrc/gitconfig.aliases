# Dumbassery:
# (currently, as of git 1.5.6.1) non-git alias are executed from the top-level dir of a repo
[alias]
	co = checkout
        # See which alias sticks and remove the rest.
        # Too bad there's already a revert command that is:
        # 1) unintuitively named, IMHO
        # 2) usurps an already established and common meaning.
        # Conventions are good.  "Hmmm, I think I'll have my program reopen
        # stderr to live on fd 37."  Wrong, but thanks for playing.
	cof = checkout --
        recover-file = checkout --
        rec = checkout --
        restore-file = checkout --
        rest = checkout --
        rfile = checkout --
        rf = checkout --
        rollback = reset --hard
        rb = reset --hard
        backout = reset --hard
        rewind = reset --hard
        undo-changes = reset --hard
        unchange = reset --hard
        undo-dirty = reset --hard
        undirty = reset --hard
        undo-all = reset --hard

        rem = remote
        remv = remote -v

        shbr = show-branch
        sb = show-branch
	br = branch
        brv = branch -v
        current-branch = rev-parse --abbrev-ref=strict HEAD
        cbr = rev-parse --abbrev-ref=strict HEAD
        cob = checkout -b
        newbr = checkout -b
        newbranch = checkout -b
	ci = commit -s
        cia = commit -a -s
        commit = commit -s
        real-commit = commit
	st = status
	s = status
        sno = status -uno
        ss = status -s

        ldf = log --decorate=full
        logf = log --decorate=full
        ldf5 = log --decorate=full -n 5
        ldfn = log --decorate=full -n
        ld = log --decorate
        ld5 = log --decorate -n 5
        ldn = log --decorate -n
        log5 = log -n 5
        l1 = log -n 1
        l5 = log -n 5
        log11 = log -n 11
        l11 = log -n 11
        lone5 = log -n 5 --oneline
        loneog11 = log -n 11 --oneline
        lol = log --oneline
        lol5 = log -n 5 --oneline
        lolog11 = log -n 11 --oneline
        lo5 = log -n 5 --oneline
        lo11 = log -n 11 --oneline
        lon = log --oneline -n
        lon5 = log -n 5 --oneline
        lon11 = log -n 11 --oneline
        # Height of laziness: saving -n<space>
        ln = log -n
        # 2 chars.  No project will ever be late now.
        logn = log -n
        # These are longer than the actual command to compensate for all of
        # the shorter ones.
        filediffs = log -u        # show changes to a file
        filepatches = log -u      # show changes to a file
        
        # See what sticks.
        logfiles = log --name-status
        lfiles = log --name-status
        lns = log --name-status
        lls = log --name-status
        lf = log --name-status
        lfn = log --name-status -n

        logfull = log --pretty=medium
        logmed = log --pretty=medium
        logmsg = log --pretty=medium
        logr = log --graph
        lgr = log --graph

        dfo = diff --name-only
        dfn = diff --name-only
        dno = diff --name-only
        # (currently, as of git 1.5.6.1) non-git alias are executed from the
        # top-level dir of a repo
        # The final dash is so that arguments start with $1, not with $0. 
        diffnp = !sh -c 'git --no-pager diff "$@"'
        dnp = !sh -c 'git --no-pager diff "$@"'
        diffcat = !sh -c 'git --no-pager diff "$@"'
        dcat = !sh -c 'git --no-pager diff "$@"'

        # I keep "thinking" ahead to the next command.
        FETCH = fetch
        difffh = diff FETCH_HEAD
        dFH = diff FETCH_HEAD
        dfh = diff FETCH_HEAD
        pullff = pull --ff-only
        # q.v. Zoot
        pulljustpull = pull
        pjpull = pull
        pjp = pull
        fdr = fetch --dry-run
        fetch-n = fetch --dry-run
        mnc = merge --no-commit
        pffo = pull --ff-only --no-commit
        mffo = merge --ff-only --no-commit
        # Merge after fetch.
        mfh = merge FETCH_HEAD

        conflicts = diff --name-only --diff-filter=U
        # Using <command> --continue will end up displaying the conflicting file.
        # This works fine if you're just working your way through the
        # cherry-pick or rebase.

        cpc = cherry-pick --continue
        rebc = rebase --continue

        cpick = cherry-pick

        # If command is disabled in config (e.g. I don't want to push
        # accidentally on the amdgpu tree.)
        # NB: you cannot disable git commands by making aliases that do nothing.
        # e.g.:
        # push = FOAD
        # Won't work because git only looks for aliases if the command isn't
        # matched as a builtin.
        # See the function named git().
        fpush = push
        pushf = push
        jfp = push

# Graphical diff tool employer/environment de jure
        dtgraphical = difftool --tool=diffuse
        dtdejour = difftool --tool=meld
        dtg = difftool --tool=meld

# diff tools
        dtp4v = difftool --tool=p4diff
        dtp4 = difftool --tool=p4diff
        dtmeld = difftool --tool=meld
        dtm = difftool --tool=meld
        dtdiffuse = difftool --tool=diffuse
        dtd = difftool --tool=diffuse
        dtecdiff = difftool --tool=ec-diff
        dte = difftool --tool=ec-diff
        dtec = difftool --tool=ec-diff
        dtecmerge = difftool --tool=ec-merge
        dtem = difftool --tool=ec-merge

#merge tools        
        p4m = mergetool --tool=p4merge
        mtp4m = mergetool --tool=p4merge
        p4merge = mergetool --tool=p4merge
        mtp4merge = mergetool --tool=p4merge

        hist = log -n 5 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        h = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        h5 = log -n 5 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        hn = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short -n
        h20 = log -n 20 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        h5 = log -n 5 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        h11 = log -n 11 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
        dotgit = rev-parse --git-dir
        gdir = rev-parse --git-dir
        # there is now a git alias command, but 'tis called alias.
        # but it comes in a separate package and may not be installed.
	aliases = config --get-regexp ^alias\\.
        #aliases = alias
        
        # Reset to *previous* commit.
	undo-commit = reset --soft HEAD^
	uncommit = reset --soft HEAD^
        amend = commit --amend
        rank = shortlog -sn --no-merges

        # remove files from index (tracking).  Changes remain in working dir.
        unstage = reset HEAD
        # Add puts you there and minus is negative add.  Ha.
        minus = reset HEAD
        sub = reset HEAD
