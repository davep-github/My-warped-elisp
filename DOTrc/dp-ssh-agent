#!/bin/sh

#source script-x
set -x
#set -e
# These were clobbering each other across hosts.
# true ${booba:="$HOME/yayazzz/${dok-$(hostname)}"}; echo "booba>${booba}<"
true ${DP_SSH_AGENT_BASE="$HOME/.ssh/acmds.${HOST-$(hostname)}"}
true ${DP_SSH_AGENT_RC="$HOME/.ssh/acmds.${HOST-$(hostname)}.rc"}
true ${DP_SSH_AGENT_RC_STDERR="${DP_SSH_AGENT_BASE}.stderr"}
true ${DP_SSH_AGENT_RC_LOG="${DP_SSH_AGENT_BASE}.log"}
export DP_SSH_AGENT_RC_umask=0077
export DP_SSH_AGENT_RC_STDERR_umask=${DP_SSH_AGENT_RC_umask}

#wip dp_get_ssh_agent()
#wip {
#wip     ssh-add -l > /dev/null 2>&1
#wip     local rc=$?
#wip     case "$rc" in
#wip         # Up and happy or up and empty
#wip         0|1) echo "SSH_AGENT_PID"; true; return;;
#wip     esac
#wip     local possible_pid=$(dpgrep -p ssh-agent | head -n1)
#wip     [ -z "${possible_pid}" ] && {
#wip         # No ssh-agent we can talk to.
#wip         return 1
#wip     }
#wip }

dp_ssh_add_default_keys()
{
    ssh-add -l > /dev/null 2>&1
    local rc=$?
    echo "$(date): dp_ssh_add_default_keys(): rc: $rc"

    case "$rc" in
         # Some keys have been added. We won't do an ssh-add to get all
         # because that will require us to re-enter any existing keys'
         # passwords.
        0) true;;
        # Agent up, no keys. Add defaults, and return that op's status.
        1) ssh-add;;
        # No agent
        *) false;;
    esac
}

dp_ssh_add_keys()
{
    dp_ssh_add_default_keys && {
        if [ -n "${DP_SSH_EXTRA_KEYS}" ]
        then
            ssh-add "${DP_SSH_EXTRA_KEYS}"
        else
            # Don't let the fact that DP_SSH_EXTRA_KEYS is not set look
            # like a failure.
            true
        fi
    }
}

# Really start or connect to ssh agent
dp_ssh_start_agent0()
{
#set -x
    echo "$(date): begin dp_ssh_start_agent0(). PID: $$, BASHPID: ${BASHPID}."
    # Until I fix this whole concept.
    # Olde code that used to/may have worked, but ???
    if [ "$1" = '-x' ]
    then
        set -x
        shift
    fi

    [ -n "${SSH_AGENT_PID}" ] && {
	if dpgrep "^[[:space:]]*${SSH_AGENT_PID}[[:space:]]"
	then
	    dp_ssh_add_keys || {
		echo "ssh-add failed, rc: $?"
		return 1
	    } 1>&2
	fi
	echo "Attached to agent, pid: ${SSH_AGENT_PID}"
	return 0
    }
    # allows us to see if dumb-ass bash decided to run us in a
    # sub-{shell|process} which, of course, prevents the outside world from
    # seeing important changes.
    #eval XXX_ARG_VAL="${XXX_ARG_VAL}.$$"
    #export XXX_ARG_VAL
    #echo_id XXX_ARG_VAL
    date
    env | fgrep SSH
    echo_id DP_SSH_AGENT_RC
    echo "$(date): See if there's a running agent to which we are attached."
    if dp_ssh_add_keys
    then
        echo "$(date): Added keys to existing agent."
        return 0
    else
#        if [ "$?" = 1 ]
#        then
#            return "${BOGUS_RC_THAT_MEANT_SOMETHING}"
#        fi
        echo "$(date): Could not add keys to an existing agent, rc: $?"
    fi

    echo "$(date): See if we can attach to one we started elsewhere."
    [ -e "${DP_SSH_AGENT_RC}" ] && {
        # Use last set of agent variables.
        echo "$(date): --- ${DP_SSH_AGENT_RC} ---"
        cat "${DP_SSH_AGENT_RC}"
        echo "--- ${DP_SSH_AGENT_RC} ---"
        source "${DP_SSH_AGENT_RC}" || {
            echo "$(date): Error sourcing ${DP_SSH_AGENT_RC}: $?"
            return 3
        }

        echo "$(date): See if the agent be still alive."
        if prog-with-pid ssh-agent "${SSH_AGENT_PID}"
        then
            echo "$(date): Try to add keys to existing agent."
            dp_ssh_add_keys && {
                echo "$(date): Reconnected to existing agent."
                return 0
            }
            echo "$(date): Could not add keys to existing agent: $?"
        else
            echo "$(date): Could not find a running agent: $?"
        fi
    }
    # There isn't an agent already running that we can use, neither
    # configured in this shell nor one whose configuration info is in the
    # "$DP_SSH_AGENT_RC"
    # So start one and save the configuration variables.
    echo "$(date): Trying to start new agent"
    {
	echo "============= OLD RC ============="
	cat "${DP_SSH_AGENT_RC}"
	echo "============= OLD RC ============="
    } 1>&2
    dpgrep ssh-agent 2>&1
    ssh-agent 2>| /tmp/ssh-agent-error >| /tmp/ssh-agent-out
    dpgrep ssh-agent 2>&1
###    ssh-agent 2>| /tmp/ssh-agent-error | \fgrep -v echo >| "${DP_SSH_AGENT_RC}"
    cat /tmp/ssh-agent-out | \fgrep -v echo >| "${DP_SSH_AGENT_RC}"
    {
	echo "============= NEW RC ============="
	cat "${DP_SSH_AGENT_RC}"
	echo "============= NEW RC ============="
    } 1>&2
    # and set them.
    source "${DP_SSH_AGENT_RC}" || {
        echo "$(date): Error sourcing ${DP_SSH_AGENT_RC} from new agent."
        return 4
    }
    # If we can't set the keys, we're doomed.
    # We'll pass on the key command rc whatever it is.
    echo "$(date): See if we can add keys to our new agent."
    dp_ssh_add_keys
    local rc="$?"
    if [ "${rc}" != 0 ]
    then
        echo "$(date): Error adding keys to new agent."
        echo "$(date): Killing ${SSH_AGENT_PID}"
        kill "${SSH_AGENT_PID}"
    fi
    echo "$(date): Added keys, returning rc: ${rc}"
    return "${rc}"
}

dp_ssh_start_agent()
{
    #echo "$(date): begin dp_ssh_start_agent(). PID: $$, BASHPID: ${BASHPID}."
    local dashx_p=
    [ "${1}" = "-x" ] && {
        shift
        dashx_p=t
        set -x
    }
    #export XXX_ARG_VAL=dp_SSH_start_agent0_${SECONDS}

    # Fuck off, gpg-agent (until it stops sucking.)
    # It uses an environment var:
    # SSH_AUTH_SOCK=/run/user/8084/gnupg/S.gpg-agent.ssh
    echo_id SSH_AUTH_SOCK
    [[ "${SSH_AUTH_SOCK-}" =~ /S.gpg-agent.ssh ]] && {
	unset SSH_AUTH_SOCK
    }
    while true
    do
      dp_ssh_start_agent0 "$@" >| "${DP_SSH_AGENT_RC_LOG}" 2>&1
      [ "$?" = "${BOGUS_RC_THAT_MEANT_SOMETHING}" ] && {
          echo "EAGAIN, iteratin'..."
          continue
      } 1>&2
      break
    done
#    unset XXX_ARG_VAL

    [ -n "${dashx_p}" ] && envgrep SSH
}

[ -n "${runme-}" -o "$(basename -- $0)" = dp-ssh-agent ] && {
    echo 1>&2 "DOING IT, BABY!"
    dp_ssh_start_agent "$@"
}

