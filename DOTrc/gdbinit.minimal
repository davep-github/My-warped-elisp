# INSTRUCTIONS: save as ~/.gdbinit
#
# DESCRIPTION: A user-friendly gdb configuration file.
#
# REVISION : 6.1-gentoo
#
# CONTRIBUTORS: mammon_, elaine, pusillus, mong
#
# FEEDBACK: http://board.anticrack.de/viewforum.php?f=35
# SOURCE:   http://www.eccentrix.com/members/mammon/gdb_init.txt
# NOTES: 'help user' in gdb will list the commands/descriptions in this file
#        'context on' now enables auto-display of context screen
#
# CHANGELOG:
#	Version 6.1-gentoo
#	 made gas the default. some content censored to be *cough*
#	 politically correct. -solar
#	Version 6.1
#        fixed filename in step_to_call so it points to /dev/null
#        changed location of logfiles from /tmp  to ~
#	Version 6
#	 added print_insn_type, get_insn_type, context-on, context-off commands
#	 added trace_calls, trace_run, step_to_call commands
#	 changed hook-stop so it checks $SHOW_CONTEXT variable
#	Version 5
#	 added bpm, dump_bin, dump_hex, bp_alloc commands
#        added 'assemble' by elaine, 'gas_asm' by mong
#	 added Tip Topics for aspiring *cough* ;)
# 	Version 4
#	 added eflags-changing insns by pusillus
#	 added bp, nop, null, and int3 patch commands, also hook-stop
#	Version 3
#	 incorporated elaine's if/else goodness into the hex/ascii dump
#	Version 2
#	 radix bugfix by elaine
# TODO:
#	* add global vars to allow user to control stack,data,code win sizes
#	* add dump, append, set write, etc commands
#	* more tips!

# ______________breakpoint aliases_____________









# ________________eflags commands_______________
# --------------------patch---------------------
define nop
 set * (unsigned char *) $arg0 = 0xe1a00000
end
document nop
Patch byte at address arg0 to a NOP insn
Usage: nop addr
end


# --------------------cflow---------------------

define assemble
printf "Type code to assemble, hit Ctrl-D until results appear :)\n"
printf "Note that this command uses GAS (AT&T syntax) to assemble.\n"
shell as -o ~/__gdb_tmp.bin
shell objdump -d -j .text --adjust-vma=$arg0 ~/__gdb_tmp.bin
shell rm ~/__gdb_tmp.bin
end
document assemble
Assemble Intel x86 instructions to binary opcodes using gas and objdump
Usage: assemble address
end

# !scary bp_alloc macro!
# The idea behind this macro is to break on the following code:
#	0x4008e0aa <malloc+6>:  sub    $0xc,%esp
#	0x4008e0ad <malloc+9>:  call   0x4008e0b2 <malloc+14>
#	0x4008e0b2 <malloc+14>: pop    %ebx
#	0x4008e0b3 <malloc+15>: add    $0xa3f6e,%ebx
# At 0x4008e0b3, %ebx contains the address that has just been allocated
# The bp_alloc macro generates this breakpoint and *should* work for
# the forseeable future ... but if it breaks, set a breakpoint on
# __libc_malloc and look for where where the return value gets popped.

define bp_alloc
 tbreak *(*__libc_malloc + F) if $ebx == $arg0
end
document bp_alloc
This sets a temporary breakpoint on the allocation of $arg0.
It works by setting a breakpoint on a specific address in __libc_malloc().
USE WITH CAUTION -- it is extremely platform dependent.
Usage: bp_alloc addr
end


define tip_syntax
	printf "\n"
	printf "\t    INTEL SYNTAX                        AT&T SYNTAX\n"
	printf "\tmnemonic dest, src, imm            mnemonic src, dest, imm\n"
	printf "\t[base+index*scale+disp]            disp(base, index, scale)\n"
	printf "\tregister:      eax                 register:      %%eax\n"
	printf "\timmediate:     0xFF                immediate:     $0xFF\n"
	printf "\tdereference:   [addr]              dereference:   addr(,1)\n"
	printf "\tabsolute addr: addr                absolute addr: *addr\n"
	printf "\tbyte insn:     mov byte ptr        byte insn:     movb\n"
	printf "\tword insn:     mov word ptr        word insn:     movw\n"
	printf "\tdword insn:    mov dword ptr       dword insn:    movd\n"
	printf "\tfar call:      call far            far call:      lcall\n"
	printf "\tfar jump:      jmp far             far jump:      ljmp\n"
	printf "\n"
	printf "Note that order of operands in reversed, and that AT&T syntax\n"
	printf "requires that all instructions referencing memory operands \n"
	printf "use an operand size suffix (b, w, d, q).\n"
	printf "\n"
end
document tip_syntax
Summary of Intel and AT&T syntax differences
end
	

source ~/.rc/gdbinit-cpu-agnostic

#EOF
