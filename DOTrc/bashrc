# @(#)bash/ksh profile   -*-Shell-script-*-
# $Id: bashrc,v 1.55 2005/06/25 08:20:21 davep Exp $
# NB: all non-bash code is old, crufty and untested in a long time.
# Suppress any other means of enabling this.  NB: may break some stuff.
#set +x
#set -x
#echo "PS1:0>$PS1<"
#echo "\$0>$0<"
#echo "\$@>$@<"
#echo "\$PS1:0 | hd:"
#echo "$PS1" | ~/yokel/bin/hd
#echo "dp_NH:-1>$dp_NH<"
# $@ is unset when called for a new/login shell.
#echo "@>$@<"

#echo "LC>${LC_DP_YES_DP_ENV_P}<"
#echo "LC_DP_NO_DP_ENV_P>$LC_DP_NO_DP_ENV_P<"

[ -n "${DP_BASHRC_IN_PROGRESS-}" ] && {
    true
    return                      # Or exit?
}
export DP_BASHRC=t
export DP_BASHRC_IN_PROGRESS=t
source $HOME/.rc/func.early

if [ -n  "$GREP_OPTIONS" ]
then
    echo "GREP_OPTIONS is set, do a clean login."
fi

# defecated
## dp_no_dp_env_p_file="$HOME/ipc/dp-no-dp-env-${HOSTNAME}-p"
dp_no_dp_env_p_file="$HOME/ipc/dp-no-dp-env-p_${HOSTNAME}"
#ls -l "${dp_no_dp_env_p_file}"

if [ -z "${LC_DP_YES_DP_ENV_P}" ]
then
    [ -e "${dp_no_dp_env_p_file}" -o -n "$LC_DP_NO_DP_ENV_P" ] && {
        source "$HOME/.rc/env.pristine"
        PS1='\u@\h:\w\n[prim]\!> '
        return 0
    }
fi

export DP_RC_LIST_OTHERS="$HOME/.rc/bashrc"

. $HOME/.rc/func.early
# Define setenv to work like export so we can just copy in .cshrc stuff
setenv () 
{
    eval "export $1='$2'"
}

# If, e.g., I run "bash" in a tcsh, SHELL remains tcsh.
# Even though the parent shell is tcsh, this file is only run by a bash 
# and some things it calls (e.g. go2env) use SHELL.
#export SHELL=bash
export INPUTRC=$HOME/.inputrc

# XXX something in the a certain build process barfs if there is no trailing /.
# Even though tcsh is the shell of choice in the company, it can't hurt to stick it here as
# well.
export TMPDIR=/tmp/
export DP_TMPDIR=$HOME/tmp/

[ "${DP_BYPASS_BASHRC-}" = "Yes" ] && {
    # ??? Should this value be inherited?
    return 0
}

COMP_WORDBREAKS=${COMP_WORDBREAKS//:}

most_basic_path="/bin:/usr/bin"
prompt_command()
{
    :
}
export -f prompt_command

# This will only be set once
: ${DP_ENV_ORIGINAL_PATH:=$PATH}
export DP_ENV_ORIGINAL_PATH
PATH="${DP_ENV_ORIGINAL_PATH}"

# We don't want a leading or trailing : to be added.
# But we do want at least what I consider to be a vital path.
if [ -z "$PATH" ]
then
    PATH="$most_basic_path"
else
    PATH="$most_basic_path:$PATH"
fi
export -f prompt_command

DP_LOG=$HOME/var/log
export DP_LOG_DIR="$DP_LOG"
DP_BITCH_LOG="$DP_LOG/bitches"
DP_SUGGESTION_BOX="$DP_LOG/suggestions"

if [ -d "$DP_LOG" ]
then
    DAVEP_rc_log=$HOME/log/login-rc/$(/bin/hostname).log
else
    DAVEP_rc_log=$HOME/login-rc.$(/bin/hostname).log
fi

dp_rc_logger()
{
    echo "$(date +'%j:%R:%S'): $@" >> $DAVEP_rc_log
}
dp_rc_logger "================= $(date): begin bashrc ================="

pbit_farm_machine_p()
{
    local this_host
    if [ $# = 0 ]
        then
        this_host="$(hostname)"
    else
        this_host="$1"
    fi
    # Permabit test, benchmark, etc, machines. They can have problems dealing
    # with my specialized environment.
    case "$this_host" in
        *cargo*|*central*|*conventional*|*davis*|*farm*|*harvard*|*lambda*|*mizar*|*porter*|*superlifter*|*winlab*) true;;
        *) false;;
    esac
}

# goddamn linux assholes... gotta fuck with *everything*
CUTBIN=$(for cutter in /usr/bin/cut /bin/cut
do
    [ -x "$cutter" ] && {
	echo $cutter
	break
    }
done)

export HOST=${HOSTNAME-$(/bin/hostname | $CUTBIN -f1 -d.)} # short host name
export DOMAIN=$(/bin/hostname --fqdn | $CUTBIN -f2- -d.)

# This can be re-defined in a more specific rc file.
# Don't run ssh-agent unless directed to.
dp_ssh_run_agent_p()
{
    false
}
    
cut_and_run_host_p()
{
    pbit_farm_machine_p "$@"
}

case $- in
    # an interactive shell
    *i*) DP_ENV_INTERACTIVE=y;;
    *) DP_ENV_INTERACTIVE="";;
esac

# echo(1) but only if we're interactive.
bashrc_echo()
{
    if [ -n "$DP_ENV_INTERACTIVE" ]
    then
        # bin's may be more consistent. Certainly across shell types/versions.
        /bin/echo "$@"
    else
        # Did not echo
        return 2
    fi
}

bashrc_echo_err()
{
    bashrc_echo "$@" 1>&2
}

if cut_and_run_host_p && [ -z "$DP_ENV_INTERACTIVE" ]
then
    # Simple things like scp or tramp using same don't need anything more.
    dp_rc_logger "Non-interactive login... cutting and running."
    return 0
fi

dp_LOGGER()
{
    local logname="$1"
    shift
    local prefix="$1[$(~/bin/dp-std-timestamp)]"
    shift
    echo "$prefix: $0: $@" >> "$logname"
}
dp_bitch() { dp_LOGGER "$DP_BITCH_LOG" bitch "$@"; }
dp_suggest() { dp_LOGGER "$DP_SUGGESTION_BOX" "why not:"; }
# &>> isn't in all bash versions# dp_BITCH() { echo &>> "$@"; dp_bitch "$@"; }
dp_BITCH() { dp_bitch "$@"; }
export -f dp_bitch dp_suggest dp_BITCH
# Do this now so we can use my tools.
export DAVEP_ENVIRONMENT_p=t


# (ba)?sh on owls.vanu.com is old.  It canna grok [[, at the least,
# hence `case' for wild card handling.
: ${bounce_p=t}
case "$(hostname)" in
    owls*) primary_host="timberwolves";;
# No way to get to arthur which occasionally needs to be done.
#    arthur*) primary_host="shodan";;
    *) bounce_p=;;
esac

# XXX @todo This needs to know the name of the connecting
# host (i.e. the one that is ssh'ing; but this is being executed
# on the ssh'd to host.
if [ -n "${DP_ENV_INTERACTIVE}" -a -n "${bounce_p}"  \
     -a "${HOST}" != "${primary_host}" ]; then
    echo
    bm="******* Bouncing from $(hostname) to $primary_host"
    echo "$bm"
    dp_rc_logger "$bm"
    exec ssh "$primary_host"
fi

export SP_BIN="$HOME/yokel/bin/sp"
dp_suggest 'Fix settings of "orig" vars to only be iff NULL???'
dp_suggest "Or collect 'em in an array?" 
dp_suggest 'Factor out ALL interactive fiddle-faddle and skip unless interactive.'

# Only set if NULL when "" actually has meaning.
# DISPLAY unset or NULL tells us something important.
: ${origDISPLAY=$DISPLAY}; export origDISPLAY
#[ -z "$origDISPLAY" ] && export origDISPLAY=$DISPLAY
: ${origPKG_CONFIG_PATH:=$PKG_CONFIG_PATH}; export origPKG_CONFIG_PATH

# Need $HOME/bin/pathadd and $HOME/lib/pylib for new python based pathadd
PATH="$HOME/bin:$DP_ENV_ORIGINAL_PATH"    # Start with the original path???
PYTHONPATH="${PYTHONPATH-} $HOME/lib/pylib $PATH"

dp_add_to_path_iff()
{
    # not present --> add
    # add --> not (wasn't) present.
    $HOME/bin/pathadd2.py "$@"
}
export -f dp_add_to_path_iff

export PKG_CONFIG_PATH=$(dp_add_to_path_iff $PKG_CONFIG_PATH "$HOME/bree/lib/pkgconfig")
export RC_DIR=$HOME/.rc
export OSName=$(uname -s)	# our current os
export Arch=$(uname -m)		# our current architecture
case "$Arch" in
    *86*) genericArch_bin="bin.$OSName.x86";;
    *);;
esac
arch_bin="bin.$Arch"            # arch specific bin dir
arch_os_bin="bin.$OSName.$Arch"	# arch/os specific bin dir
if [ -z "$MACHTYPE" ]
then
    # Guess a machine type if one is not set.
    # useful in Makefiles, etc.
    MACHTYPE="$(uname -m)-$(uname -s)"
fi
# These used to be exported, but not anymore.
# I wonder why? I depended on them for some stuff somewhere, sometime, somehow.
# ~so I sentence them to be export'd before their peers.~
export MACHTYPE LINES

#echo "\$TERM>$TERM<"
# make sure some kind of terminal type is set
if [ -z "$TERM" ]
then
    export TERM=vt100
elif [ "$TERM" = "rxvt" -a "$OSName" = "OSF1" ]
then
    # OSF1 doesn't understand rxvt, but rxvt understands xterm. 
    export TERM=xterm
fi


# Pull in some useful functions. func has a dependency on PATH???
. $RC_DIR/func

# bin dirs from most specific to least
if vsetp $genericArch_bin
then
    DAVEP_BIN_VARIANTSx="$genericArch_bin.$HOSTNAME,$genericArch_bin"
else
    DAVEP_BIN_VARIANTSx=
fi
#echo_id arch_bin
DAVEP_BIN_VARIANTS="$arch_os_bin.$HOSTNAME,$arch_os_bin,$arch_bin.$HOSTNAME,$arch_bin,bin.$HOSTNAME,$DAVEP_BIN_VARIANTSx,sbin,bin"
#echo_id DAVEP_BIN_VARIANTS
#echo_id DAVEP_BIN_VARIANTSx
#eval echo $HOME/{$DAVEP_BIN_VARIANTS}
#exit 99
DAVEP_BIN_DIRS="$(eval echo $HOME/{$DAVEP_BIN_VARIANTS} \
    $HOME/{local,yokel}/{$DAVEP_BIN_VARIANTS})
    $HOME/lib/pylib \
    $HOME/bree/bin \
    $HOME/bree/sbin \
    $HOME/bin.primitive \
    $HOME/bin.local \
    $HOME/bin.alternatives"
#echo_id >| ~/tmp/dp-path DAVEP_BIN_DIRS
#exit 99
unset DAVEP_BIN_VARIANTSx
# Push some important stuff onto the path.  It can be useful to add locale
# specific dirs early with no "harm" because PATH is filtered such that
# nonexistent dirs are discarded.
export PATH=$(dp_add_to_path_iff -p "$PATH" \
    $DAVEP_BIN_DIRS \
    /etc/alternatives \
    /opt/kde3/bin \
    /usr/local/bin \
    /bin \
    /usr/bin \
    /sbin \
    /usr/sbin \
    /usr/local/sbin)

#echo >> ~/tmp/dp-path "PATH>${PATH}<"

# Append some less important stuff if it exists.
export PATH=$(dp_add_to_path_iff "$PATH" \
    /usr/bin/mh \
    /usr/bin/X11 \
    /usr/X11R6/bin)

unset arch_bin

#
# OSF1 works best with echo on, period.
if inside_emacs_p && [ "$OSName" != "OSF1" ] #-a "$OSName" = "Linux" ]
then
    #stty echo causes stair-stepping
    stty -echo
fi

# add locations for finding bash if they are not already there.
case "$PATH" in
    */usr/local/bin*) ;;
    *) PATH="$PATH:/usr/local/bin";;
esac

# need this here so host-info, et.al. work
export PYTHONPATH=$(dp_add_to_path_iff -p "${PYTHONPATH-}" "$HOME/lib/pylib" \
    "${PYTHONPATH-}" "${PYTHONPATH_PRE-}")
PYTHONPATH=$(dp_add_to_path_iff "${PYTHONPATH-}" "$PATH:${PYTHONPATH_POST-}")
PYTHONPATH=$(path-verify -d "${PYTHONPATH-}")

export DP_shell_options=''

if type python && type host-info.py
then
    HOST_INFO=host-info.py
else
    HOST_INFO=host_info_func
    host_info_func()
    {
        case "$1" in
            -n) echo $2;;
             *) echo "-";;
        esac
    }
    export -f host_info_func
fi > /dev/null 2>&1
export HOST_INFO

# determine shell name
# easier to have .profile, .bash_profile call common script w/
# shell_name set?
if [ -n "${KSH_VERSION-}" ]
then
    case $KSH_VERSION in
	*PD\ KSH*)
	    shell_name=pdksh
	    ;;
	*)
	    shell_name=ksh
	    ;;
    esac
elif [ -n "${BASH_VERSION-}" ]
then
    shell_name=bash
elif [ "$HOSTNAME" = "darkstar" -o "$HOSTNAME"  = "rock" ]	# bleagh :-(
then
    shell_name="ksh"
#elif [ -n "${.sh.version}" ]
#then
#    shell_name=93ksh
else
    shell_name=ksh
fi
export shell_name

# load a conf file if one exists.  the values in it will
# take precedence over anything coming from $HOST_INFO
# this allows us to function in the absence of python.
FAMILY= FAMILY_ZONE= pre_rcs= post_rcs= WORK_ZONE= PROJECT=
HOST_CONF="$RC_DIR/$HOSTNAME.conf"
[ -f  $HOST_CONF ] && source $HOST_CONF

case $HOSTNAME in
    # quabbin is so old that the shell functions cause
    # syntax errors... it is ULTRIX!
    # just bail here.  all we use quabbin for is inc'ing
    # mh mail.
    quabbin*) 
	;;
    *)
	: ${FAMILY:=$(host-family)}
	: ${FAMILY_ZONE:=$(host-family-zone)}
	: ${WORK_ZONE:=$($HOST_INFO -n '-' work-zone)}

        # Project stuff:
        : ${PROJECT:=$($HOST_INFO -n '' project)}
        test -z "${PROJECT-}" && PROJECT='-'
	;;
esac
export FAMILY
export FAMILY_ZONE
export WORK_ZONE
export PROJECT

# least specific to most so we can override things.
export locale_rcs_fields=".OSName .FAMILY_ZONE .FAMILY .HOSTNAME .PROJECT .var .early" # .$WORK_ZONE"
export locale_rcs=".$OSName .$FAMILY_ZONE .$FAMILY .$HOSTNAME $PROJECT .var .early" # .$WORK_ZONE"
: ${pre_rcs:=$($HOST_INFO -n '' locale_pre)}
: ${post_rcs:=$($HOST_INFO -n '' locale_post)}
locale_rcs="$pre_rcs $locale_rcs $post_rcs"
# this strips leading and trailing spaces.  they were
# causing emacs problems.  We fix 'em here so no one else
# has to worry about it.
set -- $locale_rcs
locale_rcs="$@"
set --

#
# add some locale specific dirs...
export HOST_INFO_PATH="
    $HOME/bin.$WORK_ZONE
    $HOME/bin.$OSName
    $HOME/bin.$FAMILY
    $HOME/bin.$FAMILY_ZONE"
#echo "0:PATH>$PATH<"

PATH=$(dp_add_to_path_iff -p "$PATH" ${HOST_INFO_PATH})


# load locale specific functions
EXTRA_RCS=''			# list of files other rcs want us to run
source_list -l $RC_DIR/rc       $locale_rcs .work
source_list -l $RC_DIR/func     $locale_rcs .work
source_list -l $RC_DIR/env ""   $locale_rcs .work
source_list -l $RC_DIR/alias "" $locale_rcs .work

# run any RC files that other RC files have requested.
# this lets things like host RCs ask for, say, a project RC
[ -n "$EXTRA_RCS" ] && {
    source_list -l $RC_DIR/rc    $EXTRA_RCS
    source_list -l $RC_DIR/func  $EXTRA_RCS
    source_list -l $RC_DIR/env   $EXTRA_RCS
    source_list -l $RC_DIR/alias $EXTRA_RCS
    # add the extra rcs to locale
    locale_rcs=$(dp_add_to_path_iff -S "$locale_rcs" ${EXTRA_RCS})
}
unset EXTRA_RCS

# do this after host specific env is run to ensure . is first.
# . in path is unwise.
#export PATH=$(dp_add_to_path_iff -p "$PATH" .)

# optionally add YOKEL bins set by any of the env files
[ -n "${YOKEL_SBIN-}" ] && PATH="$YOKEL_SBIN:$PATH" 
[ -n "${YOKEL_BIN-}"  ] && PATH="$YOKEL_BIN:$PATH"
# remove non-existent dirs from path
###PATH=$(dp-fix-kde-order.py)
#echo "1:PATH>$PATH<"
#echo "1:DAVEP_BIN_DIRS>$DAVEP_BIN_DIRS<"

export DP_ENV_BIN_OVERRIDE="$HOME/bin/override"
PATH=$(dp_add_to_path_iff -p "$PATH" $DP_ENV_BIN_OVERRIDE $HOST_INFO_PATH)
PATH=$(dp_add_to_path_iff "$PATH" $HOME/bin/last-resort)

PATH=$(path-verify -d "$PATH")

if [ -z "$PATH" ]
then
    echo "bashrc: WARNING: PATH is empty, setting up minimal one."
    echo "It's amazing we got this far."
    PATH="$most_basic_path"
fi 1>&2

# add our path to python's list of where to look for imports.
#duped from above. export PYTHONPATH=$(dp_add_to_path_iff "$PYTHONPATH" "$PATH:$PYTHONPATH_POST")
#duped from above. PYTHONPATH=$(dp_add_to_path_iff -p "$PYTHONPATH" "$PYTHONPATH_PRE")
#duped from above. PYTHONPATH=$(path-verify -d "$PYTHONPATH")

if tty -s
then
    tty=`mytty`
    TTY=${TTY:-$tty}
fi


running_as_root_p()
{
    [ "$USER" = "root" ]
}

add_to_sudo_bash_env()
{
    running_as_root_p || echo "$@" >> "$sudo_bash_env"
}

dp_setup_prompt()
{
    # set up our prompt.
    # we want username, host and path in the term prompt,
    # and if we're in an xterm, we want that info plus
    # the tty in the window's title.  We also set the
    # icon name.

    #echo "TERM>$TERM<"

    export PS1_1=''
    scr_pre=''
    scr_suf=''
    _bashrc_set_ps1_path=''
        # screen's term type is vt100, but it can (?now?) set
        # title bar names.  But only when we're in an xterm, which
        # we infer from having a DISPLAY var set.
    case "$IMASCREENINSTANCE" in
    1|[Yy][Ee][Ss]|[tT])
            if [ -n "$DISPLAY" ]; then
    	_bashrc_set_ps1_path=X
        else
    	_bashrc_set_ps1_path=terminal
        fi
            ;;
    esac

    case $TERM in
        [Xx][Tt][Ee][Rr][Mm]*|[Rr][Xx][Vv][Tt])
    	case $shell_name in
    	    bash|pdksh|93ksh|ksh)
    		# xterm --> X
                        _bashrc_set_ps1_path=X
    	esac	# $shell_name
                #xmodmap -e "keysym Alt_L = Meta_L Alt_L"
    	;;
    esac		# $TERM
    if [ "$_bashrc_set_ps1_path" == terminal ]; then
        source setemph
            # @todo XXX make this work.
        PS1_pre_history="${emph}scrn!$norm"
        fi
        #echo "IMASCREENINSTANCE>$IMASCREENINSTANCE<"
        if [ -n "$IMASCREENINSTANCE" ]; then
            # Set the XTerm title bar stuff so that we'll see screen
            # names even if they were started in a non-XTerm,
            # e.g. a console.
            # sequence to set the name in the titlebar.
            # needs work, screen TERM is vt100
            # DISPLAY is set, tho.
            scr_pre='Scrn\('
            scr_suf="::$DP_MY_SCREEN_NAME\)"
        else
            scr_pre=
            scr_suf=
        fi
    # We save all title bar information regardless of whether or not
    # it can be used in the terminal in which we reside.  If we ever
    # come to reside in a terminal in which the info is useful wer
    # can use it..
    # This is primarily (?only?) needed when we are screen'ing.
        : ${PS1_title_prefix:='-'} ; export PS1_title_prefix
        : ${PS1_title_suffix:=""} ; export PS1_title_suffix
        export XTerm_title='${PS1_title_prefix}'"${scr_pre}"'${TTY}'"${scr_suf}"'-${PS1_1}${USER}@${HOSTNAME}:${PWD}${PS1_title_suffix}'
        # set LS_COLORS dir ls file coloring
    # Predicate color palette based on term type, background type
    # (loosely grouping colors into {light... dark} sets for ease
    # of determing best palette.  Eg: white, very light
    # {grey,blue,etc} can be approximated as light.
    ####eval export `dircolors ~/.rc/dp-gold-color.rc`
}

#
# interactive mode stuff
case $- in
    # an interactive shell
    *i*)
        sudo_bash_env="$HOME/.rc/sudo_bash_env"
        DP_ENV_INTERACTIVE=y
	dp-stty			# set tty mode
	fortune_path="/usr/games/fortune"
	#[ "$OSName" = "FreeBSD" ] && 
        fortune_option=-a
	for i in $fortune_path
	do
	    [ -x $i ] && {
		$i $fortune_option
		break
	    }
	done
	unset i fortune_path fortune_option

	#set -x
	unset PS1_path PS1_path_XTerm PS1_path_other
	#echo "opt>$DP_shell_options<"
	case ":$DP_shell_options:" in
	    *:no_ps_path:*)
		# echo 'no titler set'
		;;
	    *) dp_setup_prompt;;
	esac			# $DP_shell_options

	case $shell_name in
	    pdksh)
		. $RC_DIR/bind	# pdksh can do bindings.
				# shellify bind when others can, too.
		set -o ignoreeof
		set -o braceexpand
		bang='!'
		;;
	    ksh)
		bang='!'
		;;
	    bash)
                : ${PS1_bang_pre:=""}
                : ${PS1_bang_suff:=""}
                # Can't pass env vars through sudo.
                export PS1_bang_pre
                export PS1_bang_suff
                add_to_sudo_bash_env "export PS1_bang_pre=$PS1_bang_pre"
                add_to_sudo_bash_env "export PS1_bang_suff=$PS1_bang_suff"
		bang='\!'
                : ${PS1_prefix:=""}
                : ${PS1_suffix:=""}
                # Can't pass env vars through sudo.
                export PS1_prefix
                export PS1_suffix
		# num extra ^Ds needed to exit shell
		# we're usually in a screen for something important
		#  so make exiting it very hard.  ^Dx3 is a habit.
		#  can always exit w/exit command.
		unset ignoreeof
		case "$IMASCREENINSTANCE" in
		1|[Yy][Ee][Ss]|[tT])
		    ignoreeof=7
		    typeset +x IMASCREENINSTANCE # Remove export attribute.
                    alias exit="echo 1>&2 I\'m a screen... use \\\\exit or ^XK '(kapital K)' to really exit."
                    ;;
		*)  
		    ignoreeof=2;;
		esac
	esac
	source setemph		# set emphasis/norm sequences
        case "$USER" in
            root) emph='\[\033[01;31m\]'
                  emph2='\[\033[01;31m\]'
                  #emph2=""
                  PS1_terminator='##'"${norm}"
                  # Gaping security hole to allow me to pass variables to a
                  # sudo'd shell.
                  # All this bullshit just to get matching prompt stuff.
                  [ -e "$sudo_bash_env" ] && source "$sudo_bash_env"
		  ;;

            *) PS1_terminator='>';emph2=; norm2=;;
        esac
        BASE_PS1_terminator="$PS1_terminator"
        # experimental comment on: export PS1_terminator
	PS1_path="${PS1_path}$emph"':\w'"$norm"
	# make PS1 a shell variable, not an environment variable.
	# this prevents it from being used by children.
	# since the prompt is so complex, some things can
	# be confuzed by it.  E.g. tramp.el, a remote file
	# editing facility for emacs.
	unset PS1
        # Works
	#PS1="$emph"'\u@\h$PS1_1'"$norm$PS1_path\n$emph2\!$PS1_terminator$norm "
        # Experimental.
	PS1='${PS1_prefix}'"${emph}"'\u@\h${PS1_1}'"${norm}${PS1_path}"'${PS1_path_suffix}\n'"${emph2}"'${PS1_bang_pre}'"\!"'${PS1_bang_suff}${PS1_terminator}'"${norm2} "
	unset bang emph norm emph2 norm2

	set -o emacs		# ok for bash
	set -o noclobber	# only set for interactive shells
	;;
    *)
	# non-interactive
	set +o noclobber	# to prevent scripts from puking
	;;
esac
# this was in ~/.rc/func, but it needs to run *after* the prompt stuff runs
# but I want to run the alias script earlier, so this is extracted.
# it may actually be of little use after all this time.
[ -z "${PS1_path-}" ] && alias cd=dp_cd

unset i

#
# ANAL alert: fix path
# since pwd rudely converts symlink names into absolute names,
# we do this hack to force the initial home path to be
# a nice relative name, since bash $PWD is symlink friendly.
old_cwd=$PWD			# save where we were
cd ~				# go home
#
# see if we are in the long, symlink expanded home dir.
# if so we stay in the nice ~ version that bash gives us.
# otherwise we go back to where we were.
# /bin/pwd will return an ugly absolute pathname.  We see if our shell
# inherited the same ugly path.  If so, we are home and we can 
# use the pretty home path.
# (sometimes I scare myself)
[ "$old_cwd" != "`/bin/pwd`" ] && cd "$old_cwd"

#
# source some completion code.
# It's copied occasionally from the default bash completion stuff in
# /etc/bash_completion and /etc/bash_completion.d
#
# This isn't really needed except on boxes that are completion capable but not
# completion enabled.
DP_SOURCED_BASH_COMPLETION_FILES=
source_bash_completion_code()
{
    [ -n "$BASH_COMPLETION_COMPAT_DIR" ] && return

    # Try possible completion setup scripts before loading them myself.
    for script in /etc/bash_completion /usr/share/bash-completion/bash_completion
    do
      [ -e "${script}" ] && {
          source "${script}"
          DP_SOURCED_BASH_COMPLETION_FILES="${script}"/
          return 0
      }
    done
    # NB this requires some system changes.
    # for now, a symlink must be created by hand:
    # ~/.bash_completion.d -> /usr/share/bash-completion/
#    local sys_completion
#    local sys_completions="
#/etc/profile.d/bash_completion.sh
#/etc/profile.d/bash-completion.sh"
#    for sys_completion in ${sys_completions}
#    do
#      [ -f "${sys_completion}" ] && {
#source "${sys_completion}"
#DP_SOURCED_BASH_COMPLETION_FILES="${sys_completion}"
#return 0
#      }
#    done
    local bc_dir
    local BASH_COMPLETION
    local bc_type
    local bc
    for bc_dir in "$@"
    do
      # Allow specific files to be specified.
      [ -d "${bc_dir}" ] || continue
      [ -e "${bc_dir}" ] || continue
      bcs=${bc_dir}/bash[-._]completion.sh
      bcdirs=$(echo ${bc_dir}/bash[-._]completion.d)
      for bcd in ${bcdirs}
      do
        dp_rc_logger "Examine>${bcd}<"
        [ -e "${bcd}" ] || continue
        bds=$(echo $bcs ${bcd}/*)
        bcs="${bcs} ${bds}"
      done

      for bc in ${bcs}
      do
        dp_rc_logger "source_bash_completion_code: trying >$bc<"
        [ -f "$bc" ] || continue
        source "$bc"
        case "$bc" in
            /etc/*) dp_rc_logger "source_bash_completion_code: sourced system bash completion >$bc<";
                    bc_type=system;;
                 *) dp_rc_logger "source_bash_completion_code: sourced NON-system bash completion >$bc<";
                    bc_type=local;;
        esac
        DP_SOURCED_BASH_COMPLETION_FILES="$bc:$bc_type;$DP_SOURCED_BASH_COMPLETION_FILES"
#        echo "0:DP_SOURCED_BASH_COMPLETION_FILES>$DP_SOURCED_BASH_COMPLETION_FILES<" >> ~/bubba
        return 0
      done
    done
    return 1
}

[ "$DP_ENV_INTERACTIVE" = 'y' ] && {
    source $HOME/.rc/dp-ssh-agent
    dp_ssh_run_agent_p && dp_ssh_start_agent
    ## Run completion explicitly if we're in the odd situation described above
    ## in the definition of `source_bash_completion_code'.
    ## `BASH_COMPLETION_COMPAT_DIR' is used (at least) by lubuntu by the
    ## completion setup code.  It is used as an indicator as to whether
    ## completion has been done yet.
    [ -z "$BASH_COMPLETION_COMPAT_DIR" \
      -a \
      -z "${DP_SOURCED_BASH_COMPLETION_FILES}" ] && {
        source_bash_completion_code /etc /etc/ /etc/bash_completion.d /etc/profile.d \
        || \
        source_bash_completion_code $HOME/etc $HOME/.rc
#        echo "1:DP_SOURCED_BASH_COMPLETION_FILES>$DP_SOURCED_BASH_COMPLETION_FILES<" >> ~/bubba
        readonly DP_SOURCED_BASH_COMPLETION_FILES
    }
    ##dp_rc_logger "sourcing extras: $(expand_source_list $RC_DIR/extra_bash_completion_code "" $locale_rcs)"
    ##source_list $RC_DIR/extra_bash_completion_code "" $locale_rcs
#    echo "2:DP_SOURCED_BASH_COMPLETION_FILES>$DP_SOURCED_BASH_COMPLETION_FILES<" >> ~/bubba
}

# arbitrary command to run when executing or sourcing.
#  e.g. DP_RUN_ME=ls . ~/.bashrc
[ -n "${DP_RUN_ME-}" ] && $DP_RUN_ME


login_times=$HOME/log/login-times
[ -e $login_times ] && {
    echo "$HOSTNAME -- $(date)" >> $login_times
}
unset login_times
[ -n "${login_times-}" ] && echo "WHAT THE FUCK???"

case "${IMASCREENINSTANCE-}" in
    1|[Yy][Ee][Ss]|[tT]) ;;
    *)  if [ "${DP_AUTO_SCREEN-}" = 'y' ] && shopt login_shell > /dev/null 2>&1
        then
            screen
        fi
        ;;
esac

#echo >> ~/tmp/dp-path "before do_go2env========================================================================"
#echo >> ~/tmp/dp-path "PATH>${PATH}<"
#echo >> ~/tmp/dp-path
do_go2env
#type python >> ~/tmp/dp-path 
#echo "PS1:1>$PS1<"
#echo "dp_NH:0>$dp_NH<"
# !!! What the Motherfucking what??!?!?
# [ -z "$dp_NH" ] && echo 'Noooo!!!!!' && nh
# executes nh even when echo up there shows dp_NH:0><
#[ "$dp_NH" == 'y' ] && echo 'Noooo!!!!!' && nh
# [ -n "$ZZZ" ] && echo "?>$?< WTF ZZZ>$NHZZZ<"
# [ -n "$Xdp_NH" ] && echo "?>$?< WTF Xdp_NH>$Xdp_NH<"
# [ -n "$dpNH" ] && echo "?>$?< WTF dpNH>$XdpNH<"
# [ -n "$dp_NH" ] && echo "[ -n ], ?>$?< WTF dp_NH:2>$dp_NH<"
# [ "$dp_NH" != "" ] && echo "[ != ], ?>$?< WTF dp_NH:3>$dp_NH<"
# [ "$dp_NH" != "" ] && echo "?>$?< WTF dp_NH:3>$dp_NH<"
# [ -n "$dp_NH" ] && {
#         echo "4: about to nh"
#         nh
# }
#echo "bashrc done"
vsetp "${dp_NH-}" && {	# It needs "{" to make it go.
    # mayhaps due to the fact that nh is a big ol' hairy alias?
    # nh is aliased to `export dp_NH=y; HISTFILE=; dp_NH_PS1_prefix=$PS1_prefix; PS1_prefix="(nh)$PS1_prefix"; PS1_title_prefix="-(NH)-"'
    nh
}

unset sudo_bash_env

export DP_BASHRC_EXECUTION_COMPLETED=t

xterm_ls_colors=$($HOST_INFO -n '' "xterm-ls-colors")
if [ -n "${xterm_ls_colors-}" ]
then
    source "${xterm_ls_colors}"
else
    unset LS_COLORS
fi

unset xterm_ls_colors


post_bashrc_command=$($HOST_INFO -n '' post_bashrc_command)
vsetp "${post_bashrc_command}" && {
    ${post_bashrc_command} $($HOST_INFO -n '' post_bashrc_command_args)
}
unset post_bashrc_command

# Clear any resijule boulders... um, debug settings.
dp_set_x_fini

[ -n "${DP_BASHRC_SOURCE_ME_LAST}" ] && {
    source "${DP_BASHRC_SOURCE_ME_LAST}"
}

# It should be benign in other cases, but it's vital that it be exported.
export LD_LIBRARY_PATH
unset EExecProgName
unset DP_BASHRC_IN_PROGRESS

true
