# getmailrc -- getmail configuration file
# $Id: verizon.rc,v 1.2 2012/02/22 08:10:19 root Exp $
#

########################################################################
[options]
verbose = 0
#delete = True
message_log = /var/log/getmail.verizon

########################################################################
[retriever]
type = MultidropPOP3Retriever
use_apop = False
server = incoming.verizon.net
username = panariti
password = pwdssuck1

# Our domain mailbox mailhost records the envelope recipient address in a
# new Delivered-To: header field at the top of the message.
#envelope_recipient = delivered-to:2
# My new header rewriting code generates a delivered to in the
# right position.
envelope_recipient = delivered-to:1
#envelope_recipient = to:1

########################################################################
#
# Motivation and design:
# I want to make sure that absolutely nothing gets lost. Not the least
# because of broken or badly written mail filters.
# I want to put a copy of every single email into a single archive.
# I had to go to a MultiDestination type config to get all of my desired
# behaviors:
# 1) a copy of everything.
# 2) Delivery of anything unknown/unexpected to a default (eg postmater).
#
# I can put any email into a number of different destinations based on
# regexps. Everyone that matches gets used. So a simple .* would do to back
# up everything. The problem is that this counts as a match and so nothing
# ends up being sent to the default recipient. So things would disappear into
# the backup and I would never realize that email with no destination was
# being sent. Hence MultiDestination:
# 1) Pan-backup to a single Maildir "user."
# 2) Specific delivery based on regexps with unrecognized stuff going to a
#    postmaster.
# 3) In addition, I am now putting another copy of everything into a simple,
#    flat mbox type mailbox.
#    Conceivably even a simple diff could do simple incremental backups or RCS
#    could be used.

[destination]
type = MultiDestination
destinations = ('[destination-atoz]', '[destination0]',
                '[destination-mbox-archive]')

########################################################################
[destination-atoz]
type = MultiSorter
default = [to-davep]
locals = (
  # The archiver of all.
  (".*",                                                "[to-Mr-AtoZ]"),
  )

########################################################################
[destination-mbox-archive]
type = MultiSorter
default = [to-mbox-archive]
locals = (
  # The archiver of all into an mbox
  (".*",                                                "[to-mbox-archive]"),
  )

# The new person in charge uses the to self w/bcc to everyone else so 
# personal addresses do not show up. 
# @reading.k12.ma.us
########################################################################
[destination0]
type = MultiSorter
default = [to-davep]
locals = (
  ("(cx|chicx|epleb).*@.*$(?i)",                        "[to-davep]"),
  ("d?panariti.*@.*$(?i)",                              "[to-davep]"),
  ("(dav|dp).*@.*$(?i)",                                "[to-davep]"),
  (".*@reading\.k12\.ma\.us$(?i)",                      "[to-davep]"),

  ("^(susan|mary|mom|mam).*@.*$(?i)",                   "[to-susan]"),
  (".*(susan|mary).*@.*$(?i)",                          "[to-susan]"),
  (".*\.mom@.*$(?i)",                                   "[to-susan]"),
  ("bmeparents.*@.*$(?i)",                              "[to-susan]"),
  ("15@",                                               "[to-susan]"),
  ("d1\.lego-universe(?i)",                             "[to-susan]"),
  (".*@reading\.k12\.ma\.us$(?i)",                      "[to-susan]"),

  ("^(rob|nemo|bark|sonic|shadow|slayer|tails|neopets|pawsy).*@.*$(?i)",
   "[to-rob]"),
  ("^(fiddlestick|yellowringfire|pandalian).*@.*$(?i)", "[to-rob]"),
  ("^(creamy.*filling|quetz|soup).*@.*$(?i)",		"[to-rob]"),
  ("^r.real-arcade@.*$(?i)",                            "[to-rob]"),
  ("^davep.ninten.*$(?i)",                              "[to-rob]"),
  ("davep.clubpenguin@",                                "[to-rob]"),

  ("^(rob|nemo|bark|sonic|shadow|slayer|tails|neopets|pawsy).*@.*$(?i)",
   "[to-susan]"),
  ("^(fiddlestick|yellowringfire|pandalian).*@.*$(?i)", "[to-susan]"),
  ("^(creamy.*filling|quetz|soup).*@.*$(?i)",		"[to-susan]"),
  ("^r.real-arcade@.*$(?i)",                            "[to-susan]"),
  ("^davep.ninten.*$(?i)",                              "[to-susan]"),
  ("^js.js@(?i)",                                       "[to-susan]"),
  ("davep.clubpenguin@",                                "[to-susan]"),

  ("^(sam).*@.*$(?i)",                                  "[to-sam]"),
  ("merrylayouts.*@.*(?i)",                             "[to-davep]"),
  ("merrylayouts.*@.*(?i)",                             "[to-susan]"),
  ("merrylayouts.*@.*(?i)",                             "[to-rob]"),
  # Robin's RealArcade account, password: vaj-vaj
  ("^davep.ninten.*$(?i)",                              "[to-susan]"),
  ("^(all|everyone|family|panaritis|everybody|x)@.*$(?i)","[to-davep]"),
  ("^(all|everyone|family|panaritis|everybody|x)@.*$(?i)","[to-susan]"),
  ("^(all|everyone|family|panaritis|everybody|x)@.*$(?i)","[to-rob]"),
  ("^(all|everyone|family|panaritis|everybody|x)@.*$(?i)","[to-sam]"),
  (".*@.*(freebsd|xemacs).org(?i)",                     "[to-davep]"),

  ("mail-test@.*(?i)",                                  "[to-mail-test]"),
  ("imaptest@.*(?i)",                                   "[to-imaptest]"),
  ("catch-all@.*(?i)",                                  "[to-godaddy-catch-all]"),
  )

########################################################################
[to-Mr-AtoZ]
type = MDA_external
user = davep
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "/mathoms/mail/Mr-AtoZ/Maildir/")

########################################################################
# Put a copy of every email into a simple, low overhead mbox file.
[to-mbox-archive]
type = MDA_external
user = davep
group = mail
path = /usr/bin/getmail_mbox
arguments = ("/mathoms/mail/mbox-archive", )

########################################################################
[to-davep]
type = MDA_external
user = davep
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~davep/Maildir/")

# Goddam GoDaddy ``forwarding'' servers often screw up in setting the
# Delivered-To: header, leaving it as the name of the email account,
# e.g. `catch-all'
# I have one email account set up as a `catch all', as godaddy calls it.  It
# is named catch-all@domain.  Any mail to domain is caught and sent to the
# forwarding account with Delivered-To: set to the actual name the email was
# sent.
[to-godaddy-catch-all]
type = MDA_external
user = davep
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~davep/Maildir/")

########################################################################
[to-susan]
type = MDA_external
user = susan
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~susan/Maildir/")


[to-rob]
type = MDA_external
# copy Rob's stuff to Mom for now.
user = robin
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~robin/Maildir/")


[to-sam]
type = MDA_external
# send Sam's stuff to Mom for now.
user = susan
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~susan/Maildir/")

########################################################################
[to-mail-test]
type = MDA_external
user = mail-test
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~mail-test/Maildir/")

########################################################################
[to-imaptest]
type = MDA_external
user = imaptest
group = mail
path = /usr/bin/getmail_maildir
arguments = ("-v", "~imaptest/Maildir/")

## ########################################################################
## [filter-000-save-all]
## type = Filter_external
## allow_root_commands = True
## path = /usr/yokel/bin/email-save-all.py


########################################################################
# [filter-1-clamav]
# type = Filter_classifier
# allow_root_commands = True
# path = /usr/bin/clamscan
# arguments = ("--stdout", "--no-summary",
#     "--mbox", "--infected", "-")
# exitcodes_drop = (1,)
########################################################################
#[filter-1-clamassassin]
#type = Filter_external
#allow_root_commands = True
#ignore_stderr = True
#path = /usr/bin/clamassassin
#exitcodes_drop = ()

########################################################################
# [filter-2-spamassassin]
# type = Filter_external
# allow_root_commands = True
# ####path = ~davep/bin/spamassassin-no-stderr
# ignore_stderr = True
# exitcodes_drop = ()
# path = /usr/bin/spamc

########################################################################
# mark GoDaddy fuck-ups that set Delivered-To to "catch-?all" instead of the
# real user@
[filter-3-catch-all]
type = Filter_external
allow_root_commands = True
path = ~davep/yokel/bin/mail_header_rewriter.py

########################################################################
# Send an email to a requested address.  This allows me to determine
# the current dynamic IP assigned to me.
[filter-4-ping-back]
type = Filter_external
allow_root_commands = True
path = ~davep/yokel/bin/email-ping-check.py

#
### Local Variables: ***
### mode:python ***
### End: ***
