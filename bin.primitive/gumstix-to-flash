#!/bin/bash
#set -x
: ${SRC:=$HOME/inb}
: ${MOUNT_POINT:="/mnt/vet-sdcard"}
: ${MOUNT_POINT_BOOT:="/mnt/vet-sdcard/boot"}
: ${MOUNT_POINT_ROOTFS:="/mnt/vet-sdcard/rootfs"}
: ${DEV:=/dev/vet-sdcard}
: ${GOLD_ROOT_FS_TARBALL:=gumstix-console-image-vet-sd-overo.rootfs.tar.bz2}
: ${GOLD_CONSOLE_IMG:=gumstix-console-image-vet-nand-2_0-golden.img}
: ${LEAD_ROOT_FS_TARBALL:="gumstix-console-image-vet-overo.tar.bz2"}
: ${ROOT_FS_TARBALL:=${LEAD_ROOT_FS_TARBALL}}
: ${SRC_DIR=.}
: ${MLO:="MLO"}
: ${ubootimg:="u-boot.img"}
: ${uimage:="uImage"}
: ${console:="gumstix-console-image-vet-overo.ubi"}
DEV="/dev/$(readlink ${DEV})"
echo "DEV>$DEV<"


: ${EZEC=}

: ${umount_p=t}
: ${tar_verbose_option=v}
: ${prep_t=t}
: ${no_files_p=}
: ${gold_p=}
: ${verbose_p=}

cd "${SRC}"

# to narrow: "${MOUNT_POINT_BOOT}|${MOUNT_POINT_ROOTFS}" && {
mount | egrep "${MOUNT_POINT}" && {
    echo "Some gumstix partitions are mounted."
    echo "It's probably best for you to unmount them."
    exit 1
} 1>&2

while (($# > 0))
do
  case "$1" in
      -n) EZEC="echo -";;
      -v|--verbose) verbose_p=t;;
      -q|--quiet) verbose_p=;;
      --set-x|--setx|-x) set -x;;
      --) shift; break;;
#      --ubootimg|--uboot) shift; ubootimg="${1}";;
#      --golduboot) ubootimg="gold/${ubootimg}";;
      -u) umount_p=;;
      --nu-boot|--su) ubootimg="nu-boot.img";;
      --su-boot|--su) ubootimg="su-boot.img";;
      --qu-boot|--qu) ubootimg="qu-boot.img";;
      --u-boot|--ub) ubootimg="u-boot.img";;
      --no-files) no_files_p=t;;
      --gold) gold_p=t;;
      --lead) gold_p=;;
            
      --tar-quiet|--tar-hush|--tq) tar_verbose_option=;;
      --mk2partsd|--prep|--partition) prep_p=t;;
      --no-mk2partsd|--no-prep|--no-partition) prep_p=;;
      --dev) shift; DEV="${1}";;
      *) break;;
  esac
  shift
done

echo "gold_p>${gold_p}<"
HOME_ROOT_FILES=()

if [ -n "${gold_p}" ]
then
    SRC_DIR=gold
    ROOT_FS_TARBALL="${SRC_DIR}/${GOLD_ROOT_FS_TARBALL}"
    HOME_ROOT_FILES=("${SRC_DIR}/${GOLD_CONSOLE_IMG}")
elif [ -z "${no_files_p}" ]
then
    SRC_DIR="."
    ROOT_FS_TARBALL="${SRC_DIR}/${LEAD_ROOT_FS_TARBALL}"
    HOME_ROOT_FILES=(
        "${SRC_DIR}/${MLO}"
        "${SRC_DIR}/${uimage}"
        "${SRC_DIR}/${console}"
    )
fi

ALL_FILES=("${HOME_ROOT_FILES[@]}" "${ROOT_FS_TARBALL}")
echo "ALL_FILES>${ALL_FILES[@]}<"

exit_p=
for f in "${ALL_FILES[@]}"
do
  ff="${f}"
  [ -e "${ff}" ] || {
      echo "${ff} does not exist."
      exit_p=t
  }
done 1>&2

[ "${exit_p}" = t ] && {
    echo "Some files were not found, nothing copied."
    exit 1
}

if [ -z "${prep_p}" ]
then
    ${EZEC} mk2partsd "${DEV}"
else
    echo "** Not partitioning/formatting dev>${DEV}<"
fi

set -x
mount | fgrep -q "${MOUNT_POINT}" >/dev/null 2>&1 || {
    echo "SD card is not mounted. Setting it up"
    # -p prevents barfage if dirs exist.
    ${EZEC} sudo mkdir -p "${MOUNT_POINT}"/{boot,rootfs} || {
        echo "mkdir of mount points failed."
        exit 2
    }

    # NB: Can't use -t <type> <mnt-point>. ? because they're in the fstab and
    # already have a type specified?
    mp="${MOUNT_POINT_BOOT}"
    ${EZEC} sudo mount "${mp}" || {
        RC=$?
        echo "mount ${mp} failed: $?"
        exit $RC
    }
    mp="${MOUNT_POINT_ROOTFS}"
    ${EZEC} sudo mount "${mp}" || {
        RC=$?
        echo "mount ${mp} failed: $?"
        exit $RC
    }
} 1>&2

mnt_boot="${MOUNT_POINT}/boot/"
${EZEC} sudo cp "${SRC_DIR}/MLO" "${mnt_boot}"
${EZEC} sudo cp "${SRC_DIR}/${ubootimg}" "${mnt_boot}/u-boot.img"
${EZEC} sudo cp "${SRC_DIR}/uImage" "${mnt_boot}"

nand_dir="${SRC_DIR}/nand"
[ -d "${nand_dir}" ] && {
    ${EZEC} sudo cp -rf  "${nand_dir}/" "${mnt_boot}"
}

mnt_rootfs="${MOUNT_POINT}/rootfs/"
${EZEC} sudo tar -xj${tar_verbose_option}f \
             "${ROOT_FS_TARBALL}" \
             -C "${mnt_rootfs}"
#${EZEC} sudo cp "${HOME_ROOT_FILES[@]}" "${mnt_rootfs}/home/root"
${EZEC} sudo cp "${SRC_DIR}/${ubootimg}" "${mnt_rootfs}/home/root/u-boot.img"

        

[ "${umount_p}" = 't' ] && {
    mp="${MOUNT_POINT}/boot"
    ${EZEC} sudo umount "${mp}" || {
        RC=$?
        echo "umount ${mp} failed: $?"
        exit $RC
    }
    mp="${mnt_rootfs}"
    ${EZEC} sudo umount "${mp}" || {
        RC=$?
        echo "umount ${mp} failed: $?"
        exit $RC
    }
} 1>&2

[ -n "$verbose_p" ] && {
    figlet "DONE"
}
