#!/usr/bin/env bash
#set -x
#
# $Id: new-pcal,v 1.24 2006/08/18 08:20:24 davep Exp $
#
# Generate next month's calendar, possibly archiving this month's.
#

cal_archive="$HOME/etc/Calendar-archive"

umon=$1
uyear=$2

. $HOME/etc/crontab.rc

# env 1>&2

mk_cal_name()
{
    echo "cal-${1}-${2}.ps"
}

cd $HOME/etc
rm -f cal.ps
rm -f mst3k-sched.pcal

# NTM: RTFM!!!!!!!!! +xx<time> good!
# linux date doesn't support it, so we do it ourselves :-(
month_names=(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)
set -- $(date '+%b %Y %m')
# months print as mm, so < 10 is 0m.  The arithmetic functions
# assume 0m is octal and get grumpy when 7 < m < 10.
# So we add 100 and subtract 99 to effectively add 1 to the month.
# 1$1 --> `1' concatenated to the 2 digit mm, so it looks like we're adding
# 100
#
# %m is one based... and we want mon + 1
# so we add 100 and subtract 100
# this keeps leading zeroes from making month number appear to be octal.
if [ -n "$umon" ]
then
    mon_num=$(( $umon - 1 ))    # ``last month''
else
    mon_num=$(( 1$3 - 100 ))
fi
if [ -n "$uyear" ]
then
    year="$uyear"
else
    year="$2"
fi
if [ "$mon_num" -ge 12 ]
then
    mon_num=0
    year=$(($year + 1))
else
    :    # year=$2... already set above
fi
mon=${month_names[$mon_num]}

[ -n "$cal_archive" -a -d "$cal_archive" -a -z "$umon" -a -z "$uyear" ] && (
    # archive current cal
    set -- $(date '+%b %Y')
    mon=$1
    year=$2
    cal_name=$(mk_cal_name $mon $year)
    [ -f $cal_name ] && { 
	archive_name="$cal_archive/$cal_name"
	echo "archiving $cal_name to $archive_name.gz"
	mv $cal_name $cal_archive &&
	    gzip -9 $archive_name
    }
)

#mstcal.py $mon $year > mst3k-sched.pcal

echo "mon>$mon<, year>$year<"
cal_name=$(mk_cal_name $mon $year)

pcal_cmd="pcal -n /8 $(($mon_num + 1)) $year"
echo $pcal_cmd
# pcal is one based
$pcal_cmd > $cal_name
ln -s $cal_name cal.ps

ps2pdf cal.ps - | mimeit Application/Pdf susan@meduseld.net "New calendar!!!"

echo "A new calendar for $mon/$year is available in:"
echo " $PWD/cal.ps and $PWD/$cal_name."
echo "You can print it with lpr (soon fool!)."

exit 0
