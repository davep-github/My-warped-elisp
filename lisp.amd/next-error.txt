Want something that can scan the (a) shell window and find lines matching an
error regexp and then visit the file at the correct line.

1) Maintain a variable that points after the last nexted error.  Scan from
that point forward looking for the error regexp.  This regexp (or
error finding function) will set vars to the error file, the error
line and the error column.  Point is moved after the matching LINE.
If point is at or past the end of the shell buffer (there is a shell
variable or predicate that tells us this) then "no more errors."

gcc error format:
x.c:2: parse error at end of input
(non-colon)+colon:(numeric)colon<space>error-message

----

========================
Friday September 15 2000
--
building around existing compile.el stuff.
They've added the ability to add compilation as a minor mode, but I'd
like a few improvements:
1) Whenever a command is entered, record this new position and reparse
errors from there the next time an error search is reuqested.
2) A goto specific error command which resets the error parse to that
line and below.
3) Detect when enter is pressed above the prompt-point and in this
case go to the error like #2
4) goto next error.  if in shell-buf, then we make this the active
compilation buf and goto next error.  dp-next-error is a global
binding, so it has to have some smarts. ??? Make it shell-buf
specific?

For ease, we'll call shell, rsh and telnet windows shells.


We hook come keys for comint-mode.

When the shell is entered, we need to hook M-. (goto-specific-error),
C-m (enter).
For C-m, we need to grab the old binding for enter so we can perform
expected actions after or instead of our additional ones.

In xxx-mode-hook, call dp-init-error.

1+3) Hook enter-key in xxx-mode-hook, save original binding.
If above prompt, call #2.
2) goto-specific-error.  maybe-add-compilation-minor-mode