
  semantic-symref-tool-xcscope([object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  apply(semantic-symref-tool-xcscope [object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  (setq lastval (apply (car lambdas) newargs))
  (if (or (not lambdas) (not ...)) (if (eieio-object-p ...) (setq rval ... rvalever t) (signal ... ...)) (run-hook-with-args (quote eieio-pre-method-execution-hooks) lambdas) (setq lastval (apply ... newargs)) (setq rval lastval rvalever t))
  (let* ((rval nil) (lastval nil) (rvalever nil) (scoped-class ...) (eieio-generic-call-key method-primary) (eieio-generic-call-next-method-list ...)) (if (or ... ...) (if ... ... ...) (run-hook-with-args ... lambdas) (setq lastval ...) (setq rval lastval rvalever t)) rval)
  (let ((newargs nil) (mclass nil) (lambdas nil) (eieio-generic-call-methodname method) (eieio-generic-call-arglst args) (firstarg nil) (primarymethodlist nil)) (setq newargs args firstarg (car newargs)) (cond (... ...) (... ...) (... ...) (t ...)) (when (null mclass) (error "Cannot dispatch method %S on class %S" method mclass)) (setq lambdas (eieio-generic-form method method-primary mclass)) (setq primarymethodlist (eieiomt-method-list method method-primary mclass)) (let* (... ... ... ... ... ...) (if ... ... ... ... ...) rval))
  eieio-generic-call-primary-only(semantic-symref-perform-search ([object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line]))
  semantic-symref-perform-search([object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  #<compiled-function (tool) "...(49)" [answersym tool answer semantic-symref-perform-search (no-parse-p processing-complete-p) eieio-oref :resulttype file :hit-files :hit-text :hit-lines semantic-symref-result searchfor :created-by] 7 "Calculate the results of a search based on TOOL.\nThe symref TOOL should already contain the search criteria.">([object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  apply(#<compiled-function (tool) "...(49)" [answersym tool answer semantic-symref-perform-search (no-parse-p processing-complete-p) eieio-oref :resulttype file :hit-files :hit-text :hit-lines semantic-symref-result searchfor :created-by] 7 "Calculate the results of a search based on TOOL.\nThe symref TOOL should already contain the search criteria."> [object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  semantic
-symref-get-result([object semantic-symref-tool-xcscope "semantic-symref-tool-xcscope" "empty_list" symbol project line])
  semantic-symref-find-references-by-name("empty_list")
  (setq res (edebug-after (edebug-before 28) 32 (semantic-symref-find-references-by-name ...)))
  (let ((ct ...) (res nil)) (edebug-after (edebug-before 5) 11 (when ... ...)) (edebug-after (edebug-before 12) 24 (when ... ...)) (edebug-after (edebug-before 25) 26 (message "Gathering References...")) (edebug-after (edebug-before 27) 33 (setq res ...)) (edebug-after (edebug-before 34) 39 (semantic-symref-produce-list-on-results ... ...)))
  signal(no-method-definition (semantic-symref-result-get-tags (no-parse-p t)))
  semantic-symref-result-get-tags(no-parse-p t)
  semantic-symref-produce-list-on-results(no-parse-p "empty_list")
  (let ((ct ...) (res nil)) (edebug-after (edebug-before 5) 11 (when ... ...)) (edebug-after (edebug-before 12) 24 (when ... ...)) (edebug-after (edebug-before 25) 26 (message "Gathering References...")) (edebug-after (edebug-before 27) 33 (setq res ...)) (edebug-after (edebug-before 34) 39 (semantic-symref-produce-list-on-results ... ...)))
  (lambda nil "Find references to the current tag.\nThis command uses the currently configured references tool within the\ncurrent project to find references to the current tag. The\nreferences are the organized by file and the name of the function\nthey are used in.\nDisplay the references in`semantic-symref-results-mode'" (interactive) (edebug-enter (quote semantic-symref) (list) (function ...)))()
  call-interactively(semantic-symref)







;;;###autoload
(defclass semantic-symref-tool-xcscope (semantic-symref-tool-baseclass)
  (
   )
  "A symref tool implementation using CScope with xcscope.el.
The CScope command can be used to generate lists of tags in a way similar to
that of `grep'.  This tool will not parse the output.  It will just hand off
the command to xcscope.el.  No added functionality, but integrates the
interfaces.
See the function `cedet-xcscope-search' for more details.")

(defmethod semantic-symref-perform-search ((tool semantic-symref-tool-xcscope))
  "Perform a search with GNU Global."
  (let* ((rootproj (when (and (featurep 'ede) ede-minor-mode)
                     (ede-toplevel)))
         (default-directory (if rootproj
                                (ede-project-root-directory rootproj)
                              default-directory)))
    ;; CScope has to be run from the project root where
    ;; cscope.out is.
    (cedet-xcscope-search (oref tool :searchfor)
                          (oref tool :searchtype)
                          (oref tool :resulttype)
                          (oref tool :searchscope)
                          )))


(defun cedet-xcscope-search (searchtext texttype type scope)
  "Perform a search with CScope, return the created buffer.
SEARCHTEXT is text to find.
TEXTTYPE is the type of text, such as 'regexp, 'string, 'tagname,
'tagregexp, or 'tagcompletions.
TYPE is the type of search, meaning that SEARCHTEXT is compared to
filename, tagname (tags table), references (uses of a tag) , or
symbol (uses of something not in the tag table.)
SCOPE is the scope of the search, such as 'project or 'subdirs."
  ;; CScope is an interactive program.  It uses number flags
  ;; in order to perform command line searches.  Useful for this
  ;; tool are:
  ;;
  ;; -0 = Find C symbol
  ;; -1 = Find global definition
  ;; -3 = Find references
  ;; -6 = Find egrep pattern
  ;; -7 = Find file
  (cond ((eq type 'file)
         (cscope-find-this-file searchtext))
        ;; Non files are symbols and such
        ((eq texttype 'tagname)
         (cscope-find-global-definition searchtext))
        ((eq texttype 'tagregexp)
         (cscope-find-this-symbol searchtext))
        ((eq texttype 'tagcompletions)
         (cscope-find-global-definition (concat "^" searchtext ".*")))
        ((eq texttype 'regexp)
         (cscope-find-egrep-pattern searchtext))
        (t
         (cscope-find-this-symbol searchtext)))
  'processing-complete-p)
