;; -*- mode: emacs-lisp; coding: utf-8 -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(minibuffer-history-search-history find-tag-history igrep-regex-history dpj-topic-history function-history variable-history hyper-apropos-regexp-history Manual-page-minibuffer-history bubba command-history query-replace-history buffer-history file-name-history read-expression-history dp-grep-history minibuffer-history read-command-history))
(setq find-tag-history '("add_con" "_xhash_node_get" "xhash_getx" "xhash_get"))
(setq igrep-regex-history '("pycon_verbose" "" "hostname" "readline" "emacs" "PATH_MAX" "ssh" "pthread" "pthread *.[ch]*" "agent.conf" "-I"))
(setq dpj-topic-history '("intel.ftci"))
(setq variable-history '("dp-wants-ansi-color-p" "dp-use-saveconf-p" "ispell-personal-dictionary"))
(setq hyper-apropos-regexp-history '("ansi" "window-co" "spec-macs" "specmacs" "locale"))
(setq Manual-page-minibuffer-history '("fvwm" "ul" "errno" "" "err" "limits" "PATH_MAX" "ssh" "yum" "rpm"))
(setq query-replace-history '("svn_op" "commit_op" "-" " " "exit_gui" "emit_and_exit" "chele.fx.intel.com" "localhost" "10.230.25.5" "10.253.55.5" "grape01" "nhclem01.nh.intel.com" "nhclem01_ip" "nhclem01.nh" "chele.fx" "nh" "hh" "nhclem01.hh" "dp\\1" "\\(ca0\\|sa0\\|con0\\)" "dp\\\\1" "\\\\(ca0\\\\|sa0\\\\|con0\\\\)" "con0" "ca0" "intel" "vanu"))
(setq buffer-history '("pyca.py" "*shell*<1>" "pyagent.py" "ipy_user_conf.py" "ipythonrc" "DOTipython" "IPython.d" "*shell*<2>" "jabber-tunnel-chele" "func" "host_info.py" "config" "config<2>" "*cscope*" "psa.cpp" "foad" "psa-con.cfg.grape01" "pycon.py" "client" ".bashrc" "*igrep*" "concierge.h" "agent.conf" "runsa" "*shell*<0>" "psa-con.cfg" "README" "db-update.sh" "pyca" "sm.xml<3>" "sm.xml<2>" "Makefile.non-am.mak" "sm.xml" "services" "custom.el" "env" "dpmisc.el"))
(setq file-name-history '("/home/dapanarx/work/ftci/poc/.git/config" "~/.gitconfig" "~/davep/exp/dp/.git/config" "/home/dapanarx/bin/svn-stat-immediate-subdirs" "/home/dapanarx/bin/svn-commit-immediate-subdirs" "~/work/ftci/poc/pyagents/pycag.py" "~/.fvwm/.fvwm2rc" "/home/dapanarx/bin/jabber-tunnel-chele" "/home/dapanarx/work/ftci/poc/pyagents/pyca.py" "~/work/ftci/poc/pyagents/pyca.py" "~/work/ftci/poc/pyagents/pyagent.py" "~/bin/svn-op-immediate-subdirs" "~/.rc" "~/OEM/DOTipython/" "/cm/images/default-image/usr/lib64/python2.6/lib2to3/fixes/fix_xreadlines.py" "~/OEM/DOTipython/ipy_user_conf.py" "~/.fvwm" "~/.rc/IPython.d" "~/OEM/DOTipython" "~/.rc/IPython.d/" "/home/dapanarx/lisp/dp-dot-emacs.grape01.el" "~/work/ftci/poc/client/agent.conf" "~/work/ftci/poc/client/psa-con.cfg.grape01" "/home/dapanarx/lisp/dp-keys.el" "~/.fvwm/" "/home/dapanarx/work/ftci/poc/pyagents/selection_list.py" "/home/dapanarx/.rc/func" "/home/dapanarx/.rc/alias" "~/.rc/func" "~/bin/eman" "~/bin/kman" "~/bin/hpman" "~/lisp/q" "/home/dapanarx/lisp/dp-vars.el" "~/lisp/custom.intel.el" "/home/dapanarx/lisp/dp-shells-dev.el" "wwi" "~/tmp/junk" "~/lisp/dp-dot-emacs.grape01.el" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/etc/X11/fontpath.d/" "/etc/X11/" "/usr/share/X11/fonts/misc" "/usr/share/fonts/default/Type1" "/home/dapanarx/.gitconfig" "/[10.230.25.5]/home/dapanarx/work/ftci/poc/.git/config" "[10.230.25.5]/home/dapanarx/work/ftci/poc/.git/config" "/home/dapanarx/yokel/bin/findprog" "~/work/ftci/poc/client/psa-con.cfg" "/home/dapanarx/work/ftci/poc/client/psa.cpp" "~/lisp/dp-dot-emacs.intel.el" "~/lisp/dp-dot-emacs.chele.el" "/home/dapanarx/lisp/" "~/work/ftci/poc/client/psa.cpp" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" "/etc/hosts" "~/work/ftci/poc/pyagents/pycon.py" "~/.twmrc" "/etc/X11/twm/system.twmrc" "/[10.230.25.5].gitexcludes" "/home/dapanarx/.gitexcludes" "~/work/ftci/poc/client/psa-con.cfg.chele" "~/work/ftci/poc/client" "~/work/ftci/poc/client/defs.h" "/usr/include/limits.h" "/home/dapanarx/work/ftci/poc/client/psa.c" "/[10.230.25.5].bashrc" "~/.go.vanu" "[10.230.25.5]bashrc" "~/.go.home" "/home/dapanarx/work/ftci/poc/client/ftci_client.cpp" "/home/dapanarx/work/ftci/alien/include/gloox/clientbase.h" "/home/dapanarx/work/ftci/poc/client/concierge.h" "~/work/ftci/poc/client/message-handler.h" "~/work/ftci/poc/client/psa.h" "~/work/ftci/poc/client/runsa" "/home/dapanarx/work/ftci/poc/client/agent.conf" "~/work/ftci/poc/server/db-update.sh" "~/work/ftci/poc/server/README" "~/tmp/sm.xml.merge-with-chele" "~/work/ftci/alien/etc/sm.xml" "~/work/ftci/alien/build/jabberd-2.2.14/make.stdout" "~/work/ftci/alien/etc/sm.xml-merge-with-chele" "~/inb/sm.xml-from-chele" "~/work/ftci/alien/build/jabberd-2.2.14/" "~/work/ftci/alien/etc/init" "/home/dapanarx/bin/extagtree" "~/work/ftci/alien/build/jabberd-2.2.14/c2s/c2s.c" "/home/dapanarx/work/ftci/poc/client/" "/root/.bashrc" "~/.rc/bashrc" "/tmp/sm.xml" "/usr/local/etc/sm.xml" "~/inb" "/home/dapanarx/work/ftci/poc/pyagents/pyagent.py" "~/work/ftci/poc/client/Makefile" "~/work/ftci/poc/Mk" "~/work/ftci/poc/Mk/" "~/work/ftci/poc/client/Makefile.non-am.mak" "/usr/lib/python2.6/site-packages/sleekxmpp-1.0rc3-py2.6.egg/"))
(setq read-expression-history '("(featurep 'dp-dot-emacs.intel)" "(feature-p 'dp-dot-emacs.intel)" "(dp-specific-extensions)" "(check-ispell-version)"))
(setq dp-grep-history '("egrep -n -e 'dp-wants-ansi-color-p' " "egrep -n -e 'dp-maybe-add-ansi-color' " "egrep -n -e 'wwi'" "egrep -n -e 'spell'"))
(setq minibuffer-history '("xx" "dp-line-boundaries" "" "dp-parenthesize-region" "dp-start-server" "dp-laptop-rc" "dp-start-server" "xem" "m_peer_ip" "peer_ip" "perr_ip" "add_con" "67" "66" "64" "foad" "dhr" "xhash_put" "ec" "dp-load-spec-macs" "ispell-init-process" "ispell-init-process" "ispell-start-process" "ff" "kill-buffer"))
(setq read-command-history '("reps" "hi" "rcc" "sp" "ispell-buffer" "repsq" "ff" "igrep" "shit" "xxx" "manual-entry" "dp-abbrevs" "2w" "window-configuration-to-register" "dp-move-too-long-comment-above-current-line" "untabify" "lgrep" "mb" "wwi" "set-default-font" "sb" "ediff-buffers" "make" "sfh" "yank" "rename-buffer" "dsed" "dset" "dse" "io" "dp-kill-dired-buffers" "dj" "ediff-merge-files" "ds" "dhr" "sbd" "eval-buffer" "cx" "dp-start-editing-server" "replace-regexp" "byte-compile-and-load-file" "fv" "ispell-region"))
(setq Manual-page-minibuffer-history '("fvwm" "ul" "errno" "" "err" "limits" "PATH_MAX" "ssh" "yum" "rpm"))
(setq dired-history 'nil)
(setq dired-regexp-history 'nil)
(setq dp-colorize-bracketing-regexps-history 'nil)
(setq dp-gdb-sudo-history 'nil)
(setq dp-grep-history '("egrep -n -e 'dp-wants-ansi-color-p' " "egrep -n -e 'dp-maybe-add-ansi-color' " "egrep -n -e 'wwi'" "egrep -n -e 'spell'"))
(setq dpj-topic-history '("intel.ftci"))
(setq file-name-history '("/home/dapanarx/work/ftci/poc/.git/config" "~/.gitconfig" "~/davep/exp/dp/.git/config" "/home/dapanarx/bin/svn-stat-immediate-subdirs" "/home/dapanarx/bin/svn-commit-immediate-subdirs" "~/work/ftci/poc/pyagents/pycag.py" "~/.fvwm/.fvwm2rc" "/home/dapanarx/bin/jabber-tunnel-chele" "/home/dapanarx/work/ftci/poc/pyagents/pyca.py" "~/work/ftci/poc/pyagents/pyca.py" "~/work/ftci/poc/pyagents/pyagent.py" "~/bin/svn-op-immediate-subdirs" "~/.rc" "~/OEM/DOTipython/" "/cm/images/default-image/usr/lib64/python2.6/lib2to3/fixes/fix_xreadlines.py" "~/OEM/DOTipython/ipy_user_conf.py" "~/.fvwm" "~/.rc/IPython.d" "~/OEM/DOTipython" "~/.rc/IPython.d/" "/home/dapanarx/lisp/dp-dot-emacs.grape01.el" "~/work/ftci/poc/client/agent.conf" "~/work/ftci/poc/client/psa-con.cfg.grape01" "/home/dapanarx/lisp/dp-keys.el" "~/.fvwm/" "/home/dapanarx/work/ftci/poc/pyagents/selection_list.py" "/home/dapanarx/.rc/func" "/home/dapanarx/.rc/alias" "~/.rc/func" "~/bin/eman" "~/bin/kman" "~/bin/hpman" "~/lisp/q" "/home/dapanarx/lisp/dp-vars.el" "~/lisp/custom.intel.el" "/home/dapanarx/lisp/dp-shells-dev.el" "wwi" "~/tmp/junk" "~/lisp/dp-dot-emacs.grape01.el" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/etc/X11/fontpath.d/" "/etc/X11/" "/usr/share/X11/fonts/misc" "/usr/share/fonts/default/Type1" "/home/dapanarx/.gitconfig" "/[10.230.25.5]/home/dapanarx/work/ftci/poc/.git/config" "[10.230.25.5]/home/dapanarx/work/ftci/poc/.git/config" "/home/dapanarx/yokel/bin/findprog" "~/work/ftci/poc/client/psa-con.cfg" "/home/dapanarx/work/ftci/poc/client/psa.cpp" "~/lisp/dp-dot-emacs.intel.el" "~/lisp/dp-dot-emacs.chele.el" "/home/dapanarx/lisp/" "~/work/ftci/poc/client/psa.cpp" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" "/etc/hosts" "~/work/ftci/poc/pyagents/pycon.py" "~/.twmrc" "/etc/X11/twm/system.twmrc" "/[10.230.25.5].gitexcludes" "/home/dapanarx/.gitexcludes" "~/work/ftci/poc/client/psa-con.cfg.chele" "~/work/ftci/poc/client" "~/work/ftci/poc/client/defs.h" "/usr/include/limits.h" "/home/dapanarx/work/ftci/poc/client/psa.c" "/[10.230.25.5].bashrc" "~/.go.vanu" "[10.230.25.5]bashrc" "~/.go.home" "/home/dapanarx/work/ftci/poc/client/ftci_client.cpp" "/home/dapanarx/work/ftci/alien/include/gloox/clientbase.h" "/home/dapanarx/work/ftci/poc/client/concierge.h" "~/work/ftci/poc/client/message-handler.h" "~/work/ftci/poc/client/psa.h" "~/work/ftci/poc/client/runsa" "/home/dapanarx/work/ftci/poc/client/agent.conf" "~/work/ftci/poc/server/db-update.sh" "~/work/ftci/poc/server/README" "~/tmp/sm.xml.merge-with-chele" "~/work/ftci/alien/etc/sm.xml" "~/work/ftci/alien/build/jabberd-2.2.14/make.stdout" "~/work/ftci/alien/etc/sm.xml-merge-with-chele" "~/inb/sm.xml-from-chele" "~/work/ftci/alien/build/jabberd-2.2.14/" "~/work/ftci/alien/etc/init" "/home/dapanarx/bin/extagtree" "~/work/ftci/alien/build/jabberd-2.2.14/c2s/c2s.c" "/home/dapanarx/work/ftci/poc/client/" "/root/.bashrc" "~/.rc/bashrc" "/tmp/sm.xml" "/usr/local/etc/sm.xml" "~/inb" "/home/dapanarx/work/ftci/poc/pyagents/pyagent.py" "~/work/ftci/poc/client/Makefile" "~/work/ftci/poc/Mk" "~/work/ftci/poc/Mk/" "~/work/ftci/poc/client/Makefile.non-am.mak" "/usr/lib/python2.6/site-packages/sleekxmpp-1.0rc3-py2.6.egg/" "/home/dapanarx/work/ftci/alien/etc/c2s.xml" "~/inb/sm.xml" "/home/dapanarx/work/ftci/alien/etc/sm.xml" "/home/dapanarx/lisp/custom.el" "/etc/shorewall/rules" "/etc/services" "~/.rc/env" "~/work/ftci/poc/server/db-update.sh-HIDE" "/home/dapanarx/work/ftci/poc/server/README" "~/lisp/dpmisc.el" "~/yokel/share/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el" "~/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/" "/home/dapanarx/lisp/dpmisc.el" "/home/dapanarx/lisp/dpmacs.el" "/home/dapanarx/lisp/dp-dot-emacs.chele.el" "~/etc/pydb/host_info.py" "~/.rc/env.chele" "~/.rc/env.intel"))
(setq grep-all-files-history 'nil)
(setq grep-find-history 'nil)
(setq hyper-apropos-face-history 'nil)
(setq hyper-apropos-help-history '(dp-maybe-add-ansi-color))
(setq hyper-apropos-regexp-history '("ansi" "window-co" "spec-macs" "specmacs" "locale"))
(setq igrep-files-history '("*.py" "*" "*/*" "*.h" "*.[ch]*"))
(setq igrep-regex-history '("pycon_verbose" "" "hostname" "readline" "emacs" "PATH_MAX" "ssh" "pthread" "pthread *.[ch]*" "agent.conf" "-I"))
(setq mmm-interactive-history 'nil)
(setq read-envvar-name-history 'nil)
(setq set-variable-value-history 'nil)
(setq setenv-history 'nil)
(setq svn-status-directory-history 'nil)
(setq ssh-history 'nil)
(setq kill-ring '("[branch \"master\"]
	remote = origin
	merge = refs/heads/master
" "[remote \"lisp\"]
	url = dapanarx@nhclem01.nh.intel.com:~dapanarx/davep/dp-world-git-root/dp.lisp.git
	fetch = +refs/heads/*:refs/remotes/lisp/*
" "dapanarx@nhclem01.nh.intel.com:~dapanarx/davep/dp-world-git-root/dp.git" "~dapanarx/davep/dp-world-git/dp.git" "#!/bin/sh

. script-x

: ${commit_msg=\"Misc.\"}

commit_msg_option=
vsetp $commit_msg && {
    commit_msg_option=\"-m $commit_msg\"
}

commit_op()
{
    echo \"Committing files in >$PWD<\"
    svn commit $commit_msg_option.
}
export -f commit_op

svn-op-immediate-subdirs commit_op \"$@\"
" "        self.title(\"refreshing app list\")
" "        self.title(\"...\")
" "xx -g47x3 -F black -B green -- ssh -N -L 5222:localhost:5222 10.230.25.5" "FuncFvwmResizeOrLower" "DestroyFunc FuncFvwmResizeOrRaise
AddToFunc FuncFvwmResizeOrRaise
+ I Raise
+ M Resize
+ D Lower
" "xx -g47x3 -F black -B green -- ssh -N -L 5222:localhost:5222 10.230.25.5" "#!/bin/sh

source script-x
source eexec
set -x
RUNNIT=\"really run the tunnel this time\"
EExecVerbose
if [ \"$1\" = \"$RUNNIT\" ]
then
    echo Creating a jabber tunnel to chele
    EExec ssh -N -L 5222:localhost:5222 10.230.25.5
else
    EExec xx -g47x3 -F black -B green $0 \"$RUNNIT\"
fi
" "echo Creating a jabber tunnel to chele
" "ssh -N -L 5222:localhost:5222 10.230.25.5" "\"really run the tunnel this time\"" "git tag -a -m 'Can run CA on woes box' windwoes-working0" "-        self.buttonbar.pack(side=TOP, fill=X, expand=FALSE)
" "exit_gui_event" "	self.run_selected_button = self.add_buttonbar_button(
            \"Run Selected\", self.refresh_app_list)
" "self.add_buttonbar_button(\"Get App List\",
                                                        self.refresh_app_list)" "Button(bb, text=\"Get App list\",
                                     command=self.refresh_app_list)
        self.refresh_button.pack(side=LEFT, expand=TRUE)" "	self.run_selected_button = Button(bb, text=\"Run Selected\",
                                    command=self.run_selections)
        self.run_selected_button.pack(side=LEFT, expand=TRUE)
        self.buttonbar.pack(side=TOP, fill=X, expand=FALSE)
" "run_selected_button" "choice.split()" "sa@runmespeedy.com" "            self.list_apps()
" "            import pycag
            pycag.run(agent)
" "from pyagent import *
" "            agent.emit(\"Entering command loop.\\n\\n\")
            while True:
                os = sys.stdout
                agent.emit(\"Enter command> \")
                command = sys.stdin.readline()
                command = command[:-1]
                agent.emit(\"command>%s<\\n\", command)
                if command == \"\":
                    continue
                argv = command.split()
                cmd = argv[0]
                if cmd in \"qQxX\":
                    break
                if cmd == \"echo\":
                    echo_msg(agent, Con_JID, *argv[1:])
                elif cmd == \"echosa\":
                    echo_msg(agent, agent.d_agents[0], *argv[1:])
                elif cmd == \"get\":
                    agent.fetch_app_list()
                elif cmd == \"run\":
                    app_list = agent.app_list()
                    print \"app_list:\", app_list
                    selections = selection_list.get_selection(app_list)
                    agent.run_applications(selections)
                else:
                    agent.emit(\"Unsupported command>%s<\\n\", cmd)
" "              echo \"Committing files in >$d<\"
" "\"${@-*}\"" "for d in *
do
  echo === $d ===
  if [ -d \"$d/.svn\" ]
  then 
      (
          echo \"Committing files in >$d<\"
          cd $d
          svn commit $commit_msg_option.
      )
  else
      echo \"$d: not under svn\"
  fi
done 
" " 		svn commit $commit_msg_option.
" "#!/bin/sh

: ${commit_msg=\"Misc.\"}

commit_msg_option=
vsetp $commit_msg && {
    commit_msg_option=\"-m $commit_msg\"
}

for d in *
do
	echo === $d ===
	if [ -d \"$d/.svn\" ]
 	then 
            (
		echo \"Committing files in >$d<\"
		cd $d
 		svn commit $commit_msg_option.
            )
 	else 
		echo \"$d: not under svn\"
 	fi
done 
echo \"Done.\"
" "def import_all(mod_list):
    \"\"\" Usage: import_these(\"mod\"[, \"mod\"...]) \"\"\"
    for m in mod_list:
        ip.ex(\"from %s import *\" % m)
" "    \"\"\" Usage: import_all(\"os sys\") \"\"\"
" "modules.split():" "    for m in modules.split():
        ip.ex(\"from %s import *\" % m)
" "
# (ii) readline_remove_delims: a string of characters to be removed from the
# default word-delimiters list used by readline, so that completions may be
# performed on strings which contain them.

readline_remove_delims '\"-/~

#\"' -- just to fix emacs coloring which gets confused by unmatched quotes.

# (iii) readline_merge_completions: whether to merge the result of all
# possible completions or not.  If true, IPython will complete filenames,
# python names and aliases and return all possible completions.  If you set it
# to false, each completer is used at a time, and only if it doesn't return
# any completions is the next one used.

# The default order is: [python_matches, file_matches, alias_matches]

readline_merge_completions 1
" "import IPython.rlineimpl as readline" "# Bindings for incremental searches in the history. These searches use the
# string typed so far on the command line and search anything in the previous
# input history containing them.
" "# Bindings for completing the current line in the history of previous
# commands. This allows you to recall any previous command by typing its first
# few letters and hitting Control-p, bypassing all intermediate commands which
# may be in the history (much faster than hitting up-arrow 50 times!)
readline_parse_and_bind \"\\C-p\": history-search-backward
readline_parse_and_bind \"\\C-n\": history-search-forward
" "readline_parse_and_bind \"\\C-r\": reverse-search-history
readline_parse_and_bind \"\\C-s\": forward-search-history
" "# This forces readline to automatically print the above list when tab
# completion is set to 'complete'. You can still get this list manually by
# using the key bound to 'possible-completions' (Control-l by default) or by
# hitting TAB twice. Turning this on makes the printing happen at the first
# TAB.
" "# If you have TAB set to complete names, you can rebind any key (Control-o by
# default) to insert a true TAB character.
" "# These commands allow you to indent/unindent easily, with the 4-space
# convention of the Python coding standards.  Since IPython's internal
# auto-indent system also uses 4 spaces, you should not change the number of
# spaces in the code below.
readline_parse_and_bind \"\\M-i\": \"    \"
readline_parse_and_bind \"\\M-o\": \"\\d\\d\\d\\d\"
readline_parse_and_bind \"\\M-I\": \"\\d\\d\\d\\d\"
" "\"\\C-o\": tab-insert" "readline_parse_and_bind \"\\C-o\": tab-insert
" "show-all-if-ambiguous on" "readline_parse_and_bind set show-all-if-ambiguous on
" "FuncFvwmMoveOrRaise" "    readline.parse_and_bind(\"\\C-l: possible-completions\")
" "readline_parse_and_bind \"\\C-l\": possible-completions
" "readline_parse_and_bind tab: complete
" "\"\"\" User configuration file for IPython

This is a more flexible and safe way to configure ipython than *rc files
(ipythonrc, ipythonrc-pysh etc.)

This file is always imported on ipython startup. You can import the
ipython extensions you need here (see IPython/Extensions directory).

Feel free to edit this file to customize your ipython experience.

Note that as such this file does nothing, for backwards compatibility.
Consult e.g. file 'ipy_profile_sh.py' for an example of the things 
you can do here.

See http://ipython.scipy.org/moin/IpythonExtensionApi for detailed
description on what you could do here.
\"\"\"

# Most of your config files and extensions will probably start with this import

import IPython.ipapi
ip = IPython.ipapi.get()

# You probably want to uncomment this if you did %upgrade -nolegacy
# import ipy_defaults    

import os   

def main():   

    # uncomment if you want to get ipython -p sh behaviour
    # without having to use command line switches  
    # import ipy_profile_sh

    # Configure your favourite editor?
    # Good idea e.g. for %edit os.path.isfile

    #import ipy_editors
    
    # Choose one of these:
    
    #ipy_editors.scite()
    #ipy_editors.scite('c:/opt/scite/scite.exe')
    #ipy_editors.komodo()
    #ipy_editors.idle()
    # ... or many others, try 'ipy_editors??' after import to see them
    
    # Or roll your own:
    #ipy_editors.install_editor(\"c:/opt/jed +$line $file\")
    
    
    o = ip.options
    # An example on how to set options
    #o.autocall = 1
    o.system_verbose = 0
    
    #import_all(\"os sys\")
    #execf('~/_ipython/ns.py')


    # -- prompt
    # A different, more compact set of prompts from the default ones, that
    # always show your current location in the filesystem:

    #o.prompt_in1 = r'\\C_LightBlue[\\C_LightCyan\\Y2\\C_LightBlue]\\C_Normal\\n\\C_Green|\\#>'
    #o.prompt_in2 = r'.\\D: '
    #o.prompt_out = r'[\\#] '
    
    # Try one of these color settings if you can't read the text easily
    # autoexec is a list of IPython commands to execute on startup
    #o.autoexec.append('%colors LightBG')
    #o.autoexec.append('%colors NoColor')
    #o.autoexec.append('%colors Linux')
    
    # for sane integer division that converts to float (1/2 == 0.5)
    #o.autoexec.append('from __future__ import division')
    
    # For %tasks and %kill
    #import jobctrl 
    
    # For autoreloading of modules (%autoreload, %aimport)    
    #import ipy_autoreload
    
    # For winpdb support (%wdb)
    #import ipy_winpdb
    
    # For bzr completer, requires bzrlib (the python installation of bzr)
    #ip.load('ipy_bzr')
    
    # Tab completer that is not quite so picky (i.e. 
    # \"foo\".<TAB> and str(2).<TAB> will work). Complete 
    # at your own risk!
    #import ipy_greedycompleter
    
    # If you are on Linux, you may be annoyed by
    # \"Display all N possibilities? (y or n)\" on tab completion,
    # as well as the paging through \"more\". Uncomment the following
    # lines to disable that behaviour
    #import readline
    #readline.parse_and_bind('set completion-query-items 1000')
    #readline.parse_and_bind('set page-completions no')


# some config helper functions you can use 
def import_all(modules):
    \"\"\" Usage: import_all(\"os sys\") \"\"\" 
    for m in modules.split():
        ip.ex(\"from %s import *\" % m)

def execf(fname):
    \"\"\" Execute a file in user namespace \"\"\"
    ip.ex('execfile(\"%s\")' % os.path.expanduser(fname))

main()
" "#Mouse 0 2       A       FuncFvwmMaximize
#Mouse 0 4       A       Iconify
" "Mouse 0 2       A       Close
Mouse 0 4       A       FuncFvwmMaximize
Mouse 0 6       A       Iconify
" "Close" "FuncFvwmMoveOrRaise" "Mouse 1 W       A       Raise
" "Mouse 3 TSIF    A       RaiseLower
" "Mouse 3 TSIF    A       RaiseLower
" "; the mode line and scroll bars look like a t." "                          [?^] 'dp-1-over-2-wins
" "inside_emacs_p" "SSEEEE AALLSSOO" "git config remote.origin.push HEAD" "(set-default-font \"-*-Nimbus Mono L-medium-r-*-*-*-110-*-*-*-*-*-*\")" "(set-default-font \"-*-Nimbus Mono L-medium-r-*-*-*-120-*-*-*-*-*-*\")
" "-*-Nimbus Mono L-medium-r-*-*-*-120-*-*-*-*-*-*" "-*-Nimbus Mono L-medium-r-*-*-*-120-*-*-*-*-*-*" "-urw-nimbus mono l-bold-o-normal--0-0-0-0-p-0-iso8859-1" "/usr/share/fonts/" "/usr/share/fonts/default/ghostscript" "default-ghostscript -> /usr/share/fonts/default/ghostscript
  lrwxrwxrwx 1 root root   30 Oct 28 14:58 fonts-default -> /usr/share/fonts/default/Type1
  lrwxrwxrwx 1 root root   26 Oct 28 15:00 xorg-x11-fonts-75dpi:unscaled:pri=20 -> /usr/share/X11/fonts/75dpi
  lrwxrwxrwx 1 root root   25 Oct 28 15:00 xorg-x11-fonts-misc:unscaled:pri=10 -> /usr/share/X11/fonts/misc
  lrwxrwxrwx 1 root root   26 Oct 28 15:00 xorg-x11-fonts-Type1 -> /usr/share/X11/fonts/Type1
" "\"-*-Bitstream Vera Sans Mono-medium-r-*-*-*-100-*-*-*-*-*-*\"" "    \"xem_font\": \"-*-Bitstream Vera Sans Mono-medium-r-*-*-*-100-*-*-*-*-*-*\",
" "    \"xem_font\": \"-*-Bitstream Vera Sans Mono-medium-r-*-*-*-100-*-*-*-*-*-*\",
" "MAIN_MACS_OPTS'-eval (dp-main-rc)'," "main_macs_opts" "main_macs_opts" "dp-main-rc" "dp-main-rc" "dp-start-editing-server" "    'xem_opts': '-eval (2w) -geometry  81x69-1+0',
" "[branch \"dp-stable\"]
	remote = origin
	merge = refs/heads/dp-stable
[user]
	email = dapanarx@intel.com
" "[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true

[remote \"origin\"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	url = git@gitorious.tl.intel.com:ftci/poc.git

[branch \"master\"]
	remote = origin
	merge = refs/heads/master

[remote \"e2e\"]
	fetch = +refs/heads/*:refs/remotes/e2e/*
	url = git@gitorious.tl.intel.com:ftci/poc.git

[branch \"endtoend\"]
	remote = e2e
	merge = refs/heads/endtoend

[branch \"dp-dev\"]
        remote = origin
        merge = dp-dev
" "(provide 'dp-dot-emacs.grape01.el))
" ";; For some reason, putty is getting/generating and passing on garbage
;; input. For XEmacs in a VNC session tunneled to by putty, the result is a
;; spurious f15. So, to make the bell STFU, I'll grab it and do nada.
(global-set-key [f15] (kb-lambda ()))
;; The keys can come at any time, say between the time I press Alt and ?w.
;; so...

(defun dp-putty-f15-bullshit ()
  (interactive)
  ;;(dmessage \"?saved the day?\")          ; Yes, quite often
  ;; Prevent it fucking up a selection.
  (dp-set-zmacs-region-stays t))
;; Prevent it fucking up an isearch
(put 'dp-putty-f15-bullshit 'isearch-command t)

(global-set-key [f15] 'dp-putty-f15-bullshit)
(global-set-key [(meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control meta f15)] 'dp-putty-f15-bullshit)

(defconst intel-c-style
  '((c-tab-always-indent           . t)
    (c-basic-offset                . 4)
    (c-comment-only-line-offset    . 0)
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi
				      list-close-comma
                                      brace-else-brace
                                      brace-elseif-brace
				      knr-open-brace)) ; my own addition
    (c-offsets-alist               . ((arglist-intro     . +)
				      (substatement-open . 0)
				      (inline-open       . 0)
				      (cpp-macro-cont    . +)
				      (access-label      . -)
                                      (inclass           . ++)
				      (case-label        . +)))
    (c-hanging-semi&comma-criteria dp-c-semi&comma-nada)
    (c-echo-syntactic-information-p . nil)
    (c-indent-comments-syntactically-p . t)
    (c-hanging-colons-alist         . ((member-init-intro . (before))))
    )
  \"Intel C/C++ Programming Style\")
(c-add-style \"intel-c-style\" intel-c-style)
(defvar dp-default-c-style-name \"intel-c-style\")
(defvar dp-default-c-style intel-c-style)

(defun dp-intel-c-style ()
  \"Set up C/C++ style.\"
  (interactive)
  (c-add-style \"intel-c-style\" intel-c-style t))

;; For some reason, vc isn't being autoloaded here, but it is @ home.
(vc-load-vc-hooks)  ; This is being added to the Tools->Version Control menu.
" "" "(defun dp-putty-f15-bullshit ()
  (interactive)
  ;;(dmessage \"?saved the day?\")          ; Yes, quite often
  ;; Prevent it fucking up a selection.
  (dp-set-zmacs-region-stays t))
;; Prevent it fucking up an isearch
(put 'dp-putty-f15-bullshit 'isearch-command t)

(global-set-key [f15] 'dp-putty-f15-bullshit)
(global-set-key [(meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control meta f15)] 'dp-putty-f15-bullshit)

(defconst intel-c-style
  '((c-tab-always-indent           . t)
    (c-basic-offset                . 4)
    (c-comment-only-line-offset    . 0)
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi
				      list-close-comma
                                      brace-else-brace
                                      brace-elseif-brace
				      knr-open-brace)) ; my own addition
    (c-offsets-alist               . ((arglist-intro     . +)
				      (substatement-open . 0)
				      (inline-open       . 0)
				      (cpp-macro-cont    . +)
				      (access-label      . -)
                                      (inclass           . ++)
				      (case-label        . +)))
    (c-hanging-semi&comma-criteria dp-c-semi&comma-nada)
    (c-echo-syntactic-information-p . nil)
    (c-indent-comments-syntactically-p . t)
    (c-hanging-colons-alist         . ((member-init-intro . (before))))
    )
  \"Intel C/C++ Programming Style\")
(c-add-style \"intel-c-style\" intel-c-style)
(defvar dp-default-c-style-name \"intel-c-style\")
(defvar dp-default-c-style intel-c-style)

(defun dp-intel-c-style ()
  \"Set up C/C++ style.\"
  (interactive)
  (c-add-style \"intel-c-style\" intel-c-style t))

;; For some reason, vc isn't being autoloaded here, but it is @ home.
(vc-load-vc-hooks)  ; This is being added to the Tools->Version Control menu.
" "(defun dp-putty-f15-bullshit ()
  (interactive)
  ;;(dmessage \"?saved the day?\")          ; Yes, quite often
  ;; Prevent it fucking up a selection.
  (dp-set-zmacs-region-stays t))
;; Prevent it fucking up an isearch
(put 'dp-putty-f15-bullshit 'isearch-command t)

(global-set-key [f15] 'dp-putty-f15-bullshit)
(global-set-key [(meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control meta f15)] 'dp-putty-f15-bullshit)

(defconst intel-c-style
  '((c-tab-always-indent           . t)
    (c-basic-offset                . 4)
    (c-comment-only-line-offset    . 0)
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi
				      list-close-comma
                                      brace-else-brace
                                      brace-elseif-brace
				      knr-open-brace)) ; my own addition
    (c-offsets-alist               . ((arglist-intro     . +)
				      (substatement-open . 0)
				      (inline-open       . 0)
				      (cpp-macro-cont    . +)
				      (access-label      . -)
                                      (inclass           . ++)
				      (case-label        . +)))
    (c-hanging-semi&comma-criteria dp-c-semi&comma-nada)
    (c-echo-syntactic-information-p . nil)
    (c-indent-comments-syntactically-p . t)
    (c-hanging-colons-alist         . ((member-init-intro . (before))))
    )
  \"Intel C/C++ Programming Style\")
(c-add-style \"intel-c-style\" intel-c-style)
(defvar dp-default-c-style-name \"intel-c-style\")
(defvar dp-default-c-style intel-c-style)

(defun dp-intel-c-style ()
  \"Set up C/C++ style.\"
  (interactive)
  (c-add-style \"intel-c-style\" intel-c-style t))

;; For some reason, vc isn't being autoloaded here, but it is @ home.
(vc-load-vc-hooks)  ; This is being added to the Tools->Version Control menu.
" "(defun dp-putty-f15-bullshit ()
  (interactive)
  ;;(dmessage \"?saved the day?\")          ; Yes, quite often
  ;; Prevent it fucking up a selection.
  (dp-set-zmacs-region-stays t))
;; Prevent it fucking up an isearch
(put 'dp-putty-f15-bullshit 'isearch-command t)

(global-set-key [f15] 'dp-putty-f15-bullshit)
(global-set-key [(meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control meta f15)] 'dp-putty-f15-bullshit)

(defconst intel-c-style
  '((c-tab-always-indent           . t)
    (c-basic-offset                . 4)
    (c-comment-only-line-offset    . 0)
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi
				      list-close-comma
                                      brace-else-brace
                                      brace-elseif-brace
				      knr-open-brace)) ; my own addition
    (c-offsets-alist               . ((arglist-intro     . +)
				      (substatement-open . 0)
				      (inline-open       . 0)
				      (cpp-macro-cont    . +)
				      (access-label      . -)
                                      (inclass           . ++)
				      (case-label        . +)))
    (c-hanging-semi&comma-criteria dp-c-semi&comma-nada)
    (c-echo-syntactic-information-p . nil)
    (c-indent-comments-syntactically-p . t)
    (c-hanging-colons-alist         . ((member-init-intro . (before))))
    )
  \"Intel C/C++ Programming Style\")
(c-add-style \"intel-c-style\" intel-c-style)
(defvar dp-default-c-style-name \"intel-c-style\")
(defvar dp-default-c-style intel-c-style)

(defun dp-intel-c-style ()
  \"Set up C/C++ style.\"
  (interactive)
  (c-add-style \"intel-c-style\" intel-c-style t))

;; For some reason, vc isn't being autoloaded here, but it is @ home.
(vc-load-vc-hooks)  ; This is being added to the Tools->Version Control menu.
" "Find better font" "(defconst dp-sfh-height 72)
(defconst dp-2w-frame-width 166)
(setq visible-bell nil)
;; For some reason, putty is getting/generating and passing on garbage
;; input. For XEmacs in a VNC session tunneled to by putty, the result is a
;; spurious f15. So, to make the bell STFU, I'll grab it and do nada.
(global-set-key [f15] (kb-lambda ()))
;; The keys can come at any time, say between the time I press Alt and ?w.
;; so...

(defun dp-putty-f15-bullshit ()
  (interactive)
  ;;(dmessage \"?saved the day?\")          ; Yes, quite often
  ;; Prevent it fucking up a selection.
  (dp-set-zmacs-region-stays t))
;; Prevent it fucking up an isearch
(put 'dp-putty-f15-bullshit 'isearch-command t)

(global-set-key [f15] 'dp-putty-f15-bullshit)
(global-set-key [(meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(control meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift meta f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control f15)] 'dp-putty-f15-bullshit)
(global-set-key [(shift control meta f15)] 'dp-putty-f15-bullshit)

(defconst intel-c-style
  '((c-tab-always-indent           . t)
    (c-basic-offset                . 4)
    (c-comment-only-line-offset    . 0)
    (c-cleanup-list                . (scope-operator
				      empty-defun-braces
				      defun-close-semi
				      list-close-comma
                                      brace-else-brace
                                      brace-elseif-brace
				      knr-open-brace)) ; my own addition
    (c-offsets-alist               . ((arglist-intro     . +)
				      (substatement-open . 0)
				      (inline-open       . 0)
				      (cpp-macro-cont    . +)
				      (access-label      . -)
                                      (inclass           . ++)
				      (case-label        . +)))
    (c-hanging-semi&comma-criteria dp-c-semi&comma-nada)
    (c-echo-syntactic-information-p . nil)
    (c-indent-comments-syntactically-p . t)
    (c-hanging-colons-alist         . ((member-init-intro . (before))))
    )
  \"Intel C/C++ Programming Style\")
(c-add-style \"intel-c-style\" intel-c-style)
(defvar dp-default-c-style-name \"intel-c-style\")
(defvar dp-default-c-style intel-c-style)

(defun dp-intel-c-style ()
  \"Set up C/C++ style.\"
  (interactive)
  (c-add-style \"intel-c-style\" intel-c-style t))

;; For some reason, vc isn't being autoloaded here, but it is @ home.
(vc-load-vc-hooks)  ; This is being added to the Tools->Version Control menu.
" "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
" "
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" "1
" "1
" "#dpsa01@localhost/mesa,intel123,dpsa02@localhost/mecon,Local jabberd2 Server
" "    if xmpp.connect((\"127.0.0.1\", 5222)):
" "\"F3\"    =    : all        : f.warpring \"next\"
" "#
# $Xorg: system.twmrc,v 1.3 2000/08/17 19:54:08 cpqbld Exp $
# 
# Default twm configuration file; needs to be kept small to conserve string
# space in systems whose compilers don't handle medium-sized strings.
#
# Sites should tailor this file, providing any extra title buttons, menus, etc.
# that may be appropriate for their environment.  For example, if most of the
# users were accustomed to uwm, the defaults could be set up not to decorate
# any windows and to use meta-keys.
#
# $XFree86: xc/programs/twm/system.twmrc,v 1.4 2001/01/17 23:45:08 dawes Exp $
#

NoGrabServer
RestartPreviousState
DecorateTransients
TitleFont \"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*\"
ResizeFont \"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*\"
MenuFont \"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*\"
IconFont \"-adobe-helvetica-bold-r-normal--*-100-*-*-*-*-*-*\"
IconManagerFont \"-adobe-helvetica-bold-r-normal--*-100-*-*-*\"
#ClientBorderWidth

Color
{
    BorderColor \"slategrey\"
    DefaultBackground \"rgb:2/a/9\"
    DefaultForeground \"gray85\"
    TitleBackground \"rgb:2/a/9\"
    TitleForeground \"gray85\"
    MenuBackground \"rgb:2/a/9\"
    MenuForeground \"gray85\"
    MenuBorderColor \"slategrey\"
    MenuTitleBackground \"gray70\"
    MenuTitleForeground \"rgb:2/a/9\"
    IconBackground \"rgb:2/a/9\"
    IconForeground \"gray85\"
    IconBorderColor \"gray85\"
    IconManagerBackground \"rgb:2/a/9\"
    IconManagerForeground \"gray85\"
}

#
# Define some useful functions for motion-based actions.
#
MoveDelta 3
Function \"move-or-lower\" { f.move f.deltastop f.lower }
Function \"move-or-raise\" { f.move f.deltastop f.raise }
Function \"move-or-iconify\" { f.move f.deltastop f.iconify }

#
# Set some useful bindings.  Sort of uwm-ish, sort of simple-button-ish
#
Button1 = : root : f.menu \"defops\"

Button1 = m : window|icon : f.function \"move-or-lower\"
Button2 = m : window|icon : f.iconify
Button3 = m : window|icon : f.function \"move-or-raise\"

Button1 = : title : f.function \"move-or-raise\"
Button2 = : title : f.raiselower

Button1 = : icon : f.function \"move-or-iconify\"
Button2 = : icon : f.iconify

Button1 = : iconmgr : f.iconify
Button2 = : iconmgr : f.iconify

#
# And a menus with the usual things
#
menu \"defops\"
{
\"Twm\"	f.title
\"Iconify\"	f.iconify
\"Resize\"	f.resize
\"Move\"		f.move
\"Raise\"		f.raise
\"Lower\"		f.lower
\"\"		f.nop
\"Focus\"		f.focus
\"Unfocus\"	f.unfocus
\"Show Iconmgr\"	f.showiconmgr
\"Hide Iconmgr\"	f.hideiconmgr
\"\"		f.nop
\"Xterm\"		f.exec \"exec xterm &\"
\"\"		f.nop
\"Kill\"		f.destroy
\"Delete\"	f.delete
\"\"		f.nop
\"Restart\"	f.restart
\"Exit\"		f.quit
}
" "/home/dapanarx/.gitexcludes" "# sa_name                    ,sa_pass, [con]name                    ,descr
#
#dpsa@jabber.fx.intel.com/mesa,123456,dpcon@jabber.fx.intel.com/mecon,Local jabberd2 Server
#dpsa01@nhclem01.nh.intel.com/mesa,intel123,dpcon01@nhclem01.nh.intel.com/mecon,Local jabberd2 Server
#dpsa01@10.253.55.5/mesa,intel123,dpcon01@10.253.55.5/mecon,Local jabberd2 Server
#dpsa01@grape01.cm.cluster/mesa,intel123,dpcon01@grape01.cm.cluster/mecon,Local jabberd2 Server

# chele is: 10.230.25.5
#dpsa01@10.230.25.5/mesa,intel123,dpcon01@10.230.25.5/mecon,Local jabberd2 Server
# Let's try forwarding some ports...
dpsa01@localhost/mesa,intel123,dpsa02@localhost/mecon,Local jabberd2 Server
" "dpsa01@chele.fx.intel.com/mesa,intel123,dpsa02@chele.fx.intel.com/mecon,Local jabberd2 Server" "# sa_name                    ,sa_pass, [con]name                    ,descr
#
#dpsa@jabber.fx.intel.com/mesa,123456,dpcon@jabber.fx.intel.com/mecon,Local jabberd2 Server
#dpsa01@nhclem01.nh.intel.com/mesa,intel123,dpcon01@nhclem01.nh.intel.com/mecon,Local jabberd2 Server
#dpsa01@10.253.55.5/mesa,intel123,dpcon01@10.253.55.5/mecon,Local jabberd2 Server
#dpsa01@grape01.cm.cluster/mesa,intel123,dpcon01@grape01.cm.cluster/mecon,Local jabberd2 Server

# chele is: 10.230.25.5
#dpsa01@10.230.25.5/mesa,intel123,dpcon01@10.230.25.5/mecon,Local jabberd2 Server
# Let's try forwarding some ports...
dpsa01@localhost/mesa,intel123,dpsa02@localhost/mecon,Local jabberd2 Server
" "path_name.c_str()" "    FILE* config = open_config_file(PSA_CAP_CONFIG_FILE);
" "    std::string path_name = host_specific_path_name(PSA_CON_CONFIG_FILE);
    FILE *config = fopen(path_name.c_str(), \"r\");
    if (!config) {
        // try plain config
        config = fopen(PSA_CON_CONFIG_FILE, \"r\");
        if (!config) {
            char b[122];
            std::cerr << \"cwd: \" << getcwd(b, 100)
                      << \"tried \" << 
            
            err(2, \"Cannot open con config file\");
        }
    }
" "    std::string path_name = host_specific_path_name(PSA_CON_CONFIG_FILE);
    FILE *config = fopen(path_name.c_str(), \"r\");
    if (!config) {
        // try plain config
        config = fopen(PSA_CON_CONFIG_FILE, \"r\");
        if (!config) {
            char b[122];
            std::cerr << \"cwd: \" << getcwd(b, 100) << std::endl;
            err(2, \"Cannot open sa-con.cfg\");
        }
    }
" "std::string host_specific_path_name(path)
{
    const char* host_name = getenv(\"HOST\");
    const char* dot = host_name ? \".\" : \"\";
    host_name = host_name : host_name ? \"\";
    char path_name[PATH_MAX];
    sprintf(path_name, \"%s%s%s\", path, dot, host_name);
    return std::string(path_name);
}

" "    char path_name[PATH_MAX];
" "    const char* host_name = getenv(\"HOST\");
    const char* dot = host_name ? \".\" : \"\";
    host_name = host_name : host_name ? \"\";
    char path_name[PATH_MAX];
    sprintf(path_name, \"%s%s%s\", PSA_CON_CONFIG_FILE, dot, host_name);
" "#define PSA_CON_CONFIG_FILE \"../psa-con.cfg\"
" "PSA_CON_CONFIG_FILE" "\"../psa-con.cfg\"" "/[sentinels.vanu.com]/" "/[sentinels.vanu.com]/" "ssh -N -D 5222 10.230.25.5" "dpsa01@10.230.25.5/mesa,intel123,dpcon01@10.230.25.5/mecon,Local jabberd2 Server" "dpsa01@10.230.25.5/mesa,intel123,dpcon01@10.230.25.5/mecon,Local jabberd2 Server" "    : ${FTCI_SERVER:=chele.fx.intel.com}
" "use_localhost" "jabber_server" "\" + chele + \"" "ERROR    Could not connect to 10.253.55.5:5222. Socket Error #111: Connection refused" "ERROR    Could not connect to 10.253.55.5:5222. Socket Error #111: Connection refused
"))
(setq search-ring '("repository" "anno" "get_app" "title" "xlis" "amper" "funcfvwmresizeorlower" "lower" "geo" "text" "go_gui" "pycag" "emit_" "emit_and_exit" "return_selection" "get_selection" "return_selection" "(" "exit_button" "\"selec" "list_ap" "App_info_t" "run_applications" "nth_app" "app_list" "self.d_apps.items" "no-eol-punctuation-p" "ignore-eol-punctuation-p" "====" "<" "apps>" "got_registered" "fetch_app_list" "fetch_app_list_and_wait" "fetch_app_list" "grun" "cli(" "argv" "go_gui" "app_" "cli" "gui" " print" "ftci_payload_t(dict=m.groupdict())" " print" "verbose" "pycon_verbose" "hostname" "s)" "ssh" "\"os " "import_all" "import" "import_all" "(i)" "as r" "as " "\"" " " "_pa" "\"" " " "_pa" "\""))
(setq regexp-search-ring '("\\"))
(setq wconfig-names 'nil)
(setq dp-killed-file-states '(("/cm/images/default-image/usr/lib64/python2.6/lib2to3/fixes/fix_xreadlines.py" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/.fvwm/.fvwm2rc" . [cl-struct-dp-killed-file-state 2709]) ("/home/dapanarx/.fvwm/ConfigFvwmButtons" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/OEM/DOTipython/db/shadowhist_idx" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/OEM/DOTipython/__init__.py" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/DOTrc/IPython.d/ipythonrc" . [cl-struct-dp-killed-file-state 19640]) ("/home/dapanarx/OEM/DOTipython/ipy_user_conf.py" . [cl-struct-dp-killed-file-state 1429]) ("/home/dapanarx/davep/dp-world/DOTrc/IPython.d/ipy_profile_sh.py" . [cl-struct-dp-killed-file-state 4031]) ("/home/dapanarx/OEM/DOTipython/ipythonrc" . [cl-struct-dp-killed-file-state 72]) ("/home/dapanarx/davep/dp-world/bin/jabber-tunnel-chele" . [cl-struct-dp-killed-file-state 29]) ("/home/dapanarx/davep/dp-world/lisp/lisp/custom.intel.el" . [cl-struct-dp-killed-file-state 6406]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dp-shells-dev.el" . [cl-struct-dp-killed-file-state 31122]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dp-vars.el" . [cl-struct-dp-killed-file-state 13380]) ("/home/dapanarx/davep/dp-world/bin/hpman" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/DOTrc/alias" . [cl-struct-dp-killed-file-state 2382]) ("/home/dapanarx/davep/dp-world/bin/eman" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/bin/kman" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/lisp/lisp/q" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/.vnc/wwi" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dp-dot-emacs.grape01.el" . [cl-struct-dp-killed-file-state 27]) ("/usr/share/fonts/default/Type1/a010013l.afm" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/bin/xem" . [cl-struct-dp-killed-file-state 1776]) ("/home/dapanarx/davep/dp-world/yokel.bin/killprog" . [cl-struct-dp-killed-file-state 2106]) ("/home/dapanarx/.gitexcludes" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/poc/client/psa-con.cfg" . [cl-struct-dp-killed-file-state 670]) ("/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" . [cl-struct-dp-killed-file-state 78]) ("/home/dapanarx/work/ftci/poc/client/psa-con.cfg.chele" . [cl-struct-dp-killed-file-state 52]) ("/home/dapanarx/work/ftci/poc/client/defs.h" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/poc/client/psa.cpp" . [cl-struct-dp-killed-file-state 221]) ("/home/dapanarx/work/ftci/poc/client/psa.c" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/tilde/.go.vanu" . [cl-struct-dp-killed-file-state 17111]) ("/home/dapanarx/davep/tilde/.go.home" . [cl-struct-dp-killed-file-state 18187]) ("/etc/hosts" . [cl-struct-dp-killed-file-state 526]) ("/home/dapanarx/work/ftci/alien/etc/sm.xml-merge-with-chele" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/inb/sm.xml-from-chele" . [cl-struct-dp-killed-file-state 2932]) ("/home/dapanarx/work/ftci/alien/etc/sm.xml" . [cl-struct-dp-killed-file-state 11620]) ("/home/dapanarx/tmp/sm.xml.merge-with-chele" . [cl-struct-dp-killed-file-state 29461]) ("/home/dapanarx/work/ftci/alien/etc/init/jabberd-sm.conf" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/alien/etc/init/jabberd-s2s.conf" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/alien/etc/init/jabberd-router.conf" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/alien/etc/init/jabberd-c2s.conf" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/poc/client/sa.conf" . [cl-struct-dp-killed-file-state 1]) ("/usr/local/etc/sm.xml" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/.gitconfig" . [cl-struct-dp-killed-file-state 133]) ("/etc/shorewall/rules" . [cl-struct-dp-killed-file-state 1]) ("/root/.bashrc" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/work/ftci/poc/server/db-update.sh" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dpmisc.el" . [cl-struct-dp-killed-file-state 34174]) ("/home/dapanarx/davep/dp-world/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.patch" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.fix.patch" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el-2.patch" . [cl-struct-dp-killed-file-state 1]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dpmacs.el" . [cl-struct-dp-killed-file-state 7920]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dp-dot-emacs.intel.el" . [cl-struct-dp-killed-file-state 2483]) ("/home/dapanarx/davep/dp-world/lisp/lisp/dp-dot-emacs.chele.el" . [cl-struct-dp-killed-file-state 1]) ("/etc/services" . [cl-struct-dp-killed-file-state 492347]) ("/home/dapanarx/etc/pydb/host_info.py" . [cl-struct-dp-killed-file-state 7134]) ("/home/dapanarx/davep/yokel/share/xemacs/xemacs-packages/lisp/ispell/ispell.el" . [cl-struct-dp-killed-file-state 9350])))
(setq dp-recently-killed-files '("/home/dapanarx/etc/pydb/host_info.py" "/home/dapanarx/lisp/dpmisc.el" "/home/dapanarx/.fvwm/.fvwm2rc" "/cm/images/default-image/usr/lib64/python2.6/lib2to3/fixes/fix_xreadlines.py" "/home/dapanarx/.fvwm/.fvwm2rc" "/home/dapanarx/.fvwm/.fvwm2rc" "/home/dapanarx/.rc/IPython.d/ipy_profile_sh.py" "/home/dapanarx/OEM/DOTipython/ipy_user_conf.py" "/home/dapanarx/.fvwm/.fvwm2rc" "/home/dapanarx/.fvwm/ConfigFvwmButtons" "/home/dapanarx/OEM/DOTipython/db/shadowhist_idx" "/home/dapanarx/OEM/DOTipython/ipythonrc" "/home/dapanarx/OEM/DOTipython/__init__.py" "/home/dapanarx/OEM/DOTipython/ipy_user_conf.py" "/home/dapanarx/.rc/IPython.d/ipythonrc" "/home/dapanarx/OEM/DOTipython/ipy_user_conf.py" "/home/dapanarx/.rc/IPython.d/ipy_profile_sh.py" "/home/dapanarx/OEM/DOTipython/ipythonrc" "/home/dapanarx/lisp/dp-dot-emacs.grape01.el" "/home/dapanarx/bin/jabber-tunnel-chele" "/home/dapanarx/lisp/custom.intel.el" "/home/dapanarx/lisp/dp-shells-dev.el" "/home/dapanarx/lisp/dp-vars.el" "/home/dapanarx/bin/hpman" "/home/dapanarx/.rc/alias" "/home/dapanarx/bin/eman" "/home/dapanarx/bin/kman" "/home/dapanarx/lisp/q" "/home/dapanarx/.vnc/wwi" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/home/dapanarx/lisp/dp-dot-emacs.grape01.el" "/usr/share/fonts/default/Type1/a010013l.afm" "/home/dapanarx/etc/pydb/host_info.py" "/home/dapanarx/bin/xem" "/home/dapanarx/lisp/dpmisc.el" "/home/dapanarx/yokel/bin/findprog" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/etc/hosts" "/etc/hosts" "/etc/hosts" "/etc/hosts" "/home/dapanarx/.gitconfig" "/home/dapanarx/.gitexcludes" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.chele" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.chele" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.grape01" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.chele" "/home/dapanarx/work/ftci/poc/client/psa-con.cfg.chele" "/home/dapanarx/work/ftci/poc/client/defs.h" "/home/dapanarx/work/ftci/poc/client/psa.cpp" "/home/dapanarx/work/ftci/poc/client/psa.c" "/home/dapanarx/.go.vanu" "/home/dapanarx/.go.home" "/etc/hosts" "/home/dapanarx/work/ftci/alien/etc/sm.xml" "/home/dapanarx/inb/sm.xml-from-chele" "/home/dapanarx/work/ftci/alien/etc/sm.xml" "/home/dapanarx/tmp/sm.xml.merge-with-chele" "/home/dapanarx/work/ftci/alien/etc/sm.xml" "/home/dapanarx/inb/sm.xml-from-chele" "/home/dapanarx/work/ftci/alien/etc/sm.xml-merge-with-chele" "/home/dapanarx/tmp/sm.xml.merge-with-chele" "/home/dapanarx/inb/sm.xml-from-chele" "/home/dapanarx/work/ftci/alien/etc/sm.xml" "/home/dapanarx/tmp/sm.xml.merge-with-chele" "/home/dapanarx/work/ftci/alien/etc/init/jabberd-sm.conf" "/home/dapanarx/work/ftci/alien/etc/init/jabberd-s2s.conf" "/home/dapanarx/work/ftci/alien/etc/init/jabberd-router.conf" "/home/dapanarx/work/ftci/alien/etc/init/jabberd-c2s.conf" "/home/dapanarx/lisp/dpmisc.el" "/home/dapanarx/work/ftci/poc/client/sa.conf" "/root/.bashrc" "/usr/local/etc/sm.xml" "/home/dapanarx/.gitconfig" "/etc/shorewall/rules" "/root/.bashrc" "/root/.bashrc" "/home/dapanarx/work/ftci/poc/server/db-update.sh" "/home/dapanarx/lisp/dpmisc.el" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.patch" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el-2.patch" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.fix.patch" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.patch" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el.fix.patch" "/home/dapanarx/patches/xemacs/xemacs/xemacs-packages/lisp/edit-utils/saveconf.el-2.patch" "/home/dapanarx/lisp/dpmacs.el" "/home/dapanarx/lisp/dp-dot-emacs.intel.el" "/home/dapanarx/lisp/dp-dot-emacs.chele.el" "/etc/services" "/home/dapanarx/etc/pydb/host_info.py" "/home/dapanarx/yokel/share/xemacs/xemacs-packages/lisp/ispell/ispell.el"))
