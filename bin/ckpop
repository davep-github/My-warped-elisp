#!/usr/bin/env perl
# POPMail (RFC1081) Interface for perl
# Copyright (c) 1993 William M. Perry (wmperry@indiana.edu)
#
# $Id: ckpop,v 1.9 2003/07/03 07:30:11 davep Exp $
#
# Hacked by Bill Reynolds (bill@goshawk.lanl.gov).
# Date strings are done right.
# Mailboxes are now locked during writing.
# Check the permissions on $HOME/.pop, bailing if it's not 600.
# Further hacked by David Panariti:
# . changed to allow checking of number of messages, getting
#   messages and daemon mode based upon program name.
# . Fixed the setting of the day array since Sun is 0.
# . added local user to data file to tell what user actually receives the mail
#   since, e.g., locally I am davep@panux and 
#   ppp-wise I am davidp@eznets.canton.oh.us
# . localized use of the socket, S, since the NT perl dies on
#   print S... and $x = <S>
# . added cppop alias checking to imply -k: keeping mail at other end.
# . added option to start retrieving with specified message number.
# . added filtering of Ads from post1.com
# . added X-POP-Date header
# . added option to retrive new messages based on message number kept in
#   external file.
# . fixed (yuck) y2k issues
# . added X-CIS-Date header (X-xxx-Date headers added since MH hacks off
#   stuff after first word or two in From line.) 
# . added option to force prompting of POP host, etc.
# . added code to consume greeting from pop host.  This was getting us
#   out of sync in the command/response sequence.
# . removed check for / as option character.  This prevented ~/.pop.xxx
#   from working, since ~ becomes, e.g. /home/davep
#

require '/home/davep/bin/dpbug.pl';

undef $SpoolTmp;

sub Verbose {
	local($all) = @_;
	if ($verbose) {
		print "$all";
	}
}

sub popsend {
    local($msg) = @_;
    print "ptx>$msg<\n" if ($trace_tx);
    print S $msg;
}

sub poprecv {
    $_ = <S>;
    print "prx>$_<\n" if ($trace_rx);
    &die_gracefully("socket read failed: $!") if !defined($_);
    $_;
}

# Taken from sigrand by Tom Christiansen (tchrist@convex.com)
# fixed for linux by William Perry (wmperry@indiana.edu)
# (Linux .99pl9 returns 0 on zombie pids)
sub justme {
    if (open LFILE) {
	chop($pid = <LFILE>);
	local($stat) = kill(0,$pid);
	if ($LINUX == 1) {
	    if ($stat == 1) {
		die "$0 already running (pid $pid)\n";
	    }
	}
	else {
	    if ($stat == 0) {
		die "$0 already running (pid $pid)\n";
	    }
	}
	close LFILE;
    }
    open (LFILE, ">$LFILE") || die "can't write $LFILE: $!";
    print LFILE "$$\n";
    close LFILE || die "can't close $LFILE: $!";
} 

sub die_gracefully {
    local($msg) = $_[0];

    print STDERR "An error occurred: $msg\n";
    print STDERR "Resetting.\n";
    unlink "$LFILE";
    unlink $SpoolTmp if defined $SpoolTmp;
    &popsend ("rset\r\n");
    &popsend ("quit\r\n");
    exit(1);
}

sub quit {
    &popsend("quit\r\n");
}

#require "sys/socket.ph";

sub openserver {
    local($them, $port) = @_;
    
    $sockaddr = 'S n a4 x8';

    ($name, $aliases, $proto) = getprotobyname('tcp');
    ($name, $aliases, $port) = getservbyname($port,'tcp')
	unless $port =~ /^\d+$/;;

    (($name, $aliases, $type, $len, $thataddr) = gethostbyname($them)) ||
	die "gethostbyname($them) failed: $!\n";

    $that = pack($sockaddr, &PF_INET, $port, $thataddr);

    use Socket;

    socket(S, &PF_INET, &SOCK_STREAM, $proto) ||
	&die_gracefully("Can't open socket: $!");

    connect(S,$that) ||
	&die_gracefully("Can't connect to socket: $!");

    select(S); $| = 1; select(stdout);

    # consume hello response.
    ($status, $smsg) = &waitfor("^.\(OK\|ERR\)\(.*\)");
    if ($status ne "OK") {
	&die_gracefully($smsg);
    }

    &popsend("user $user\r\n");
    ($status, $smsg) = &waitfor("^.\(OK\|ERR\)\(.*\)");
    if ($status ne "OK") {
	&die_gracefully($smsg);
    }
    &popsend("pass $passwd\r\n");
    ($status, $smsg) = &waitfor("^.\(OK\|ERR\)\(.*\)");
    # print "\nstatus>$status<, smsg>$smsg<\n";
    if ($status ne "OK") {
	&die_gracefully($smsg);
    }
    # &waitfor("^.\(OK\|ERR\)\(.*\)");

    1;
}

sub nummsgs {
    &popsend("stat\r\n");
    local($status, $messages) = &waitfor("^.\(OK\|ERR\)\(.*\)");
    ($msgs,$octets) = split(' ',$messages);
    &Verbose("Messages: $msgs, octets: $octets\n")
}

sub waitfor {
    local($signal) = $_[0];
#    print "waitfor signal>$signal<\n";
    $_ = &poprecv();
    while (!/$signal/) {
	print "waitfor>$_<\n";
	$_ = &poprecv();
    }
    /$signal/;
#     print "waitfor>$_<\n";
#     print "1>$1<, 2>$2<\n";
    ($1,$2);
}

sub emit_to_spool
{
    local($line) = @_;

    print SPOOLOUT "$line\n";
}
sub dump_ad
{
    local($ad_lines) = @_;

    &emit_to_spool (join("\n", @ad_lines));
}

sub retrieve {
    local($msgnum) = @_;
    local($themsg) = "";
    local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);

    @day = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri','Sat');

    @month = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
	      'Aug', 'Sep', 'Oct', 'Nov', 'Dec');

    $SpoolTmp = "/tmp/poptmp.$$";
    open(SPOOLOUT,"+>$SpoolTmp");
    
    open(RECORD_POP,"+>>/tmp/record_pop.$$.$msgnum") if $record_pop;
    
    &popsend("retr $msgnum\r\n");
    local($status,$smsg) = &waitfor("^.\(OK\|ERR\)\(.*\)");
    if ($status ne "OK") {
	&die_gracefully($smsg);
    }
    else {
	# 
	# Some mailers are very persnickity about the time string, 
	# hence the goop. BR Wed Sep  8 14:52:34 MDT 1993
	# 
	$date_str = 
	    sprintf("%s %s %2d %02d:%02d:%02d GMT %04d", 
	    $day[$wday],$month[$mon],$mday,$hour,$min,$sec,$year + 1900);

	emit_to_spool("From popserver $date_str");
	emit_to_spool("X-POP-Date: $date_str");

	$errors = 0;
	$MAX_ERRORS = 10;
	while ($errors < $MAX_ERRORS && !defined($_ = &poprecv())) {
	}
	&die_gracefully("Too many recv errors") if (!defined($_));

        print RECORD_POP $_ if $record_pop;
	# SMTP EOF is <crlf>.<crlf>
	$state = 'pass';
	$body = 0;
	undef @ad_lines;
	undef $ad_line_num;
	while (!/^\.\r*$/) {
	    s/\r//g;
	    chop;
	    #print "state: $state, body: $body, >$_<\n";

	    # only do this on messages forwarded from post1.com
	    if (!$body)
	    {
		$state = 'norm' if  /^To:.*davep\@post1\.com/;
		$body++ if $_ eq '';
	    }

	    if ($state eq 'pass')
	    {
		# passthru mode.
		# most common case first.
		emit_to_spool($_);
	    }
	    elsif ($state eq 'norm')
	    {
		# bunch o' ='s starts a possible ad
		if ($_ eq '=' x 74)
		{
		    $state = 'ad';
		    undef @ad_lines;
		    $ad_line_num = 0;
		    $ad_lines[$ad_line_num++] = $_;
		}
		else
		{
		    emit_to_spool($_);
		}
	    }
	    elsif ($state eq 'ad')
	    {
		# save line in case this isn't a real ad
		$ad_lines[$ad_line_num++] = $_;
		# ='s mark end, too.
		if ($_ eq '=' x 74)
		{
		    $state = 'after_ad';
		}
	    }
	    elsif ($state eq 'after_ad')
	    {
		# ad at end is 
		# ===, etc.      --> ad
		# yadda          ad
		# ===, etc.      --> after_ad
		# <empty line>+  --> after_ad2
		# <EOF>          (will exit loop)
		if ($_ ne '') 
		{
		    # non-blank.  defintely not an ad.
		    &dump_ad(@ad_lines);
		    $state = 'norm';
		    emit_to_spool($_);
		}
		else
		{
		    # we have a blank line, but we don't know if anything
		    # follows it yet.
		    $state = 'after_ad2';
		    $ad_lines[$ad_line_num++] = $_;
		}
	    }
	    elsif ($state eq 'after_ad2')
	    {
                if ($_ ne '')
                {
                    # non blank line after "closing" = x 74
		    # if we're here, then the ad isn't.
		    # dump the buffer and reset.
		    &dump_ad(@ad_lines);
		    $state = 'norm';
		    emit_to_spool($_);
                }
                else
                {
		    $ad_lines[$ad_line_num++] = $_;
                }
	    }		
	    else
	    {
		die("Unknown state in retrieve: $state\n");
	    }
	    
	    $_ = &poprecv();
            print RECORD_POP $_ if $record_pop;
	}

	# terminate email w/newline
	emit_to_spool("");

	if ($state eq 'ad' || $state eq 'after_ad')
	{
	    &dump_ad(@ad_lines);
	}
    }

    close RECORD_POP if $record_pop;

    open(MBOX, ">>$MailBox")
	||   &die_gracefully("Can't open mailbox($MailBox): $!"); 

    open(MBAK, ">>$MailBak")
	||   &die_gracefully("Can't open mailbak($MailBak): $!"); 
    
    $LOCK_SH = 1;
    $LOCK_EX = 2;
    $LOCK_NB = 4;
    $LOCK_UN = 8;

    flock(MBOX,$LOCK_EX);
    # and, in case someone appended
    # while we were waiting...
    seek(MBOX, 0, 2);

    flock(MBAK,$LOCK_EX);
    # and, in case someone appended
    # while we were waiting...
    seek(MBAK, 0, 2);

    seek(SPOOLOUT,0,0);
    
    local($line_num) = 0;
    $_ = <SPOOLOUT>;
    if ($_) {
	print MBOX $_;
	print MBAK $_;

	while(<SPOOLOUT>){
	    if (($line_num == 0) && /^>*From /) {
		$_ = ">" . $_;
	    }
	    print MBOX $_;
	    print MBAK $_;
	} 
    }
    close SPOOLOUT;
    unlink $SpoolTmp; # "/tmp/poptmp.$$";
    undef $SpoolTmp;

    flock(MBOX,$LOCK_UN);
    close MBOX;

    flock(MBAK,$LOCK_UN);
    close MBAK;
  
    # delete message *after* it is successfully put in the spool area.
    if (!$keepMail)
    {
        &popsend("dele $msgnum\r\n");
        ($status, $smsg) = &waitfor("^.\(OK\|ERR\)\(.*\)");
        if ($status ne "OK") {
            &die_gracefully($smsg);
        }
    }
}

sub get_option {
    local($prompt, $default) = @_;
    local($val);

    while (1) {
	print "$prompt\[$default\]: ";
	$_ = <STDIN>;
	chop;
	$val = ($_) ? $_ : $default;
	return $val if $val;
    }
}

sub get_option_no_echo {
    local($var);

    system('stty -echo');
    $var = get_option (@_);
    system('stty echo');
    print "\n";
    $var;
}

sub get_pop_file {
    local($origname) = @_;
    local($tmp);

    if ($origname) {
	# try env if name not specified.
	return $origname if -f $origname;

	# see if arg was a bare provider name
	$tmp = "$ENV{'HOME'}/.pop.$origname";
	return $tmp if (-f $tmp);

	return '';
    }

    # try envvar
    $tmp = $ENV{"POP_FILE"};
    return $tmp if (-f $tmp);

    # try generic .pop file
    $tmp = $ENV{"HOME"} . '/.pop';
    return $tmp if (-f $tmp);

    # try pop file for this provider
    $tmp = "$ENV{'HOME'}/.pop.$ENV{'PPP_SERVICE'}";
    return $tmp if (-f $tmp);

    return '';
}

sub get_user_info {
    local($origname) = @_;
    local($filename, $tmp);

    $filename = &get_pop_file($origname);
    if ($filename eq '') {
	local($warn_str);

	$warn_str =  "Cannot deterimine pop file name";
	$warn_str .=  " from $origname" if $origname;
	warn "$warn_str";
    }
	
    if (!$no_pop_file && -f $filename) {
	open(POPFILE,$filename) || 
	    &die_gracefully("Can't Open .pop ($filename) file! $!");

	($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	 $atime,$mtime,$ctime,$blksize,$blocks) = stat POPFILE;

	if($mode != 0100600){
	    &die_gracefully("$HOME/.pop needs permissions rw-------");
	    }

	$_ = <POPFILE>;
	chop;
	($pophost, $popport, $user, $passwd, $local_user) = split(' ',$_);
	close(POPFILE);
    }
    else {
	$user = get_option("Username", $ENV{'USER'});
	$passwd = get_option_no_echo("Password", "");
	$pophost = get_option("Pop Host", "pop.thecia.net");
	$popport = get_option("Pop Port", 110);
	$local_user = get_option("Local username", $ENV{'USER'});
    }
    $MailBox = "/var/mail/$local_user";
    $MailBak = "/home/$local_user/tmp/MailBak";
#     print "pophost>$pophost<\n";
#     print "popport>$popport<\n";
#     print "user>$user<\n";
#     print "passwd>$passwd<\n";
#     print "local_user>$local_user<\n";

    &Verbose("Host: $pophost, user: $user...\n");

}

sub PrepPop {
    &openserver($pophost,$popport) && &nummsgs;
}	

sub GetPop {
    my $period;
    my $did_rx = 0;

    &PrepPop;
    $| = 1;
    &Verbose("retrieving:");
    $period = ($firstMessage > $msgs) ? " None." : ".";

    for ($msg = $firstMessage; $msg <= $msgs; $msg++) {
	&Verbose(" $msg");
	&retrieve($msg);
	$did_rx = 1;
    }
    $firstMessage = $msg;
    &Verbose("$period\n");
    if ($did_rx && $notifier)
    {
	system($notifier);
    }

    if (open(MSG_NUM_FILE, "> $MSG_NUM_FILE"))
    {
	print MSG_NUM_FILE $firstMessage;
	close MSG_NUM_FILE;
    }
    else 
    {
	warn ("cannot open $MSG_NUM_FILE: $!\n");
    }

    # rotate the back file now, while we are protected by the
    # &justme lock.
    system('rotate-MailBak') if $did_rx;

    &quit
}

sub GetPopd {
    $pid = fork();
    
    if ($pid != 0) {
	print "Starting popmail daemon for $user\@$pophost \n";
	exit;
    }
    else {
	# &justme;
	while (1) {
	    &GetPop;
	    sleep(500);
	}
    }
}

$SIG{'INT'} = 'die_gracefully';
$SIG{'QUIT'} = 'die_gracefully';
$SIG{'TERM'} = 'die_gracefully';
$UID = (getpwuid($<))[2];
$LFILE = "/tmp/popm.$UID";
$notifier = '';

$trace_tx = 0;
$trace_rx = 0;

($ProgName) = 
    $0 =~ /([^\/]*$)/;

$firstMessage = 1;	    
while ($ARGV[0] =~ /^[\-]/)
{
    $_ = shift;
   
    if (/^[\/\-]m(.*)/)
    {
	$firstMessage = ($1 ? $1 : shift);
    }
    elsif (/^[\/\-]k(.*)/)
    {
	$keepMail = 1;
    }
    elsif (/^[\/\-]n/)
    {
	$nflag = 1;
    }
    elsif (/^[\/\-]N(.*)/)
    {
	$notifier = ($1 ? $1 : shift);
    }
    elsif (/^[\/\-]f/)
    {
	$no_pop_file = 1;
    }
    elsif (/^[\/\-]R/)
    {
        $record_pop = 1; 
    }
    elsif (/^[\/\-]g/)
    {
      $getpop = 1;
    }
    elsif (/^[\/\-]t(.*)/)
    {
	$trace_tx = 1 if $1 eq "t";
	$trace_rx = 1 if $1 eq "r";
	if ($1 =~ /[ba*]/ || $1 eq "") {
	    $trace_tx = 1;
	    $trace_rx = 1;
	}
	print "trace_tx\n" if $trace_tx;
	print "trace_rx\n" if $trace_rx;
    }
}

chop( $ARCH = `uname`);

if ($ARCH = "Linux") { $LINUX = 1; } else { $LINUX = 1; }

$isdaemon = $ProgName =~ /popd$/;
$verbose = !$isdaemon;
$keepMail = $keepMail || ($ProgName =~ /cppop(d)?/);

&get_user_info($ARGV[0]);

$MSG_NUM_FILE = "/tmp/cppop.next.msg.$pophost.$UID";
#print "MSG_NUM_FILE>$MSG_NUM_FILE<\n";

if ($nflag) {
    if (open MSG_NUM_FILE)
    {
	$firstMessage = <MSG_NUM_FILE>;
	close MSG_NUM_FILE;
    }
    else
    {
	$firstMessage = 1;
    }
    print "First new message: $firstMessage\n";
}

#vars(isdaemon, verbose, keepMail);

&justme;

if ($isdaemon)
{
    &GetPopd;
}
elsif (!$getpop && ($ProgName eq 'ckpop'))
{
    &PrepPop;
}
else
{
    &GetPop;
}

# &GetPop if ($ProgName eq "getpop" || $ProgName eq "cppop");
# &GetPopd if ($isdaemon);
# &PrepPop if ($ProgName eq "ckpop");

&quit;
