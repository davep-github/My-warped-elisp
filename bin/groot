#!/usr/bin/env bash

# Since this runs as a subprocess, the definition here cannot climb uphill to
# the parent's environment.
# The only way to make this self defining, that can think of, is:
# $ alias groot='unalias groot; source groot' but the alias
# has to live elsewhere.
# I really want it to live as an unused file and then become a function after
# it's executed.  Functions *can* affect the enclosing environment, just like
# aliases.
# The file can be used as a normal script.  Or can be imported as a library function
# by using dp_runme
# 

# The aliases could be generated by scanning files in known locations or by
# having the scanner search for a directive in the file.  This way, the
# entire path can be scanned. E.g. using a completely gnu, novel originally
# brilliant method not inspired or stolen from anywhere.
###;;;autoload

function groot()
{
    echo I am groot.
}
export -f groot
echo 1>&2 "Defined groot as a function.  This file shouldn't be executed again."

# Make initial invocation act normally.
####type groot
dp_runme && groot "$@"
