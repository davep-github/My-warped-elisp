#!/bin/bash
#
# Simple interface to cscope -l|-L line oriented interface.
# Mainly allow mnemonic names for fields.
# 0: Find this C symbol:
# 1: Find this global definition:
# 2: Find functions called by this function:
# 3: Find functions calling this function:
# 4: Find this text string:
# 5: Change this text string:
# 6: Find this egrep pattern:
# 7: Find this file:
# 8: Find files #including this file:

source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

: ${EXTAGTREE_DASH_Q:=}
: ${POST_PROCESSOR:=compile_mode_ify}
: ${POST_PATH:=post_realpath}
###: ${DP_CSCOPE_PROGRAM:=cscope}
: ${DP_CSCOPE_PROGRAM:=gtags-cscope}
field_num=0
arg=${1-}

: ${find_up_p=t}
: ${db_files=()}
: ${ignore_case_opt=}

: ${DP_CODE_INDEX_FINDER_FILE=cscope.*}

: ${db_finder:=cscope.out}

if (($# == 1))
then
    arg="${1}"
    shift
    field_num=0
else
    while (($# > 0))
    do
      case "$1" in
          --sym|--symbol|--cs|-s|--function|--func) shift; arg="${1}"; field_num=0;;
          --global|--def|--definition|--global-def|--global-definition) shift; arg="${1}"; field_num=1;;
          --called|--called-by) shift; arg="${1}"; field_num=2;;
          --calling|--callers|--calls) shift; arg="${1}"; field_num=3;;
          --raw|--no-post|--post-nada|--nada-post) POST_PROCESSOR=post_raw;;
          -t|--text|--str|--string|--text-string|--text-str|--txt) shift; arg="${1}"; field_num=4;;
          --change|--change-text|--change-txt) field_num=5;;  # This may require more work.
          --egrep|--grep|--regexp|--re) shift; arg="${1}"; field_num=6;;
          --file) shift; arg="${1}"; field_num=7;;
          --realpath|--real-path|--rp) POST_PATH=post_realpath;;
          --relpath|--rel-path|--raw-path|--rawp|--relp) POST_PATH=post_rawpath;;
          --db-file) shift; db_files=("${1}");;
          --add-db-file) shift; db_files+=("${1}");;
          -a|--all-db-files) db_files=( $(index-locations) );;
          -i|--including|--include|--inc|-h|--includes) field_num=8;;
          --find-up|--fup) find_up_p=t;;
          --use-dot|--dot-only|--no-find-up) find_up_p=;;
          --reformat) POST_PROCESSOR=cscope-reformat;;
          # for convenience, let us do a global completion here.
          -c|--complete) shift; global-complete "$@"; exit;;
	  -C) ignore_case_opt=-C;;
          --) shift; break;;
          *) break;;
      esac
      shift
    done
fi

EExec_verbose_echo_id POST_PROCESSOR
# ((${#db_files[@]-0} == 0)) || vsetp "${find_up_p}" || {
#     # look for a cscope db above us.
#     EExec_verbose_msg "finding up"
#     db_files=($(find-up "${DP_CODE_INDEX_FINDER_FILE}"))
# }
db_files=($(find-up "${DP_CODE_INDEX_FINDER_FILE}"))

EExec_verbose_msg "db_files[@]>${db_files[@]-}<"

perverted_index_option=-q
[ -e "cscope.po.out" ] || {
    perverted_index_option=
}
set -- "$@" "${arg}" ${perverted_index_option}

[ -z "$*" ] && {
    echo "No arguments were provided, but thanks for playing."
    exit 1
} 1>&2

if ((${#db_files[@]} == 0))
then
    EExec "${DP_CSCOPE_PROGRAM}" -d ${EXTAGTREE_DASH_Q} -L -"${field_num}" "$@"
    exit
fi

post_raw()
{
    cat
}

post_realpath()
{
    realpath "$@"
}

post_rawpath()
{
    echo "$@"
}

compile_mode_ify()
{
    # Convert output to a form that compile mode can use:
    # <path-name>:<line-num> <line-text>
    # Sigh. No $<fnum0>...$<fnumN>.
    while read
    do
      # disable globbing.
      set -f
      set -- $REPLY
      set +f
      echo -n $($POST_PATH "$1"):"$3	"
      shift
      d2="$1"
      shift
      shift
      echo "$@"
    done
    #awk '{printf "%s:%d\t ", $1, $3; $1=$2=$3=""; print $0}'
}

for db_file in "${db_files[@]}"
do
  # -f reffile doesn't work with gtags-cscope,
  # so we'll visit all of the dirs.
  pushd $(dirname "${db_file}") >& /dev/null
  EExec -0 "${DP_CSCOPE_PROGRAM}" \
	-d ${EXTAGTREE_DASH_Q} \
	${ignore_case_opt} \
	-L -"${field_num}" -- "$@" \
      | EExec "${POST_PROCESSOR}"
  popd >& /dev/null
done  
