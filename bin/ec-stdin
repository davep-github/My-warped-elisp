#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################
: ${output_file_name=}
: ${editor=ec}
: ${nuke_file_p=t}
: ${size_check='+1M'}
: ${mktemp_pattern="emacs-stdin-$USER.XXXXXXX"}

# Usage variable usage:
Usage_args_info=" -o|-t) <temp-file-name>. Default is to use mktemp(1)
--tmpfile|--tempfile) see -o.
-w|--wait|--sync) Use ec-w to have the command wait until file is closed.
--nuke|--rm|--del|--dispose|--clean) Remove temp file after reading.
--keep) Don't remove the temp file.
"
Usage_synopsis="Allow Emacs to edit stdin."
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="
Requires the use of a temporary file. The default is to use:
mktemp(1) ${mktemp_pattern}
There are optional things you can do with it.
"
# Example of arg parsing.
option_str="o:t:ws:"
long_options=("tmpfile:" "tempfile:"
"wait" "sync"
"nuke" "rm" "del"
"keep" "preserve"
"size-check:" "sc:")
source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      -o|-t|--tempfile|--tmpfile) shift; output_file_name="${1}";;
      -w|--wait|--sync) editor="ec-w";;
      --nuke|--rm|--del|--dispose|--clean) nuke_file_p=t;;
      --keep|--preserve) nuke_file_p=;;
      -s|--size-check|--sc) shift; size_check="${1}";;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
    esac
    shift
done

[ -z "${output_file_name}" ] && {
    output_file_name=$(mktemp "${mktemp_pattern}" --tmpdir="${TMPDIR}") || {
        echo "mktemp(1) failed, rc: $?."
        exit 1
    } 1>&2
}

size_check_too_big_p()
{
    local sizer="${1}"; shift
    local file_name="${1}"; shift

    # find $PWD -path $(rp amdgpu_fb.c) -size +10k
    local result=$(EExec -y find $(realpath "${TMPDIR}") \
			 -maxdepth 1 \
        		 -path $(realpath "${file_name}") \
			 -size "${sizer}" | head -n1)
    EExec_verbose_echo_id result
    [ -n "${result}" ]
}

if false # EExecVerbose_p
then
    output_file_name="/dev/null"
    echo 1>&2 "Verbose mode; discarding output."
else
    EExec cat - > "${output_file_name}"
fi

EExec_verbose_echo_id size_check
if [ -n "${size_check}" ]
then
    size_check_too_big_p "${size_check}" "${output_file_name}" && {
	EExec_verbose_msg "in too big territory."
	exec < /dev/tty
	while :
	do
	    EExec_verbose_msg "reading."
	    size=$(stat --format=%s "${output_file_name}")
	    read -e -p "File>${output_file_name}< is pretty big (${size_check}, size: ${size}), continue [y/N]? "
	    EExec_verbose_echo_id REPLY
	    case ${REPLY} in
		""|[0nNqQxX]) echo "exiting."; exit 1;;
		[yY1t]) break;;
		*) echo "Can't handle ${REPLY}.  Try again.";;
	    esac
	done
    }
fi

EExec "${editor}" "${output_file_name}"

EExec_verbose_echo_id output_file_name
[ -n "${nuke_file_p}" ] && {
    EExec -y rm -f "${output_file_name}" || {
        echo "rm ${output_file_name} failed, rc: $?."
        exit 1
    } 1>&2
}
