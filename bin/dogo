#!/bin/bash
# $Id: dogo,v 1.4 2005/02/09 09:20:09 davep Exp $
#set -x

. script-x

SHIFT=shift
do_dirname=t
fini()
{
    o_val="$*$two"
    [ -n "${do_dirname}" ] && [ -f "${o_val}" ] && o_val=$(dirname "${o_val}")
    echo $o_val
    # All of our lookup attempts failed.
    [ "$o_val" = "$argWas" ] && exit 1
    exit 0
}

go_lookup()
{
    c="$1"; shift
    gPath=${GOPATH-$HOME/.go}
    oldIFS=$IFS
    IFS=":"
    for pathEl in $gPath # search all files in the GOPATH
    do
      [ -f "$pathEl" ] && {
          IFS=$oldIFS
          # When -m1 is used, the fgrep can exit before the egrep resulting
          # in a pipe error.
          true_p "${show_dir_opt}" && {
              show_dir_opt="--label ${pathEl}"
          }
          tmp=$(egrep -v '^[[:space:]]*[;#]' $pathEl 2>/dev/null | fgrep -m1 $show_dir_opt "|$c|") && {
              #echo "*>$*<" 1>&2
              set -- $tmp
              #echo "*>$*<" 1>&2
              $SHIFT
              #{
                  #echo "*>$*<"
                  #echo_id cs
              #} 1>&2
              x=$(eval echo \$$cs)
              [ "$x" = '$' ] && x=
              echo $(normpath "$*${x}")
              return
          }
      }
    done
    IFS=$oldIFS
    echo "$argWas"
}

for o in "$@"
do
  # change to an existing dir with the arg's name.
  # @todo XXX This can be a PITA.  Do I really want it?
  [ -d "${o}" ] && {
      echo "${o}"
      exit 0
  }
  case "$1" in
      -l) show_dir_p="t"; SHIFT=: ;;
      -L) shift; fini $(go_lookup "$1"); exit;;
      --no-dirname|--nd) do_dirname=;;
      *) break;;
  esac
  shift
done

argWas="$1"
two="${2-}"

case "$two" in
    ""|/*) ;;
    */) two="/$two"
esac

case "$1" in
    /*)  fini "$1"; exit 0;;
    */*) c=$(echo "$1" | sed -n 's!^\([^/]*\).*$!\1!p')
         cs=$(echo "$1" | sed -n 's!^[^/]*/*\(.*\)$!\1!p')
         ;;
    *) c="$1"; cs='';;
esac

# see if dest is set as an environment variable
unset y
true_p "$show_dir_p" || eval y=\$$c 
case "$y" in
    ""|\$*)     # dest is not an envvar: look it up in the go database
    case "$c" in
        back|b) fini ${GoBack-$HOME} ;;
        "") fini . ; exit ;;
        *) fini $(go_lookup "$c") ;;
    esac ;;

    *) eval fini "$y$cs" ; exit ;;
esac

