#!/bin/bash
source script-x
set -u
progname=$(basename $0)

# @ todo
# fer-all-files [-FAF<opt>...] [find opts] [find args] [-- xargs opts]
# e.g. fer-all-files ./client -- fgrep Mk
# but?
# fer-all-files -name '*mak' -- fgrep Mk

DEF_FINDER=find

Usage()
{
    echo \
"Usage: $0 [find-args] -- [xargs-args]
A simpler way to do the common op: find <fstuff> -print0 | xargs -r0 <xstuff>
-s|--standard-finder -- Use $DEF_FINDER.
(-f|--finder-prog) <prog> -- Use <prog> to find files.
"
}

option_str='sf:'
long_options_opt="--longoption=standard-finder --longoption=finder-prog:'"
qdat=($(getopt -o "$option_str" $long_options_opt -- "$@"))
rc=$?
[ $rc != 0 ] && {
    echo "Error from getopt: $rc"
    Usage
    exit $rc
} 1>&2
eval set -- "${qdat[@]}"

vsetp "$DP_SCRIPT_X_DEBUG" && {
    echo '$DP_SCRIPT_X_DEBUG='"$DP_SCRIPT_X_DEBUG"
    echo "Results from getopt -o:"
    echo '${qdat[@]}:'
    #eko 3333 "${qdat[@]}"
    echo '$@:'
    #eko 4444 "$@"
    for i in "$@"; do echo "i>$i<"; done
}

dirs=
type=f

RUNNER=runnit
RUNNER1="$RUNNER"
RUNNER2="$RUNNER"
#POTENTIAL_FINDERS="find-sans-vc find"
# Finders in order of preference.  First one found wins.
POTENTIAL_FINDERS="find"
FINDER=$(find-bin $POTENTIAL_FINDERS)
pipe='|'
FIND_PRINT0_OPT="-print0"
XARGS_PRINT0_OPT="-0"
: ${XARGS_OPTS=-r}
${DP_SCRIPT_X_DEBUG_ONLY_ECHO_STDERR} "0: @>$@<"
for i in "$@"
do
    case "$1" in
        -s) FINDER=$DEF_FINDER;; # Force use of the standard finder
        -f) FINDER=$2; shift;;
	--) shift; break ;;
	-*)
	    echo 1>&2 "Unsupported option>$1<";
	    exit 1 ;;
    esac
    shift
done
${DP_SCRIPT_X_DEBUG_ONLY_ECHO_STDERR} "1: @>$@<"
#
# xxx [xxx-args] -- [find-args] -- xargs-args
# That sucked off all of our options.
# All up to possible '--' are find args.
# All after -- are xargs opts.
find_args=()
for j in "$@"
do
  #echo_id j
  case "$1" in
      --) shift; break;;
      *) find_args[${#find_args[@]}]="$1";;
  esac
  ${DP_SCRIPT_X_DEBUG_ONLY_ECHO_STDERR} "find_args>${find_args[@]}<find_args"
  shift
done
${DP_SCRIPT_X_DEBUG_ONLY_ECHO_STDERR} "2: @>$@<"
xargs_args=("$@")
${DP_SCRIPT_X_DEBUG_ONLY_ECHO_STDERR} "xargs_args>${find_args[@]}<xargs_args"

$FINDER "${find_args[@]}" -print0 | xargs -r0 "${xargs_args[@]}"
