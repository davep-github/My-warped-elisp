#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=
DP_TEMP_FILES=

dp_mktemp()
{
    local file_name="${1}"; shift
    local template="${2-}";
    [ -z "${template-}" ] && {
        template=$(echo "${file_name}" \
            | awk '{ printf("%s%s", $1, "XXXXX" ) }')
    }
    local temp_file=$(mktemp -t "${template}") || {
        echo "Cannot make tmp file."
        exit 1
    } 1>&2
    DP_TEMP_FILES="${DP_TEMP_FILES} ${temp_file}"
    echo "${temp_file}"
}

cleanup_after_sig()
{
    {
        #echo "in cleanup: $@"
        #echo_id DP_TEMP_FILES
        [ -n "${DP_TEMP_FILES-}" ] && {
            rm -f ${DP_TEMP_FILES}
        }
    } 1>&2
}

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    EExec_verbose_msg "on_exit: rc: $rc; ${trap_exit_msg}"
    cleanup_after_sig
}

trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_error: rc: $rc; ${trap_exit_msg}"
    cleanup_after_sig
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        cleanup_after_sig
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

run_git_cmd()
{
    local silent_p="${1}"
    shift
    local name="${1}"
    shift
    local commit="${1}"
    shift
    local tmp_file="${1}"
    shift
    local git_cmd="${1}"
    shift

    EExec_verbose_echo_id name
    EExec_verbose_echo_id tmp_file
    EExec_verbose_echo_id git_cmd
    # Use tee so we can eexec it.
    {
        # For silent, we only care about a match, and
        # the name will pretty much ensure a
        # mismatch.
        [ -z "${silent_p}" ] && echo "====== branch name: ${name}"
        EExec ${git_cmd} "$@" "${commit}" 
    } | EExec tee "${tmp_file}" >/dev/null
}
#
# template end.
########################################################################
: ${git_cmd:=git log --oneline}
: ${git_args:=}
: ${silent_p=}
: ${show_diff_always_p=}
: ${junk_lines=4}
: ${num_lines_right:=${LINES-((33 + junk_lines))}}
: ${num_lines_left:=${LINES-((33 + junk_lines))}}
((num_lines_right -= junk_lines))
((num_lines_left -= junk_lines))

# Usage variable usage:
Usage_args_info=" Diff one line log messages twixt two branches."
Usage_synopsis="
[options] commit1 commit2
"
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="${EExec_parse_usage}
-d) Show lon output even if identical.
-s) Be silent and exit with diff status.
"
# Example of arg parsing.
option_str="dsl:N:r:n:"
long_options=(
    "diff-output" "do"
    "silent" "rc-only" "status"
    "num-lines:"
    "nr:" "nl:"
    "sync"
    "cat" "no-sync"
    "post:"
)
source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      -s|--silent|--rc-only|--status) silent_p=t;;
      -d|--diff-only|--do) show_diff_always_p=t;;
      -l|-N|--num-lines|--numl) shift; num_lines_left="${1}"; num_lines_right="${1}";;
      --nr|--nrl|-r) shift; num_lines_right="${1}";;
      --nl|--nll|-l) shift; num_lines_left="${1}";;
      --sync) post_filter=find_sync;;
      --cat|--no-sync) post_filter=cat;;
      --post) shift; post_filter="${1}";;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
    esac
    shift
done
# The following is needed only when args are required.
[ "$*" = "" ] && Usage

left_commit="${1-}"
[ "${left_commit}" = "." ] && left_commit=HEAD
shift
right_commit="${1-}"
if [ "${right_commit}" = "." ]
then
    right_commit=HEAD
    shift
elif [ -z "${right_commit}" ]
then
    right_commit=HEAD
else
    shift
fi

left_tmp_file=$(dp_mktemp "${progname}-left-")
EExec_verbose_echo_id left_tmp_file
right_tmp_file=$(dp_mktemp "${progname}-right-")
EExec_verbose_echo_id right_tmp_file

#trap "rm -f ${left_tmp_file} ${right_tmp_file}" 0

EExec -y run_git_cmd \
    "${silent_p}" \
    "${left_commit}" \
    "${left_commit}" \
    "${left_tmp_file}" \
    "${git_cmd}" \
    -n "${num_lines_left}" \
    "$@"
EExec -y run_git_cmd \
    "${silent_p}" \
    "${right_commit}" \
    "${right_commit}" \
    "${right_tmp_file}" \
    "${git_cmd}" \
    -n "${num_lines_right}" \
    "$@"

diff >& /dev/null -q "${left_tmp_file}" "${right_tmp_file}"
rc="$?"

[ -n "${silent_p}" ] && exit "${rc}"

[ -z "${show_diff_always_p}" ] && ((rc == 0)) && {
    echo "Outputs are identical."
    exit 0
}

: ${SEPARATOR_COLUMN:=64}
: ${PRE_CONTEXT:=8}

find_sync()
{
    local sep_col=${1-$SEPARATOR_COLUMN}
    EExec egrep -B"${PRE_CONTEXT}" "^.{$sep_col}[ ]"
}

: ${post_filter:=cat}
#
# Use the following as a way to find the sync point.
#
# SEPARATOR_COLUMN=64
# git lon-diff -N <some-num> dev | egrep -B12 "^.{$SEPARATOR_COLUMN}[ ]"
#
: ${SDIFF_OPTIONS=--expand-tabs}
# returns 0: same, 1: differ, 2: WTFO
# We don't consider a difference an error.
EExec --ok-error: 1 sdiff --minimal ${SDIFF_OPTIONS} "${left_tmp_file}" "${right_tmp_file}" | EExec ${post_filter}
rm -f "${left_tmp_file}"
rm -f "${right_tmp_file}"
