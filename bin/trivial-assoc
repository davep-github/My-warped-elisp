#!/bin/bash

source script-x
set -u
progname="$(basename $0)"
source eexec
if [[ -z "${eexec_program=}" ]]    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

file_name="${1}"
shift
ret=
sep=
while (($# > 0))
do
  field_name="${1}"
    #ORIGvvvv -- fails on pid because it isn't in quotes.
    #val=$(cat "${file_name}" | EExec sed -rn "s/(.*)(${field_name})( \. \")([a-zA-Z_0-9-]*)(.*)/\4/p")
    # Hack to make pids work, but not robust.
    val=$(cat "${file_name}" | EExec sed -rn "s/(.*)(${field_name})( \. \"?)([a-zA-Z_0-9-]*)(.*)/\4/p")

    # Last digit of pid is in another match sub-expression.
    #val=$(cat "${file_name}" | EExec sed -rn "s/(.*)(${field_name})( \. (([0-9]+)|\")([a-zA-Z_0-9-]+))(.*)/\5/p")

    # trying to delineate sub-exp matches.
    val=$(cat "${file_name}" | EExec sed -rn "s/(.*)(${field_name})( \. (([0-9]+)|\"([a-zA-Z_0-9-]+)))(.*)/\5/p")
  ret="${ret}${sep}${val}"
  sep=" "
  shift
done
echo $ret
