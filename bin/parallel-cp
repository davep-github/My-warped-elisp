#!/bin/bash

source script-x
set -u
progname="$(basename $0)"
source eexec

# Have to do this vs having another program call us with --mv because of the
# script-x and eexec options which need to come first after the progname.
# And I'm getting tired of passing options via the environment.  Not sure
# which is worse.

[ "${progname}" = "parallel-mv" ] && {
    progname="parallel-mv"
    final_cmd=mv
}

Usage()
{
    echo "Usage: ${progname} src-files... dest-root
Copy src-files to dest-root keeping the path elements.
I.e. replace / with dest-root.
All directories are created as needed."
}

[ -z "$*" ] && {
    Usage 1>&2
    exit 1
}

: ${dest=}
: ${dash_i=-i}
: ${mkdirs_only_p=}
: ${final_cmd:=cp}

std_options=""
option_str="nvqwIidmc"
long_options=(
    "cp" "copy"
    "mv" "move"
    "mkdir" "mkdirs-only"
    "interactive"
    "no-dash-i" "no-interactive"
)
source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;
      -w) dest=~/tmp/wtctts;;
      -I|--no-dash-i|no-interactive) dash_i=;;
      -i|--interactive) dash_i=-i;;
      -d|mkdir|mkdirs-only) mkdirs_only_p=t;;
      -m|--mv|--move) final_cmd=mv; mkdirs_only_p=;;
      --) shift ; break ;;
      *) 
      echo 1>&2 "Unsupported option>$1<";
      Usage
      exit 1 ;;
    esac
    shift
done

abs_is_dir()
{
    (cd "$1"; echo "$PWD")
}

argses=("$@")
num_argses=${#argses[@]}
[ -z "$dest" ] && {
    dest=${argses[$((num_argses - 1))]}
}

orig_dest="$dest"
case "$dest" in
    */) dest=$(echo "$dest" | sed -rn 's!(.*)/$!\1!p');;
    *)
esac

for f in "$@"
do
  # Hack. should remove last element of argses.
  if [ "$f" = "$orig_dest" ]
  then
      continue
  fi
  dname=$(dirname "$f")
  EExec_verbose_echo_id f dname
  fname=$(basename "$f")
  dname=$(abs_is_dir "$dname")
  tdest="$dest$dname"
  EExec_verbose_echo_id dname fname tdest
  EExec mkdir -p "$tdest"
  [ -n "$mkdirs_only_p" ] && continue
  EExec "${final_cmd}" $dash_i "$f" "$tdest"
done
