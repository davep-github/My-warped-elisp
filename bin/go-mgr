#!/usr/bin/env bash

source script-x
set -u
progname="$(basename $0)"
source eexec
eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done
unset eexec_program

DEFAULT_SB_SUFFIX="__SB_rel"
ENV_NAME_MIN_LEN=4
flags='Ee'
flags_set_p=
GOPATH_WITH_SPACES=$(echo $GOPATH | sed 's/:/ /g')
if [ -n "$FAMILY_ZONE" -a "$FAMILY_ZONE" != "none-default-family-zone" ]
then
    ext=".$FAMILY_ZONE"
else
    ext=.${GO_DOMAIN:-$HOSTNAME}	# default to current host's list
fi

maybe_fix_flags()
{
    local flags="$1"
    local flags_set_p="$2"
    local del_flags="$3"
    local add_flags="$4"
    if [[ -n "$flags_set_p" ]]; then
	# Don't touch if they've already been set.
        echo "$flags"
    else
	:
	# Remove del flags
	# Add add flags.
    fi
}        

has_alternation_p()
{
    local str="$1"
    case "$str" in
        *\|*) return 0;;
        *) return 1;;
    esac
}

check_name_len()
{
    local name="$1"
    local flags="$2"
    if has_alternation_p "$name"
    then
        echo 1>&2 "Alternate in name>$name<.  Not checking name len yet.
@todo XXX split on | and loop over components."
    else
        if echo "$name" | egrep -q ".{$ENV_NAME_MIN_LEN,}"; then
            :
        else
            read -p "Alias name>$name< is pretty short ("$(expr length "$name")") (<= $ENV_NAME_MIN_LEN); Nix making it an env var [y/N]? "
            case "$REPLY" in
                [Yy]) flags=$(echo "$flags" | sed 's/e//g');;
            *);;
            esac
        fi
    fi
    echo $flags
}
    

#
# tack ext on to go file so we can specify
# host specific things
#
go_file()
{
    echo $HOME/.go${ext}
}

egrep_for_dirname()
{
    {
        local pat=""
        local sep=""
        if [ -n "$1" ]; then
            pat="$1"
            sep="|"
            shift
            for p in "$@"; do
                p="$(normpath $p)/"
                pat="$pat$sep$p"
            done
        else
            shift
            pat="$1"
        fi
        EExec go2env -L | EExec -0 egrep ${GREP_DASH_N-} "$pat"
    } | sort | uniq
}

grep_for_pwdname()
{
    {
        # Look for various versions of the current directory name.
        pat=":($PWD|$(pwd)|$(realpath .))/ "
        #echo "pat>$pat<"
        EExec -y -0 egrep_for_dirname "" "$pat"
    } | sort | uniq
}

# Not yet. Search for sandbox relative name
grep_for_sbpwdname()
{
    echo 1>&2 "grep_for_sbpwdname: Not written yet."
    return 1
    {
        # Look for various versions of the current directory name.
        pat=":($PWD|$(pwd)|$(realpath .))/ "
        #echo "pat>$pat<"
        EExec -y -0 egrep_for_dirname "" "$pat"
    } | sort | uniq
    return 0
}

delete_item()
{
    name=${2:?"$progname: no name specified"}
    tmp=$(mktemp --tmpdir go-mgrXXXXX) || {
	rc=$?
	echo 1>&2 "Failed to make a temp file."
	exit $rc
    }

    # why use sed like this? sed "/|${name}|/d" < $(go_file) > $tmp || exit
    fgrep ${GREP_DASH_N-} -v "|${name}|" < $(go_file) > $tmp || {
	rc=$?
	echo 1>&2 "Failed to fgrep |${name}| from $(go_file)."
	exit $rc
    }
    mv $tmp $(go_file)
}

edit()
{
    if [ -z "$1" ]
    then
	if [ -n "$DISPLAY" ]
	then
	    ed=ec
	else
	    ed=vi
	fi
    else
	ed=$1
    fi

    $ed $(go_file)
}

dump_go_files()
{
    sep2="$1"
    for f in $GOPATH_WITH_SPACES
    do
        if [ -f $f ]
	then
            [ "$sep" != "" ] && echo $sep
            echo $f":"
	    cat $f
	    sep="$sep2"
	fi
    done
}

opts="x:a:A:d:lef:g:GE:hws"
Usage()
{
    echo 1>&2 "$progname: getopt opts: ${opts}"
    exit 1
}

q=$(getopt -o "$opts" -- "$@")
[ $? != 0 ] && Usage
eval set -- "$q" 

for i in "$@"
do
    #echo "optloop, 1>$1<"
    case $1 in 
	--) 
	    shift
	    break
	    ;;
	-x)
	    ext=${2:?"progname: no ext specified"}
	    # override (use global table) if '-' is used
	    [ "$ext" = "-" ] && ext=
	    shift; shift
	    ;;

	-f)
	    flags=${2:?"progname: no flags specified"}
	    if [[ "$flags" == [-.] ]]; then
                flags=
            else
                flags=$(echo "$flags" | sed "s/[xX]/E/g")
            fi
            flags_set_p=t
	    shift; shift
	    ;;

	-[Aa])
            suffix=
            [ "$1" = "-A" ] && suffix="${DEFAULT_SB_SUFFIX}"
	    # allow g -a xx     # to mean g -a xx `pwd`
	    # and   g -a xx yy
	    # to be specified
	    shift # consume -a
	    # and (new!) g -a [.=/-] --> g -a $(basename $PWD) $PWD
            # Let g -a
            # mean g -a $(basename $PWD)
            # which, further down the line, becomes g -a $(basename $PWD) $PWD
            # but can't because getopt insists on an argument.
	    #dat=("$@")
	    case "$1" in
		.|=|/|-|"") shift; set -- $(basename $PWD) "$@";;
	    esac
	    name="${1}${suffix}"
            echo_id2 name
	    shift # consume name
	    if [ "$1" = '--' -a -n "${2-}" ]
	    then
		    val=$2
	    else
		    val=$(pwd)/
	    fi
	    a=$(dogo "${name}" 2> /dev/null) && {
                #echo_id a
                go_file_name=$(dogo -l "${name}")
                if [ "$(realpath $a)" = "$(realpath $val)" ]; then
                    echo 1>&2 "Senior moment? \`${name}' is already in use for this dir in \`${go_file_name}'."
                else
                    echo 1>&2 "${name} is already in use as: \"${a}\" in \"$go_file_name.\""
                fi
		exit 1
	    }
            [[ -n "$flags_set_p" ]] && {
echo 1>&2 "Check len and offer to clear \`e' flag if too short."
	    }
            case "$flags" in
                *e*) flags=$(check_name_len "$name" "$flags");;
                *);;
            esac
            tmp_gfile=$(mktemp "$HOME/tmp/${progname}-XXXXXX")
echo_id tmp_gfile
            gfile=$(go_file)
            emacs_locals_re='^#.* (\*\*\*|)[[:space:]]*$'
            egrep ${GREP_DASH_N-} -v "${emacs_locals_re}" "${gfile}" >| "${tmp_gfile}"
	    name=$(echo "|$name|" | sed -r 's/\|+/\|/g')
	    line="${flags}${name}       $val"
	    echo "$line >> $gfile"
            vsetp "${ADD_DATE_P-}" && {
                echo "# Added $(date)" >> "${tmp_gfile}"
            }
	    echo "$line" >> "${tmp_gfile}"
#             echo >> "${tmp_gfile}"
            egrep "${emacs_locals_re}" "${gfile}" >> "${tmp_gfile}"
            yes y | cp "${tmp_gfile}" "${gfile}" || {
                echo "cp ${tmp_gfile} ${gfile} failed."
                rm -f "${tmp_gfile}"
                exit 1
            } 1>&2
            rm -f "${tmp_gfile}"
	    ;;
		    
	-d)
	    delete_item "$@" 
	    shift; shift;;
		    
	-l)
	    sep=''
            dump_go_files --
	    shift
	    ;;
	-E)
	    edit "$2"
	    shift; shift
	    ;;

	-e)	
	    edit "$GEDITOR"
	    shift
	    ;;	

	-G)
	    go_file
	    shift
	    ;;

        -h|-w) shift; grep_for_pwdname;;

        -s) shift; grep_for_sbpwdname;;

	-g)
            shift
	    egrep ${GREP_DASH_N-} "$@" $GOPATH_WITH_SPACES /dev/null
	    exit $?
	    ;;

	*)
	    echo $(basename $0)": unsupported request: $*" 1>&2
	    exit 1
	    ;;
esac
done
exit 0
