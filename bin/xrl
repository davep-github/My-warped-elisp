#!/usr/bin/env bash
source script-x
set -u
progname="$(basename $0)"
source eexec
#
# xrl - rsh login in its own xterm window.  Yeah, rsh.  HAHA.  Now the
# default is ssh, of course.  But rsh is fine inside a firewall.
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
##unset eexec_program
export eexec_program

if (($# < 1))
then
    # No arg, check for a default.
    xrl_default_host=$($HOST_INFO -n '' xrl_default_host)
    if [[ -n "${xrl_default_host}" ]]
    then
	set -- "${xrl_default_host}"
    else
	echo "$progname: Need a hostname, or add an \"xrl_default_host\" host-info value."
	exit 1
    fi
} 1>&2

#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

true ${title_base:=}

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}

#
# template ends.
########################################################################


# We need to know the xrl program to run on the rsh'ing host, not the rsh'd
# to host.  It's constant across all remote hosts.
rsh_bin=${XRL_BIN:-$($HOST_INFO -n 'ssh' xrl_rsh_bin)}

just_show=
#
# xrl ([-N] host) ...  Allow -N (just show) to be applied to each host.
# Loop, issuing a dpxx command for each host.
for i in "$@"
do
  # Apply -N to next arg only. Multiple -Ns may be specified.
  # ??? Allow individual hosts to be -N'd (just displayed) by dpxx?
  [ "$i" = "-N" ] && {
      just_show=-N
      continue
  }

  host=$(expand-hostname $i)
  case "$host" in
      *@) host="${host}localhost";;
      *) ;;
  esac
  EExec_verbose_echo_id host
  full_host=$(full-hostname $host) # || dpFATAL 1 "getting full-hostname for >$host< failed"
  EExec_verbose_echo_id --pre 1st\  full_host
  hname=${full_host:-$host}
  EExec_verbose_echo_id --pre 2nd\  full_host
  if [[ -n "${full_host}" ]]
  then
      title_base="$(rx_name rlogin $hname)"
  else
      title_base="${hname}"
  fi
  EExec_verbose_echo_id title_base
  # This is the xterm we run on our local machine.
  xrl_xterm_bin=${XRL_XTERM_BIN:-$($HOST_INFO -n 'xterm' xrl_xterm_bin)}
  # These are local options needed by the local machine's rsh_bin.
  xrl_bin_opts=${XRL_BIN_OPTS:-$($HOST_INFO -n '' xrl_xterm_bin_opts)}
  font=${XRL_XTERM_FONT:-$($HOST_INFO -n "${DEFONT-}" xrl_xterm_font)}
  [ -z "$font" ] && font=9x15
  # Now we need info about the remote host.
  # E.g. what are it's xterm colors?  We rsh to the remote host and our local
  # xterm has the same appearance as a dpxx(dp) done locally on that host.

  EExec dpxx $just_show -h $host -n $title_base -f $font \
        --  ${rsh_bin} ${host}
  just_show=
done
