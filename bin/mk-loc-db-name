#!/bin/sh

source script-x
source eexec
set -u
progname="$(basename $0)"

# I will have a locate alias that references my db so we need to get the real
# one here.
: ${LOCATE:=which-locate}
: ${LOC_DB_NAME:=}
: ${LOC_DB_DIR:=.}
: ${uniqifier=}

eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done

# If this is set, then this is it... May have a directory added.
LOC_DB_NAME=
CREAT_P=
CREAT_NO_ASK_P=

# Usage variable usage:
Usage_args_info="[options]"
Usage_synopsis="Make a locate db name in a context sensitive manner.
"
Usage_details="-n -- Show what would happen but don't do it. [eexec]
-v -- Be verbose about it. [eexec]
-q -- Anti-verbose. [eexec]
-u <uniqifying-string> -- Incorporate this into the db name for differentiation.

"
# Example of arg parsing.
option_str="nvqu:f:d:cC"
source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      -u) shift; uniqifier=$1;;
      -f) shift; LOC_DB_NAME=$1;;
      -d) shift; LOC_DB_DIR=$1;;
      -c) CREAT_P=t;;
      -C) CREAT_P=t; CREAT_NO_ASK_P=t;;
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done

case "$uniqifier" in
    .|=|-) uniqifier="$(basename $PWD)";;
    "") ;;
    *) uniqifier="$(basename $(dogo "$uniqifier"))" # Allow abbrevs.
esac

if [ -n "$uniqifier" ]
then
    case "$uniqifier" in
        .*) ;;
        *) uniqifier=".${uniqifier}";;
    esac
fi

if [ -z "${LOC_DB-}" -a -n "$LOC_DB_NAME" ]
then
    LOC_DB="${LOC_DB_DIR-.}/${LOC_DB_NAME}"
fi
: ${LOC_DB:=$DP_LOC_DB} # Do we need to resort to the lowest priority alternative?

[ -z "$LOC_DB" ] && {
    echo "I need an output file for the locate database."
    exit 1
} 1>&2

loc_db_dir=$(dirname "$LOC_DB")
[ -d "$loc_db_dir" ] || {
    echo -n 1>&2 "loc db dir>$loc_db_dir< does not exist, "
    [ -z "$CREAT_P" ] && {
        echo "exiting."
        exit 1
    } 1>&2
    if [ -z "$CREAT_NO_ASK_p" ]
    then
        read -e -p "create it [y/N]? "
    else
        REPLY=y
    fi
    case "$REPLY" in
        [yY]) EExec mkdir -p "$loc_db_dir";;
           *) echo "Not creating loc db dir>$loc_db_dir<. Exiting."; exit 1;;
    esac
} 1>&2

ext="$(which-locate -i)$uniqifier"

loc_db="${LOC_DB}.${ext}"
echo "$loc_db"
