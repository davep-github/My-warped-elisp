#!/bin/bash

source script-x
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
#unset eexec_program
# Or export eexec_program to propagate eexec info to a called program.
export eexec_program

meister_indexing_rc="${RC_DIR}/index-code.rc"
[ -e "${meister_indexing_rc}" ] && {
    source "${meister_indexing_rc}"
}
set -u

midix=
vsetp ${PROJECT-} && midix=.${PROJECT}

: ${RC_FILE_OVERRIDE=}
: ${RC_FILE_NAMES=".../DOTindex-code.rc .../DOTindex-code${midix}.rc"}
: ${RC_EXTRA_FILE_NAMES=}
: ${RC_START_DIR:=$PWD}
: ${RC_STOP_DIR:=${PROJECT_ROOT:=/home}}
: ${RC_FILE_SEARCH_P=}

# rc file variables should be prefixed with rc_
# This is a list of extra dirs to index provided by any possible rc files.
rc_dirs=
slist=
#
# Bummer. Want this read first, to let options override values set in rc files.
# But 2 options, RC_STOP|START_DIR control *this* operation.
# Must use the envvars.
if vunsetp "${RC_FILE_SEARCH_P}"
then
    :
elif vsetp $RC_FILE_OVERRIDE      # Let this override all
then
    slist="$RC_FILE_OVERRIDE"
else
    slist=
    rc_file_names=
    for rc_file in $RC_FILE_NAMES
    do
      d=$(dirname "$rc_file")
      if [ "$d" == "..." ]
          then
          name=$(basename $rc_file)
          rc_files=$(files-here-and-up "$name" $RC_START_DIR $RC_STOP_DIR) || {
              echo 1>&2 "$progname: Error finding ancestral list of rc files:
$RC_START_DIR $RC_STOP_DIR"
              exit 1
          }
          for rcf in $rc_files
          do
            [ -x "$rcf" ] && {
                echo "sourcing, $(echo_id rcf)"
                source "$rcf"
            }
          done
      fi
    done
fi
echo_id slist
vsetp $slist && source_list "" $slist
echo_id rc_dirs

chmod_index_files()
{
    local mod="$1"; shift

    for f in $index_files
    do
      [ -e "$f" ] && {
          chmod "$mod" "$f"
      }
    done
}

# main_machine="excuses-and-accusations"
# type -p realpath >/dev/null 2>&1 || {
#     echo 1>&2 "$progname: realpath not found; indexing on $main_machine."
#     ssh excuses-and-accusations "cd $PWD; $0 $@"
#     exit
# }

prog=`basename $0`

Usage()
{
   {
       echo "${prog}: usage: [-$all_options]"
   } 1>&2
   
   exit 1
}

AND_INDEX="and index"

: ${ciflags_def:="-am"}
: ${ciflags:="$ciflags_def"}
: ${tflags:=""}
: ${gtflags:=""}
: ${amper:="&"}
: ${clean:="$AND_INDEX"}
: ${real_paths:=t}
: ${tree_tagger:=extagtree}
: ${DEF_SYSTEM_INCLUDES:=/usr/include}
: ${EExec_opts=}
: ${finder_opts:=} # Bad design: this is a parameter to the source code finder.
export finder_opts

SYSTEM_INCLUDES=
# init optional vars to defaults here...
VERBOSE=:
DEBUG=:
output_dir=
MV=$(sp -1 mv) || {             # Avoid -i type aliaii
    dpe_echo 1 "Cannot find \"mv\" in the path."
}

set_all_index_methods()
{
    cscope_p=--cscope
    ctags_p=--ctags
    etags_p=--etags
    gtags_p=--gtags
}

on_off()
{
    local var="${1}"
    shift
    local msg="${1}"
    shift
    local v
    eval v="\$$var"
    echo -en "${msg}:\t"
    if [ -n "${v-}" ] 
    then
        echo " ON"
    else
        echo " off"
    fi
}


dump_indexing_methods()
{
    on_off gtags_p gtags
    on_off cscope_p cscope
    on_off ctags_p ctags
    on_off etags_p etags
}

iterate_individually_p=
iterate_and_do_dot=

# x and e were used to toggle their respective options.
option_str="nvdc:t:g:CTkKVo:Giuf:Is:S:CazhRr"  # <:add new options:>

long_options=(
"cscope"
"no-cscope"
"gtags"
"no-gtags"
"ctags"
"no-ctags"
"etags"
"no-etags"
"just-cscope"
"iterate-and-do-dot" "iid"
"use-files-file" "uff"
)

source dp-getopt+.sh

while (($# > 0))
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  EExec_verbose_msg "Main option loop, \$1>$1<"
  case $1 in
      -I) iterate_individually_p=t;;
      --iterate-and-do-dot|-iid) iterate_individually_p=t;
                                 iterate_and_do_dot_p=t;;
      # Don't actually execute stuff
      -n) EXEC=echo; EExecDashN; EExec_opts="$EExec_opts $1";;
      -v) VERBOSE="echo $prog: "; EExecVerbose; EExec_opts="$EExec_opts $1";;
      -V) cscope_indexer_verbose='-v';;
      # -d is really just verbosity
      -d) EExecVerbose; DEBUG="echo 1>&2 $prog: ";;
      -t) tflags="$tflags $2"; shift;;
      -h) tflags="$tflags -h";;
      -r|--use-files-file|--uff) tflags="$tflags -r";;
      -g) if [[ "$2" =~ "^--?$" ]]; then 
             gtflags=""
          else
             gtflags="$gtflags $2";
          fi
          shift;;
      -c) ciflags="$ciflags $2"; shift;;
      -T) tflags="";;
      -D) ciflags="";;
      -K) clean="$AND_INDEX";;
      -k) clean=t;;
      -C) clean=;;
      -o) output_dir=$(realpath $2); shift;;
      -i) SYSTEM_INCLUDES="$DEF_SYSTEM_INCLUDES";;
      -u) export src_code_finder=uds-files;;
      -a) set_all_index_methods;;
      -z) set_all_index_methods; clean=t;;
      -f) shift; finder_opts="$finder_opts $1";;
      -s) shift; RC_STOP_DIR=$1;;  # Stop is more likely to change.
      -S) shift; RC_START_DIR=$1;;  # Stop is more likely to change.
      -R) shift; tflags="$tflags -R ${1}";;
      --just-cscope) cscope_p=--just-cscope;;
      --cscope) cscope_p=--cscope;;
      --no-cscope) cscope_p=;;
      --gtags) gtags_p=--gtags;;
      -G|--no-gtags) gtags_p=;;
      --ctags) ctags_p=--ctags;;
      --no-ctags) ctags_p=;;
      --etags) etags_p=--etags;;
      --no-etags) etags_p=;;
      --) shift ; break ;;
      *) 
      echo 1>&2 "Unsupported option>$1<";
      Usage
      exit 1 ;;
    esac
    shift
done
: ${dirs:="$@"}
: ${dirs:="$PWD"}

# Put the system includes first so any collisions will be noticeable.
dirs="$SYSTEM_INCLUDES $dirs $rc_dirs"

vsetp "$real_paths" && {
#     ndirs=
#     for d in $dirs; do
#         ndirs="$ndirs $(realpath $d)"
#     done
#     dirs="$ndirs"
    dirs=$(for d in $dirs; do
               realpath $d
           done)
}
echo_id dirs 

exit_p=
all_dirs="${dirs}"
dirs=
for d in ${all_dirs}
do
  [ -e "$d" ] || {
      continue
      echo "$d does not exist, ignoring."
      # Let this be a warning to you. exit_p=1
  } 1>&2
  [ -d "$d" ] || {
      echo "$d is not a dir, ignoring."
      # Let this be a warning to you. exit_p=1
      continue
  } 1>&2
  dirs="${dirs} ${d}"
done

vsetp $exit_p && {
    exit $exit_p
}

# Put index file names in a single place.
index_files=
vsetp "$ctags_p" || vsetp "${clean}" && index_files="$index_files TAGS tags"
vsetp "$gtags_p" || vsetp "${clean}" && index_files="$index_files GTAGS GRTAGS GPATH GSYMS ID"
# ncscope.out is the temp cscope file. If it exists, it indicates a problem.
vsetp "$cscope_p" || vsetp "${clean}" && index_files="$index_files cscope.* ncscope.out" 

if vsetp "$clean"
then
    chmod_index_files "u+w"
    rm -f $index_files || {
        echo "rm of index files>$index_files<, failed."
        exit
    } 1>&2
    [ "$clean" = "$AND_INDEX" ] || {
        exit 0
    }
fi

#gtagser=$(sp -1 gtags)
#[[ -n "gtags_p" && -n "$gtagser" ]] && {
#    EExec eval gtagtree $gtflags $dirs $amper
#}

# extagtree defaults to making etags compatible files.  -E inverts this.
# [ -n "$ctags_p" ] && EExec eval ${tree_tagger} -E $tflags $dirs $amper
# [ -n "$etags_p" ] && EExec eval ${tree_tagger} $tflags $dirs $amper
# EExec eval '( rm -f cscope.* && EExec cscope-indexer $cscope_indexer_verbose -r $ciflags $dirs )'
# [ "$amper" = "&" ] && {
#     echo "waiting for procs to complete..."
#     wait
# }

do_taggin()
{
    local dirs="$@"
    echo 1>&2 "This program ($(basename $0)), ${tree_tagger} and cscope-indexer need to be reworked.
They should work off the same set of files."
    echo "taggin $dirs"
    EExec -y eval ${tree_tagger} $DP_SCRIPT_X_DEBUG_OPT $EExec_opts \
       ${ctags_p} \
       ${etags_p} \
       ${gtags_p} \
       ${cscope_p} \
       $tflags \
       $dirs
    if vsetp "$output_dir"
    then
        EExec $MV $index_files "$output_dir"
    fi
}

echo "Indexing methods:"
dump_indexing_methods
echo

if vsetp $iterate_individually_p
then
    # Make individual indices in each specified dir.
    for d in $dirs
    do
      # Must make sure only one proc writes to each files file.
      (cd "$d" && do_taggin) &
    done
    wait
else
    do_taggin $dirs
fi

if true_p "${read_only_index_files-}"
then
    chmod_index_files a-w
else
    chmod_index_files a+w
fi
    
echo "$PWD:
$(ls -l ${index_files})"

echo "index-code done: $(date)."
