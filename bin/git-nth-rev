#!/bin/bash
#
# Return hash of nth *different* version of file.
# E.g. if the file changed 10 commits ago, then that is the first (n = 1)
# diff. 5 Before that would be 2.
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program

: ${max_count:=1}
: ${base_rev:=HEAD}
: ${oldest_p=}
: ${file_display_order=}
: ${sep=}

tail_dash_n_1()
{
    tail -n1
}

usage()
{    
    echo "Please provide a relative revision number or a <commit>."
    exit ${1-1}
}

tailer=tail_dash_n_1

nths=()
while (($# > 0))
do
  case "$1" in
      -[0-9]*) nths+=($(echo "$1" | sed -rn 's/^(-)([0-9]*)/\2/p'));;
      -n) shift; nths+=("${1}");;
      -n[0-9]*) nths+=($(echo "$1" | sed -rn 's/^(-n)([0-9]*)/\2/p'));;
      --nth) shift; nths+=("${1}");;
      --nth[0-9]*) nths+=($(echo "$1" | sed -rn 's/^(-nth)([0-9]*)/\2/p'));;
      --oldest|--original|--initial|--earliest) nths+=(oldest);;
      --file|--file-first) file_display_order=first;;
      --file-last) file_display_order=last;;
      --base-rev|--base) shift; base_rev="${1}";;
      --all) nths+=(all); tailer=cat;;
      --sep) shift; sep="${1}";;
      -m|--max-count|--num-revs|--for) shift; max_count="${1}";;
      --) shift; break;;
      *) break;;
   esac
   shift;
done

# ${#db_files[@]-0}
if ((${#nths[@]-0} == 0))
then
    if ! x=$(git rev-parse "${1}")
    then
        {
            echo "I don't understand ${1}"
            usage
        } 1>&2
    else
        echo "${x}" 
        exit 0
    fi
fi 

file="${1-}"
shift;

if (($# > 0))
then
    echo "1>$1<"
    shift; 
    if (($# > 0))
    then
        max_count="${1}"
    fi
fi


for nth in "${nths[@]}"
do
  vsetp "${sep}" && echo "${nth} ${sep}"
  if [ "${nth}" = "oldest" -o "${nth}" = "all" ]
  then
      case "$nth" in
          oldest) tailer=tail_dash_n_1;;
          *) tailer=cat;;
      esac
      revs=$(git rev-list "$base_rev" "$file" | $tailer)
  else
      revs=$(git rev-list --max-count=${max_count} --skip="$nth" "$base_rev" "$file")
  fi

  for rev in ${revs}
  do
    case "$file_display_order" in
        first) echo "${file}" "${rev}";;
        last)  echo "${rev}" "${file}";;
        *) echo "${rev}";;
    esac
  done
done
