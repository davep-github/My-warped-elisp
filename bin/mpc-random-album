#!/usr/bin/env bash
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
#unset eexec_program
### Pass to mk-mpd-shuffled-album-playlist
export eexec_program

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        dump_bad_nodes $bad_nodes
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

#
# template ends.
########################################################################
append_p=false
post_op=play
num=1
: ${aski:=false}

# Usage variable usage:
Usage_args_info=" [-a|--append|-A|--no-append|--play|--no-play]"
Usage_synopsis="Select/add a random album to mpd
"
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="${EExec_parse_usage}
-a|--append) Add the random album w/o clearing the playlist first.
--no-play) Don't issue play command.
"
# Example of arg parsing.
option_str="aApPsQ"
long_options=(
    "append"
    "no-append"
    "play"
    "no-play"
    "stop"
    "nop"
    "num-albums:" "num:"
    "ask"
)
source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      -a|--append) append_p=true;;
      -A|--no-append) append_p=false;;
      -p|--play) post_op=play;;
      -P|--no-play) post_op=stop;;
      -s|--stop) post_op=stop;;
      --nop) post_op=;;
      --num-albums|--num) shift; num="${1}";;
      -Q|--ask) ask=true;;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
    esac
    shift
done

EExec mpc stop
#$append_p || EExec mpc clear
#mpc search album "$(mpc list album | shuf -n1)" | EExec mpc add
while :
do
	mk-mpd-shuffled-album-playlist \
	  "${DP_SCRIPT_X_DEBUG_PROPAGATOR}" \
	  --num "${num}" \
	  --mpc-add \
	  "$@"
	while "${ask}"
	do
		echo
		echo '======= Shall we play this list?  ======='
		mpc playlist
		read -e -p "[p]lay, [s]kip, [q]uit? "
		case "$REPLY" in
			p|play) post_op=play;;
			s|skip) post_op=;;
			q|quit) exit 0;;
			*) echo 1>&2 "Confuzed by >${REPLY}, try again."
				 continue;;
		esac
		break
	done
	[ -n "${post_op}" ] && {
		EExec mpc "${post_op}"
		exit
	}
done

:WTF?
exit 1
