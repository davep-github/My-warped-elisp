#!/usr/bin/env bash
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        dump_bad_nodes $bad_nodes
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

#
# template ends.
########################################################################

#mpc search album "$(mpc list album | shuf -n1)" | EExec mpc add

# Usage variable usage:
Usage_args_info=""
Usage_synopsis="Create list of files from shuffled list of albums:
"
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="${EExec_parse_usage}
--cat|--out|--list) Put list on stdout
--mpc-add|--add|--queue) Queue/add to mpd current playlist
-z|--zap|--clear|--empty|--mt|--no-append) Clear existing playlist first.
-a|--append) Do not clear existing playlist.
--num-albums|--num) Number of albums to use.
-j|--just-album-names|--just-albums|--album-names|--jan) Guess...
-p <playlist> |--playlist <playlist>) Put list into <playlist>.
"

# Example of arg parsing.
option_str="zajp:"
long_options=(
    "cat" "out" "list"
    "mpc-add" "add" "queue"
    "zap" "clear" "empty" "mt"
    "append"
    "num-albums:" "num:"
    "all"
    "pl:" "play-list:" "playlist:"
)

source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      --cat|--out|--list) handler=cat_handler;;
      --mpc-add|--add|--queue) handler=mpc_add_handler;;
      -z|--zap|--clear|--empty|--mt|--no-append) clear_p=true;;
      -a|--append) clear_p=false;;
      --num-albums|--num) shift; num="${1}";;
      -j|--just-album-names|--just-albums|--album-names|--jan) just_album_names_p=true;;
      -p|--pl|--play-list|--playlist) shift; playlist="${1}"; handler=playlist_handler;;
      -a|--all) num=-0;;


      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
    esac
    shift
done

: ${handler:=cat_handler}
: ${clear_p=true}
: ${num=-0}
: ${just_album_names_p=false}

cat_handler()
{
    cat
}

playlist_handler()
{
    cat >| "${playlist}"
}

mpc_add_handler()
{
    if EExecDashN_p
    then
        echo "{-} mpc add..."
        cat
    else
        EExec mpc add
    fi
}

EExecDashN_p && handler=cat_handler

[ "${handler}" = "mpc_add_handler" ] || {
    clear_p=false
}
"${clear_p}" && EExec mpc clear
mpc list album | shuf | head -n "${num}" | while read
do
  if "${just_album_names_p}"
  then
      echo "${REPLY}"
  else
      mpc search album "${REPLY}" | "${handler}"
  fi
done
