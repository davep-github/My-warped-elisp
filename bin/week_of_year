#!/usr/bin/env python

import sys, os, exceptions
import time, datetime

# which is better?
# All numeric. Should do month names and abbrevs.
# Default is year, month, day of today
# prog [day [month [year]]]
# prog [year [month [day]]]
# prog [-y year] [-m month] [-d day]
#
# dtd = datetime.date(2010, 8, 8)

# e.g. datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
class TZ(datetime.tzinfo):
    def __init__(self, tz_seconds=time.timezone):
        self.tz_seconds = tz_seconds
    def utcoffset(self, dt):
        return datetime.timedelta(seconds=self.tz_seconds)

def eval_date_component(parameter_value, parameter_string, parameter_name):
    pval0 = parameter_value
    isa_delta_p = parameter_string[0] in ('+', '-')
    parameter = eval(parameter_string)
    if isa_delta_p:
        part2 = "%s + %s" % (pval0, parameter)
        parameter += parameter_value
    else:
        part2 = "%s" % (parameter,)
    if parameter <= 0:
        raise exceptions.ValueError(
            "Error computing date component: %s: %s is <= 0" % (
                parameter_name, part2))
    return parameter

def main(argv):
    import getopt
    verbosity = 0
    today_ymd = time.localtime()[0:3]
    year, month, day = today_ymd

    opt_string = "y:m:d:v"
    opts, args = getopt.getopt(argv[1:], opt_string)
    for o, v in opts:
        if o == '-v':
            verbosity += 1
            continue
        if o == '-y':
            year = eval_date_component(year, v, "year")
            continue
        if o == '-m':
            month = eval_date_component(month, v, "month")
            continue
        if o == '-d':
            day = eval_date_component(day, v, "day")
            continue
    ymd = (year, month, day)
    suffix = ""
    if verbosity > 0:
        suffix = "desired: %s" % (ymd,)
        if verbosity > 1:
            suffix += ", today: %s" % (today_ymd,)

    datetime_date = datetime.datetime(*ymd, tzinfo=TZ())
    iso_cal = datetime_date.isocalendar()
    if verbosity:
        print "iso_cal:", iso_cal
    week_of_year = iso_cal[1]
    if suffix != "":
        suffix = " " + suffix

    print "%s%s" % (week_of_year, suffix)

if __name__ == "__main__":
    try:
        main(sys.argv)
    except exceptions.Exception, e:
        print >>sys.stderr, "Exception:", " ".join([str(x) for x in e])

    sys.exit(0)
