#!/usr/bin/env bash
#
# $Id: isp-pings,v 1.11 2005/05/01 08:20:10 davep Exp $
#
# isp-pings: ping a list of sites to see where things are hosed.
#set -x
source script-x
source ping-lib.sh

set -u

iter=0

current_isp='verizon.net'
#: ${LAN_GW=$(netstat -rn | sed -rn 's/(^default[[:space:]]+)([^[:space:]]+)(.*)/\2/p')}

: ${LAN_GW:=192.168.1.1}
bad_nodes=
good_nodes=

: ${zzz:=0}
if [ -n "${HOST_INFO}" ]
then
    ISP="${current_isp}"
else
    ISP=$($HOST_INFO -n "${current_isp}" "ISP")
fi
echo "ISP: ${ISP}"

# hopefully increasing in distance
# for verizon,
# incoming.$ISP, outgoing.$ISP, news.$ISP don't respond to pings.

# (news|incoming). ISP==verizon doesn't respond to pings.
#     outgoing.$ISP --> not here any more, fuck it all.
#     www.ucsd.edu  --> seem to have blocked pings.  Need a likely west coast. M$?

other_places=(
    sam
    chicxulub
    www.$ISP
    www.mit.edu
    www.yahoo.com
    www.ibm.com)

add_failure()
{
    local node=$1; shift

    bad_nodes=$(pathadd -s ', ' "$bad_nodes" "$node")
    num_failures=$((num_failures + 1))
    prefix='***'"[$num_failures]"'***'
}

add_success()
{
    local node=$1; shift

    good_nodes=$(pathadd -s ', ' "$good_nodes" "$node")
    num_successes=$((num_successes + 1))
}

dump_node_lists()
{
    dump_nodes "bad" ${bad_nodes}
    dump_nodes "good" ${good_nodes}
}


# @todo XXX ??? Call this if we get a signal (especially SIGINT)?
dump_count()
{
    local of_msg=
    local num_loops="${1}"; shift
    local max_loops="${1}"; shift
    if ((num_loops < 0))
    then
	of_msg="(infinity - 1)"
    else
	of_msg="${max_loops}"
    fi
    echo "Completed ${iter} of ${of_msg} iterations."
}

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
	dump_count "${num_loops}" "${orig_num_loops}"
        dump_bad_nodes $bad_nodes
        exit 1
    } 1>&2
}

for sig in 2 3 4 5 6 7 8 15
do
    trap "sig_exit $sig" $sig
done

num_failures=0
num_successes=0
prefix=

# default is 2^64 - 1, [ as of: 2021-03-04T11:36:21 ]
num_loops=${1-${kwa_num_loops-"-1"}}

do_pings ()
{
    if [ "$num_failures" -gt 0 ]
    then
        prefix='***'"[$num_failures]"'***'
    fi
    if pingit "$LAN_GW" "$prefix(LAN-GW)"
    then
	add_success "$LAN_GW"
    else
	add_failure "$LAN_GW"
    fi

    # !!! find verizon gateway (hopefully programmatically)
    # pingit 66.92.73.1 '(ISP-GW) '

    for s in $(find_nameservers)
    do
        pingit "$s" "$prefix(NS)" || add_failure "$s"
    done

    for s in ${other_places[@]}
    do
        pingit "$s" "$prefix" || add_failure "$s"
    done
}

# Make this work... right now it interferes with using $1 as the loop count.
#other_places+=("$@")
#echo "other_places>${other_places[@]}<"

orig_num_loops="${num_loops}"
echo "resolv conf: ${RESOLV_CONF}"
show_resolv_conf
echo '==================='
wan_ip=$(my-wan-ip)
echo "External IP: ${wan_ip} [$(nslookup ${wan_ip})]"

while [ "$num_loops" -ne 0 ]
do
    echo "iteration: ${iter}"
    do_pings
    [ "$zzz" -gt 0 ] && echo "zzz($zzz)"
    sleep "$zzz"
    ((++iter))
    [ "$num_loops" -lt 0 ] || ((--num_loops))
done

dump_count "${num_loops}" "${orig_num_loops}"
dump_node_info

exit 0

