#!/usr/bin/env bash
#
# $Id: isp-pings,v 1.11 2005/05/01 08:20:10 davep Exp $
# 
# isp-pings: ping a list of sites to see where things are hosed.
#set -x
source script-x
source ping-lib.sh

#: ${LAN_GW=$(netstat -rn | sed -rn 's/(^default[[:space:]]+)([^[:space:]]+)(.*)/\2/p')}

: ${LAN_GW:=192.168.1.1}
bad_nodes=

: ${zzz:=0}
[ -z "$ISP" ] && ISP=$($HOST_INFO -n verizon.net ISP)

# hopefully increasing in distance
# for verizon, 
# incoming.$ISP, outgoing.$ISP, news.$ISP don't respond to pings.

# (news|incoming). ISP==verizon doesn't respond to pings.
#     outgoing.$ISP --> not here any more, fuck it all.
#     www.ucsd.edu  --> seem to have blocked pings.  Need a likely west coast. M$?

other_places=(
    www.$ISP 
    www.mit.edu 
    www.yahoo.com 
    www.ibm.com)

add_failure()
{
    local node=$1; shift

    bad_nodes=$(pathadd -s ', ' "$bad_nodes" "$node")
    num_failures=$((num_failures + 1))
    prefix='***'"[$num_failures]"'***'
}

dump_bad_nodes()
{
    [ -z "$*" ] && {
        echo "No bad nodes detected."
        return
    }
    echo "Bad nodes:"
    for bn in "$@"
    do
      echo "  $bn"
    done
}

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        dump_bad_nodes $bad_nodes
        exit 1
    } 1>&2
}

for sig in 2 3 4 5 6 7 8 15
do
    trap "sig_exit $sig" $sig
done

num_failures=0
prefix=

num_loops=${1-${kwa_num_loops-"-1"}}

do_pings ()
{
    if [ "$num_failures" -gt 0 ]
    then
        prefix='***'"[$num_failures]"'***'
    fi
    pingit "$LAN_GW" "$prefix(LAN-GW)" || add_failure "$LAN_GW"

    # !!! find verizon gateway (hopefully programmatically)
    # pingit 66.92.73.1 '(ISP-GW) '
    
    for s in `find_nameservers` 
    do
        pingit "$s" "$prefix(NS)" || add_failure "$2"
    done
    
    for s in ${other_places[@]}
    do
        pingit "$s" "$prefix" || add_failure "$s"
    done
}

# Make this work... right now it interferes with using $1 as the loop count.
#other_places+=("$@")
#echo "other_places>${other_places[@]}<"

iter=0
while [ "$num_loops" -ne 0 ]
do
    echo "iteration: $((++iter))"
    do_pings
    [ "$zzz" -gt 0 ] && echo "zzz($zzz)"
    sleep "$zzz"
    [ "$num_loops" -lt 0 ] || : $((--num_loops))
done

dump_bad_nodes

exit 0

