#!/usr/bin/env python

import os, sys, string, types, re
import gzip
import dp_utils, ticker_lib

# Regular variable names are strings. So we'll use a non-string for some
# special, internal codes. This `var' holds the constructor of the chosen
# Ticker*_t
CTOR = ("special var", "constructor")
def identity(x, *args, **kw_args):
    if args:
	return [x] + args
    return x

# -class Option_info_t:
def eval_twiddle(twiddle_chars):
    is_numeric = True
    if  twiddle_chars[0] in ('-', "0","1","2","3","4","5","6","7","8","9"):
        for c in twiddle_chars[1:]:
            if not c in ("0","1","2","3","4","5","6","7","8","9"):
                is_numeric = False
                break
    else:
        is_numeric = True
    if is_numeric:
        return eval(twiddle_chars)
    return twiddle_chars

def eval_with_units(num, allow_fractions_p=False):
    if (num == "-1"):
        return False                    # No limit
    return dp_utils.numWithUnits(num, allow_fractions_p=allow_fractions_p)

def inc_callback(option, opt_str, value, parser):
    current = getattr(parser.values, option.dest)
    current += 1
    setattr(parser.values, option.dest, current)
    
def dict_arg_callback(option, opt_str, value, parser, dict):
    print "dict_arg_callback:"
    print "  option>%s<" % (option,)
    print "  option.dest>%s<" % (option.dest,)
    print "  opt_str>%s<" % (opt_str,)
    print "  value>%s<" % (value,)
    dict[option.dest] = value

def teeker_arg_callback(option, opt_str, value, parser):
    dict_arg_callback(option, opt_str, value, parser,
                      parser.teeker_var_dict)

def teeker_arg_callback_true(option, opt_str, value, parser):
    teeker_arg_callback(option, opt_str, True, parser)

def teeker_arg_callback_eval_with_units(option, opt_str, value, parser):
    teeker_arg_callback(option, opt_str, eval_with_units(value), parser)

def constructor_arg_callback(option, opt_str, value, parser):
    dict_arg_callback(option, opt_str, value, parser,
                      parser.ticker_ctor_kwargs)

def constructor_arg_callback_true(option, opt_str, value, parser):
    constructor_arg_callback(option, opt_str, True, parser)

def constructor_arg_callback_eval_with_units(option, opt_str, value, parser):
    print "constructor_arg_callback_eval_with_units:"
    print "  option>%s<" % (option,)
    print "  option.dest>%s<" % (option.dest,)
    print "  opt_str>%s<" % (opt_str,)
    print "  value>%s<" % (value,)
    constructor_arg_callback(option, opt_str, eval_with_units(value), parser)

def constructor_arg_callback_twiddle(option, opt_str, value, parser):
    parser.teeker_var_dict[CTOR] = ticker_lib.Twiddle_ticker
    constructor_arg_callback(option, opt_str, eval_twiddle(value), parser)

def constructor_arg_callback_char(option, opt_str, value, parser):
    parser.teeker_var_dict[CTOR] = ticker_lib.Char_ticker_t
    constructor_arg_callback(option, opt_str, value, parser)

def constructor_arg_callback_DOTS(option, opt_str, value, parser):
    constructor_arg_callback_char(option, ".", ".", parser)
    option.dest = "tick_interval"
    teeker_arg_callback_eval_with_units(option, opt_str, value, parser)

def constructor_arg_callback_dots(option, opt_str, value, parser):
    constructor_arg_callback_char(option, ".", ".", parser)

def constructor_arg_callback_char_and_char_wise(option, opt_str, value, parser):
    constructor_arg_callback_char(option, opt_str, value, parser)
    parser.teeker_var_dict["char_wise_p"] = True

def constructor_arg_callback_dots_and_char_wise(option, opt_str, value, parser):
    constructor_arg_callback_char_and_char_wise(option, ".", ".", parser)

if __name__ == "__main__":
    import optparse
    def_tick_interval = 100
    ostream = sys.stdout
    def_pipe_stream = sys.stdout
    pipe_stream = def_pipe_stream
    grand_total_p = True
    sample_lines_tick_p = False
    sample_lines_tick_prefix = "th-line>"
    no_clobber_p = False
    openMode = 'w'
    outputStreams = []
    compress_p = False
    file_suffix = ""
    U_extension = ".log"
    grep_patterns = []
    grepped_lines = []
    line_number = 0
    ctor_keywords = {}
    ctor_keywords["max_output_units_before_newline"] = 80 * 100
    var_dict = {CTOR: ticker_lib.Ticker_t, "tick_interval": 1}
    append_p = False
    ## Each -Z adds one, and we want a single -Z to yield max compression.

    # tick_interval, increment=1, init_string="counting: ", comma=", ",
    # init_count=0, tick_char

    oparser = optparse.OptionParser()
    oparser.disable_interspersed_args()

    ## Possibly not the best way to handle this, but it sure makes it easy.
    oparser.ticker_ctor_kwargs = ctor_keywords
    oparser.teeker_var_dict = var_dict

    oparser.add_option("-i", "--tick-interval",
                       action="callback",
                       callback=teeker_arg_callback_eval_with_units,
                       dest="tick_interval", type="string",
                       help="Set ticker's tick interval.")
    oparser.add_option("-T", "--show-twiddles",
                       dest="show_twiddles_p",
                       default=False, action='store_true',
                       help="Show list of available twiddles.")
    oparser.add_option("-l", "-s", "--sample-lines",
                       dest="sample_lines_tick_p",
                       default=False, action='store_true',
                       help="Tick with input line samples.")
    oparser.add_option("-L", "-S", "--sample-lines-prefix",
                       dest="sample_lines_tick_prefix", action="store",
                       default="th-line>",
                       help="Prefix for sampled lines.")
    oparser.add_option("-A", "--no-clobber",
                       dest="no_clobber_p", default=False, action='store_true',
                       help="Don't clobber existing files. Exit.")
    oparser.add_option("-Z", "--compression-level",
                       dest="compression_level", default=-1,
                       action="callback",
                       callback=inc_callback,
                       help="Compression level.")
    oparser.add_option("-u", "--timestamp",
                       dest="add_timestamp_p", default=False,
                       action='store_true',
                       help="Add uniquifying timestamp to output file name.")
    oparser.add_option("-E", "--extension",
                       dest="U_extension", default=".log",
                       action="store", type="string",
                       help="Addition output file extension. Added last, after timestamp [if present].")
    oparser.add_option("-U", "--show-units",
                       dest="show_tick_units_p",
                       action="callback",
                       callback=constructor_arg_callback_true,
                       help="Print units [chars, lines]) with output.")
    oparser.add_option("-I", "--increment",
                       dest="increment", type="string",
                       action="callback",
                       callback=constructor_arg_callback_eval_with_units,
                       help="Increment")
    oparser.add_option("-m", "--max-output-line-len",
                       dest="max_output_units_before_newline", type="string",
                       action="callback",
                       callback=constructor_arg_callback_eval_with_units,
                       help="Maximum ticks per line")
    oparser.add_option("-M", "--max-output",
                       dest="max_output_units_before_exit", type="string",
                       action="callback",
                       callback=constructor_arg_callback_eval_with_units,
                       help="Maximum ticks before exiting.")
    oparser.add_option("-P", "--prefix", "--initial-string",
                       dest="init_string", type="string",
                       action="callback",
                       callback=constructor_arg_callback,
                       help="Initial prefix string.")
    oparser.add_option("-C", "--comma", "--count-separator", "--separator",
                       dest="comma", type="string",
                       action="callback",
                       callback=constructor_arg_callback)
    oparser.add_option("-z", "--initial-count",
                       dest="init_count", type="string",
                       action="callback",
                       callback=constructor_arg_callback_eval_with_units,
                       help="Initial count [number of units]")
    oparser.add_option("-c", "--tick-char",
                       dest="tick_char", type="string",
                       action="callback",
                       callback=constructor_arg_callback_char,
                       help="""Tick character. Mutually exclusive with twiddle.
Implies Char_ticker_t""")
    oparser.add_option("-d", "--dots",
                       action="callback",
                       callback=constructor_arg_callback_dots,
                       dest="tick_char",
                       help="Use dots for tick char. Implies Char_ticker_t.")
    oparser.add_option("-.", "--char-dots",
                       dest="tick_char",
                       action="callback",
                       callback=constructor_arg_callback_dots_and_char_wise,
                       help="Char_ticker_t, count chars, tick with '.'.")
    oparser.add_option("-D", "--DOTS",
                       dest="tick_char", type="string",
                       action="callback",
                       callback=constructor_arg_callback_DOTS,
                       help="Like --dots + tick interval.")
    oparser.add_option("-t", "--twiddle",
                       dest="twiddle_chars",
                       type="int",
                       action="callback",
                       callback=constructor_arg_callback_twiddle,
                       help="Set twiddle chars. Implies Twiddle_ticker_t")
    oparser.add_option("-G", "--print-grand-total",
                       dest="grand_total_p",
                       action="callback",
                       callback=constructor_arg_callback_true,
                       help="Print grand total at end.")
    oparser.add_option("-k", "--char-wise",
                       dest="char_wise_p",
                       action="callback",
                       callback=teeker_arg_callback_true,
                       help="Count chars vs lines [the default].")
    oparser.add_option("-K", "--char-wise-char", "--char-tick-char",
                       dest="tick_char", type="string",
                       action="callback",
                       callback=constructor_arg_callback_char_and_char_wise,
                       help="Count chars vs lines [the default] and set tick char.")
    oparser.add_option("-p", "-e", "--pipe-mode", "--output-to-stderr",
                       "--tick-to-stderr",
                       dest="pipe_mode_p",
                       default=False, action="store_true",
                       help="Send ticks to stderr and input to stdout.")

    # tee(1) compatibility.
    oparser.add_option("-a", "--append",
                       dest="append_p",
                       action="store_true",
                       default=False,
                       help="Append data to output file(s).")

    options, args = oparser.parse_args()

#    print "oparser.ticker_ctor_kwargs>%s<" % (oparser.ticker_ctor_kwargs,)

    print "compression:", options.compression_level
    compress_p = options.compression_level >= 0
    print "compress_p:", compress_p
#    print "options>%s<" % (options,)
#    print "dir(options)>%s<" % (dir(options),)
#    for key, value in options.items():
#        print "%s>%s<" % (key, value)
#    for o in oparser.option_list:
#        print "o>%s<" % (o,)
    for key, value in ctor_keywords.items():
        print "ctor_kw: %s>%s<" % (key, value)
    

    if options.show_twiddles_p:
        ticker_lib.Twiddle_twiddles()
        sys.exit(0)
    if options.append_p:
        openMode = "a"

    for a in args:
        a = a + file_suffix
        if no_clobber_p:
            if os.path.exists(a):
                print >>sys.stderr, "File [%s] exists: not clobbering" % (a,)
                sys.exit(1)
        if compress_p:
            # zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])
            print "compression:", options.compression_level
            fobj = gzip.open(a + ".gz", openMode, options.compression_level)
        else:
            fobj = open(a, openMode)

        # I *love* duck typing.
        outputStreams.append(fobj)


    #!<@todo Check for twiddle ticker request and handle that.
    #print "ctor_keywords:", ctor_keywords
    # pipe mode: Ticks go to stderr and lines go to stdout.
    pipe_mode_p, char_wise_p = (var_dict.get("pipe_mode_p", False),
                                var_dict.get("char_wise_p", False))

    #if ctor_keywords.get("twiddle_chars", False) != False:
    #    ctor_keywords["init_string"] = ""
    #
    if ctor_keywords.get("init_string", False) == False:
        if char_wise_p:
            ctor_keywords["init_string"] = "Counting chars: "
            ctor_keywords["unit_name"] = 'char'
        else:
            ctor_keywords["init_string"] = "Counting lines: "
            ctor_keywords["unit_name"] = 'line'

    if pipe_mode_p:
        ctor_keywords["ostream"] = sys.stderr
    else:
        ctor_keywords["ostream"] = ostream

    if sample_lines_tick_p:
        ctor_keywords["init_string"] = "Sampling every %sth line\n" % \
                                       (options.ticker_ctor_kwargs["tick_interval"])
        ctor_keywords["unit_name"] = 'line'
        ctor_keywords["comma"] = ""     # Line will end with newline.

    print "max_output_units_before_newline", ctor_keywords["max_output_units_before_newline"]
    ticker = var_dict[CTOR](var_dict["tick_interval"], **ctor_keywords)
    if pipe_mode_p:
        outputStreams.append(pipe_stream)
        ostream.write("\n")
    while True:
	l = sys.stdin.readline()
	if not l:
            if grepped_lines:
                print "\n================="
                print "Num matching lines:", len(grepped_lines)
                tlos = outputStreams.append(sys.stdout)
                for lt in  grepped_lines:
                    for o in outputStreams:
                        o.write("Matching line: %s: %s\n" % (lt[1],
                                                             lt[0][:-1]))
                print "================="
            ticker.fini()
            break
        line_number += 1
        for o in outputStreams:
            o.write(l)
        for regexp in grep_patterns:
            if regexp.search(l):
                grepped_lines.append((l, line_number))
                break
        if char_wise_p:
            # Iterate for each char in the line.
            for c in l:
                if sample_lines_tick_p:
                    tick = sample_lines_tick_prefix + c
                else:
                    tick = None
                ticker(tick=tick)
        else:
            if sample_lines_tick_p:
                # @todo XXX allow a format to be used (dictionary type)
                tick = "%8d%s" % (ticker.counter, sample_lines_tick_prefix + l)
            else:
                tick = None
            ticker(tick=tick)
    print
