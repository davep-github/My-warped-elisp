#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################

Usage()
{
    echo "A +/- percentage for the volume is required. A zero means mute.
@todo XXX Change this to use setvol. set to n, +/-d adjust by d.
@todo XXX This is basically what I did, not knowing setvol existed."
}

(($# < 1)) && {
    Usage
    Usage_error
} 1>&2

delta_vol="${1}"
EExec_verbose_echo_id delta_vol

# $ mpc volume
# volume: 78%
# ??? Is it 0 to 100 or 0 to 99?
current_vol=$(mpc volume | \
		  sed -rn 's/(^volume:[[:space:]]{0,2})([0-9]{1,3})(%)/\2/p')
EExec_verbose_echo_id current_vol
case "${delta_vol}" in
    mute) delta_vol=$((0 - current_vol));;
    =[0-9]*) set -x
	     # 's/(=)([0-9]{1,3})/\2/'
	     delta_vol=$(echo "${delta_vol}" | sed -r 's/(=)([0-9]{1,3})/\2/')
	     EExec_verbose_echo_id delta_vol
	     delta_vol=$((delta_vol - current_vol))
	     set +x
	     ;;
    *) ;;
esac
EExec_verbose_echo_id --msg "New delta_vol for to mute: " delta_vol
new_vol=$((current_vol + delta_vol))
if ((new_vol < 0))
then
    echo "Vol too low, setting to 0% (muted)."
    new_vol=0
elif ((new_vol > 100))
then
    echo "Vol too high, setting to 100%."
    new_vol=100
fi 1>&2

EExec mpc volume "${new_vol}"
