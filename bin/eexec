#!/bin/bash
# $Id: eexec,v 1.16 2005/12/17 08:11:04 davep Exp $
#
# run a program with variable amounts of verbosity and 
# error reporting
#
# usage:
# . eexec
# EExec some-command
# INTTMIG (It Needs This To Make It Go -- Various Paclids.)
# EExec requires command lines like this if you want to EExec both sides of a
# pipe.  Sorry.
# E.g.:
#EExec man -k "$@" \
#    | EExec egrep -e "$regexp"
#
# This way, each EExec doesn't see the rest of the command line and get
# confuzed.
#
# You can set:
# EExecEcho           A command to echo command being executed, def "".
# EExecErrorReporter  A command to report errors, def 'EExecDefErrorReporter'.
# EExecEchoPrefixG    A prefix to print before all output.
# EExecContinue       Non-empty --> continue after errors, def "".
# EExecRCFile         A file in which to accumulate error msgs, def "".
# EExecShowOnly       Don't run commands, just show 'em.
# EExecShowPrefix     What EExecShowOnly prefixes lines with.
# EExecShowCommand    What EExecShowOnly prints lines with.
#
# You can call:
# EEdie text          Print current value of $?, report text and exit $?.
# EExecDashN          Set EExecShowOnly and EExecShowPrefix.
# EExecVerbose        Set up standard verbosity.
# EExecQuiet          Turn off verbosity.
# EExec_verbose_func  Function to display EExec_verbose_msg messages.
#
# You can reference:
# EExecDash[NVQ]_opt  Contain the corresponding -n, -v or -q if they've been used.
#                     snippet: $EExecDashN_opt $EExecDashV_opt $EExecDashQ_opt


# MUST be set before sourcing or this will NOT work.
# On by default. Call EExecNoExport to disable exportation.
: ${EExecExporter:=export}
# as of: 2014-12-04T18:12:50, use ${EExec} (NO quotes) vs EExec
${EExecExporter} EExec="EExec"
${EExecExporter} EExecShowCommand=EExecStderrEcho
${EExecExporter} EExecShowPrefix=""
${EExecExporter} EExecEcho=""
${EExecExporter} EExecEchoPrefixG="+"
${EExecExporter} EExec_loaded_p=t
${EExecExporter} EExecAmpersand='&'
${EExecExporter} EExecShowOnly=
${EExecExporter} EExecErrorReporter=
${EExecExporter} EExec_verbose_func=
${EExecExporter} EExecContinue=
${EExecExporter} EExecDashN_opt=
${EExecExporter} EExecDashV_opt=
${EExecExporter} EExecDash_opts=

EExec_parse_usage="-n) Show what would happen but don't do it. [eexec]
-v) Be verbose about it. [eexec]
-q) Anti-verbose. [eexec]"

EExec_parse_option_str="nvq"

#
# This is a terrible hack, only working in precise circumstances, but is
# surprisingly useful nonetheless.
# Use it like this:
#e.g. eexec_program=$(EExec_parse "$@")
#e.g. for op in $eexec_program
#e.g. do
#e.g.   $op
#e.g.   shift
#e.g. done

EExec_parse()
{
    local prog=""
    # Can NOT use getopt here because if you use ganged variables then
    # too many args will be shifted.
    # Until I learn how to return a *properly quoted* "$@"
    for i in "$@"
    do
      case "$1" in
          -n|--eexec-n) prog="${prog}EExecDashN ";;
          -nk|--nk|--eexec-nk|--eexec-neko) prog="${prog}EExecDashN_k ";;
          -v|--eexec-v) prog="${prog}EExecVerbose ";;
          -vk|--vk|--eexec-vk) prog="${prog}EExecVerbose_k ";;
          -q|--eexec-q) prog="${prog}EExecQuiet ";;
          --eexec-last-option|--eexec--) shift; break;;
          --) prog="${prog}EExecNOP"; break;; # Allow user to consume a --
          *) break;;
      esac
      shift
    done
    echo "$prog"
}

EExec_tee()
{
    # Simply cat if -n is in effect.
    local out_file="${1}"
    shift

    if EExecDashN_p
    then
        cat
    else
        vunsetp "$*" && set -- tee
        prog="${1}"
        shift
        "${prog}" "${log_file}" "$@"
    fi
}
        
# Provide a little helper than removes the need to run the annoying
# eexec_program everywhere. We return the number of ops consumed and the
# caller can just shift that many times.
EExec_parse_n()
{
    local prog=$(EExec_parse "$@")
    local n=0
    for op in $prog
    do
      "$op"
      shift
      ((++n))
    done
    echo $n
}

EExecNOP()
{
    :
}

EExecExport()
{
    export EExecExporter="export"
}

EExecNoExport()
{
    export EExecExporter=""
}

EExecDashN()
{
    if [ "${1-}" == "-k" ]
    then
#	${EExecExporter} EExecEcho=EExecStandardErr_eko
        EExecVerbose_k
        shift
    else
        EExecVerbose
    fi
    ${EExecExporter} EExecAmpersand=
    ${EExecExporter} EExecShowOnly=y
    ${EExecExporter} EExecShowPrefix="$@"
    ${EExecExporter} EExecEchoPrefixG='-'
    # Use this to propagate -n'ed-ness.
    ${EExecExporter} EExecDashN_opt="-n"
    ${EExecExporter} EExecDash_opts="$EExecDash_opts $EExecDashN_opt"

}

EExecDashN_k()
{
    EExecDashN -k "$@"
}

EExecDashN_p()
{
    [ -n "${EExecDashN_opt-}" -o -n "${DP_GLOBAL_DASH_P-}" ]
}

EExecDashV_p()
{
    [ -n "$EExecDashV_opt" ]
}

# Should be named something like EExecSetVerbose (EExec_set_verbose)
EExecVerbose()
{
    if [ -z "${1-}" ]
    then
	EExec_verbose_func=EExecStderrEcho
    elif [ "${1}" = -k ]
    then
        EExec_verbose_func=EExecStandardErr_eko
        shift
    else
	EExec_verbose_func="$1"
        shift
    fi
    EExecEcho="$EExec_verbose_func"
    # Use this to propagate -n ed ness.
    ${EExecExporter} EExecDashV_opt="-v"
    ${EExecExporter} EExecDash_opts="$EExecDash_opts $EExecDashV_opt"
}

EExecVerbose_k()
{
    EExecVerbose -k "$@"
}

EExecDashV()
{
    EExecVerbose "$@"
}

EExecVerbose_p()
{
    EExecDashV_p
}

EExec_verbose_msg()
{
    local old=${EExecEchoPrefix-}
    local pname="${progname-some_prog}:"
    [ "${1-}" = "-P" ] && pname=
    EExecEchoPrefix=v
    [ -n "$EExec_verbose_func" ] && "$EExec_verbose_func" "${pname}" "$@"
    EExecEchoPrefix=$old
}

EExec_verbose_echo()
{
    EExec_verbose_msg "$@"
}

EExec_verbose_echo_id()
{
    local prefix=
    local suffix=
    local sep=
    local sep2='
==== '
    #echo 1>&2 "#>$#<"
    while (($# > 0))
    do
      #echo 1>&2 "ONE>$1<"
      case "$1" in
          --prefix|--msg) shift; prefix="${1}";;
          --suffix) shift; suffix="${1}";;
          --sep) shift; sep2="${1}";;
          --sep-nl|--sep-newline) sep2='
';;
          --) shift; break;;
          *) break;;
      esac
      shift
      #echo 1>&2 "@>$@<"
    done
    local msg=
    for m in "$@"
    do
      # echo 1>&2 "m>$m<"
      # echo 1>&2 "B: msg>$msg<"
      msg="${msg}${sep}$(echo_id $m)"
      # echo 1>&2 "A: msg>$msg<"
      sep="${sep2}"
    done
    EExec_verbose_msg "$prefix$msg$suffix"
}

EExecQuiet()
{
    EExecEcho=
    ${EExecExporter} EExecDashQ_opt="-q"
}


EExecDefErrorReporter()
{
    rc=$1
    shift
    eMsg="$EExecProgName(EExec): ERROR: `date`, rc: $rc
\`$*' failed ${EExecMsg-}"
    echo "$eMsg" 1>&2
    [ -n "${EExecRCFile-}" ] && echo "$eMsg" >> $EExecRCFile
    ## Just report the news, don't make it. [ -z "${EExecContinue-}" ] && exit $rc
    return $rc
}

EExecStderrEcho()
{
    #local echo_op="${1-echo}"
    #local ep=${EExecEchoPrefix-$EExecEchoPrefixG}
    #echo ">$EExecEchoPrefix<" 1>&2
    #echo echo "{$EExecEchoPrefix}$*" '1>&2' 1>&2
    echo "{$EExecEchoPrefix}""$@" 1>&2
}

EExecStandardErr_eko()
{
    eko "{$EExecEchoPrefix}""$@" 1>&2
}

EExecStdoutStderrEcho()
{
    EExecStdout Echo "$*"
    EExecStderrEcho "$*"
}

# die with status passed in
EEdie0()
{
    rc=$1
    shift
    EExecDefErrorReporter $rc $*
    exit $rc
}

# die with status from last command
EEdie()
{
    rc=$?
    EEdie0 $rc "$@"
}

eexecClrDie()
{
    true
}

EExec_start()
{
    echo "$@" | bash -l
}

EExec_start_tcsh()
{
    echo "$@" | tcsh -l
}

EExec_background()
{
    "$@" &
}

EExec()
{
    # @todo XXX Is it worth it to do a full getopt?
    # Only of argv[1] has a leading `-'?
    local i
    local eexecEcho="${EExecEcho}"
    local eexecShowOnly="${EExecShowOnly}"
    local eexecShowPrefix="${EExecShowPrefix}"
    local eexecContinue="${EExecContinue}"
    local eexecErrorReporter="${EExecErrorReporter}"
    local fake_success_p=
    local executor=
    local make_command_p=
    local command_file_name=
    local command_cd_cmd=
    ${EExecExporter} EExecEchoPrefix=$EExecEchoPrefixG
    for i in "$@"
    do
      case "$1" in
          -n|--just-show) eexecShowOnly=y
              eexecShowPrefix="+"
              eexecEcho=${EExecEcho-EExecStderrEcho}
              ;;
          --eko) eexecShowOnly=y
              eexecShowPrefix="+"
              eexecEcho=EExecStandardErr_eko
              ;;
          -v|--verbose) EExecVerbose;;
          -|--verbose-k) EExecVerbose_k;;
          -c|-k|--keep-going|--no-exit|--error-ok|--ignore-errors) eexecContinue=t
              ;;
          -C|-0|--fake-success|--return-zero|--rose) eexecContinue=t
              fake_success_p=y
              ;;
          --no-errors|--ne|--no-exit|--no-exit-on-error|--nx) eexecErrorReporter=; 
              eexecContinue=t;;
          -y|--execute-anyway|--ignore-dash-n|--show) eexecShowOnly=""
              eexecShowPrefix=""
              ${EExecExporter} EExecEchoPrefix="y"
              ;;
          -q|--quiet-errors) eexecErrorReporter=;;
          -x|--executor|--execute-with) shift; executor="$1";;
          -b|--bg|--background) executor=EExec_background;;
          --make-cmd|--sh) make_command_p=t;;
          --make-cmd:|--sh:) shift; command_file_name="${1}"
                             make_command_p=t;;
          --cmd-cd|--sh-cd) command_cd_cmd="cd $PWD";;
          --cmd-cd:|--sh-cd:) shift; command_cd_cmd="${1}";;
          -tcsh) executor=EExec_start_tcsh
                 ;;
          -*) EEdie0 1 "Bad option passed to EExec()"
                 ;;
         *) break;;
      esac
      shift
    done
    # To reduce the number of:
    # [ -n "$cmd" ] && EExec $cmd
    # incantations
    (($# == 1)) && vunsetp "${1}" && {
        return 0
    }


    # This should probably be initially predicated on EExecDashN_p, then
    # overridable via make_command_p, but it's convenient to be able to drop
    # the individual indexing scripts.
    true_p "${make_command_p}" && {
        vunsetp "${command_file_name}" && {
            command_file_name=$(basename "$1")-eexec.sh
        }
        echo "#!/bin/sh
$command_cd_cmd
$@" >| "${command_file_name}"
        chmod +x "${command_file_name}"
    }
        
    # $eexecEcho is a command to do our echoing
    [ -n "$eexecEcho" ] && "$eexecEcho" "${eexecShowPrefix}""$@"
    # run the command
    if [ -z "$eexecShowOnly" ]
    then
	$executor "$@" || {
	    rc=$?
            if [ -z "$fake_success_p" ]
            then
                [ -n "$eexecErrorReporter" ] && {
                    "$eexecErrorReporter" $rc "$@"
                }
                [ -z "$eexecContinue" ] && exit $rc
            else
                rc=0
            fi
	    return $rc
	}
    elif [ -z "$eexecEcho" ]
    then
	#echo "$@"
	$EExecShowCommand "${eexecShowPrefix}$@"
    fi
    return 0
}

[ -z "$EExecErrorReporter" ] && {
    ${EExecExporter} EExecErrorReporter=EExecDefErrorReporter
}

#
# preserve historical program name if present,
# otherwise set up a default
#
if [ -n "${prog=}" ]
then
    ${EExecExporter} EExecProgName="$prog"
elif [ -n "$progname" ]
then
    ${EExecExporter} EExecProgName="$progname"
elif [ -z "$EExecProgName" ]
then
    ${EExecExporter} EExecProgName="$0"
fi
