#!/usr/bin/env bash
#set -x
#eko "$@"
dog_name="Paw-Prints (RIP)"
parent_name="Outis"
punct='.'
num=1

dog_names="Daisy Paw-Prints Bud Atlas Tucker Key"

# Usage variable usage:
Usage_args_info=" Usage_args_info"
Usage_synopsis="Usage_synopsis: Have a dog say hi. /"
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="${EExec_parse_usage}
-- Lazily left blank --
"
# Example of arg parsing.
option_str="xdpbastkN:o:m"
long_options=(
    "silent"
    "repeat:"
    "dog-names"
    "d1:"
    "d2:"
    "d3:"
    "d4:"
    "d5:"
    "d6:"
    "dc:"
)
source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      -x) set -x;;
      -d) dog_name="Daisy";;
      -p) dog_name="Paw-Prints";;
      -b) dog_name="Bud";;
      -a) dog_name="Atlas";;
      -t) dog_name="Tucker";;
      -k) dog_name="Key";;
      -o) shift; parent_name="${1}";;
      -m) dog_name="Elsie, a Spherical Cow";;
      # pick a dog's name from a list
      # Or
      # Input a dog's name.
      -N) shift; dog_name="-N/${1}";;
      --d1) shift; dog_name="--d1/${1}";;
      --d2) shift; dog_name="--d2/${1}";;
      --d3) shift; dog_name="--d3/${1}";;
      --d4) shift; dog_name="--d4/${1}";;
      --d5) shift; dog_name="--d5/${1}";;
      --d6) shift; dog_name="--d6/${1}";;
      --dc) shift; dog_name="--d7/${1}";;
      --silent) punct='.';;
      quietly) punct=".";;
      loudly) punct='!!!';;
      --repeat) num=$(echo "$1" | sed -rn 's/(--repeat=)([0-9]+)(.*)/\2/p');;
      --dog-names) echo "${dog_names}"; exit 0;;
      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
  esac
  shift
done

## ?? WTF?  Eat the --?  But it's already et.
while (($# >0))
do
    echo "1>$1<"
    case "$1" in
	--) shift; break;;
	*) break;;
    esac
    shift
done

echo "Sync up _henlo"
while ((--num >= 0))
do
    echo "Henlo frens, my name is ${dog_name}${punct} ${parent_name} is my parent."
done

set +x
