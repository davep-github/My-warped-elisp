#!/bin/sh
source script-x
progname="$(basename $0)"
source eexec
set -u

eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done
unset eexec_program

timestamp=$(dp-std-timestamp)

# Use my teeker program which saves stdin into a file like tee, but simply
# ticks off chars to stdout using tikker. Makes for a lot less output but
# gives feedback that something is happening.
teekerer()
{
    EExec -y teeker $teeker_opts "$@"
}

teekerer_sample()
{
    EExec -y teeker -s -i $teeker_interval "$@"
}

teeer()
{
    EExecDashN_p && {
        set -- /dev/null
    }
    EExec -y tee "$@"
}

tee_cat()
{
    # Ignore arguments.
    cat
}

: ${save_args_p=t}
: ${one_by_one_p=}
: ${p4_sync_dash_n=}
: ${p4_sync_dash_f=}
: ${send_mail_on_completion_p:=t}
: ${tee_append_opt=}
: ${cd_to="."}
: ${keep_logs_p=}

tee_func=teekerer_sample
teeker_opts=
teeker_interval=100
std_options=""
option_str="nvqtsk:i:fN1oc."
long_options=("teeker-opts:" "tee-func:" "teeker-interval:"
    "p4-sync-dash-n" "p4-sync-n" "4n" "p4n" "p4-n"
    "sample" "tee" "teeker" "cat"
    "one-by-one"
    "mail" "notify-on-completion" "email-on-completion" "yopp" "send-mail"
    "no-log-file"
    "no-save-args"
    "stay-put" "no-cd" "dot" "."
    "cd:" 
    "top" "tot" "ap"
    "root" "cd-root" "sb-root"
    "keep-logs"
)

source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  shift; $OPTION_ARG=$1;; to process options with arguments.
  case $1 in
      -n) EXEC=echo; EExecDashN; tee_func=teeer;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;
      -c|--cat) tee_func=tee_cat;;
      -t|--tee) tee_func=teeer;;
      -k|--teeker-opts) shift; teeker_opts="$1";;
      -i|--teeker-interval) shift; teeker_interval="$1";;
      -.|--stay-put|--no-cd|--dot) cd_to=".";;
      --keep-logs) keep_logs_p=t;;  # Even if -n
      --cd) shift; cd_to=$(me-expand-dest "${1}") || cd_to="${1}";;
      --root|--cd-root|--sb-root) cd_to=$(me-expand-dest "/") || exit 11;;
      --top|--tot|--ap) cd_to=$(me-expand-dest tot) || exit 12;;
      -f) p4_sync_dash_f="-f";;
      -N|--p4-sync-dash-n|--4n|--p4n|--p4-n) p4_sync_dash_n=-n;;
      -1|-o|--no-log-file) kwa_log_file=/dev/null; 
                           tee_func=teeer;; # stdout is fd[1] and stdOut.
      --no-save-args) save_args_p=;;
      --one-by-one) one_by_one_p=t;;
      --tee-func) shift; tee_func="$1";;
      --sample) tee_func=teekerer_sample;;
      --teeker) tee_func=teekerer;;
      --mail|--notify-on-completion|--email-on-completion|--yopp|--send-mail) 
                  send_mail_on_completion_p=t;;
      --) shift ; break ;;
      *) 
      echo 1>&2 "Unsupported option>$1<";
      Usage
      exit 1 ;;
    esac
    shift
done

# Command line argument implies we're sync'ing a subset so stay where we are.
vsetp "$*" && {
    cd_to="."
}

if vunsetp "${cd_to}"
then
    # With multiple trees, it makes more sense to simply move up to the
    # closest .p4config.
    p4config=$(find-up ".p4config")
    if [ "$?" != 0 ] || vunsetp "${p4config}"
    then
        echo_id p4config
        echo "Cannot find p4 config file."
        exit 1
    fi 1>&2
    p4config_dir=$(dirname "${p4config}")
    EExec -y cd "${p4config_dir}"
    echo_id PWD
else
    EExec -y cd "${cd_to}"
    EExec_verbose_echo_id cd_to PWD
fi

: ${sandbox_root:=$(dp4-get-root)}
: ${kwa_log_root:=${sandbox_root}/${progname}-log.d}
: ${kwa_log_base:=}
echo_id kwa_log_root

vunsetp "${kwa_log_base}" && {
    echo "Parameters>$@<@"
    EExec_verbose_echo_id PWD
    rel_dir=$(dp4-relative-dir "${PWD}")
    : ${rel_dir:=$(basename "${PWD}")}
    EExec_verbose_echo_id rel_dir
    kwa_log_base=$(namify-path -c % $(normpath -c "${rel_dir}"))
}
echo_id kwa_log_base
: ${kwa_log_dir:=${kwa_log_root}/${kwa_log_base}-${timestamp}.d}

echo_id kwa_log_dir

if vunsetp "$*"
then
    suffix=""
else
    suffix=-$(namify-path $(normpath -c "$@"))
fi
echo_id suffix

: ${kwa_log_file_name:="${progname}${suffix}.out"}

EExec -y mkdir -p "${kwa_log_dir}"
EExec_verbose_msg "Sync'ing in >$(pwd)<"
EExec_verbose_msg p4 command: p4 sync ${p4_sync_dash_n} ${p4_sync_dash_f} "$@"

#kwa_log_file_name=$(basename "${PWD}" )-"${kwa_log_file_name}"
kwa_log_file="${kwa_log_dir}/${kwa_log_file_name}"
echo_id kwa_log_file

{
    save_args_file="${kwa_log_dir}/dp4-sync.args"
    # print log name before and after in case it is a long sync.
    [ -n "$save_args_p" ] && {
        echo_id save_args_file
        echo "p4 sync args:
$@" >| "${save_args_file}"
    }
    if true_p "${one_by_one_p}"
    then
        for d in "$@"
        do
          EExec p4 sync ${p4_sync_dash_n} ${p4_sync_dash_f} "${dir}"
        done
    else
        EExec p4 sync ${p4_sync_dash_n} ${p4_sync_dash_f} "$@"
    fi
    
} 2>&1 | EExec -y $tee_func "${kwa_log_file}"

# Show resolve status.
{
    # Let me know if anything needs merging. -n --> just show problems.
    echo
    EExecDashN_p || {
        files_to_resolve=$(p4 resolve -n) || {
            echo "$progname: p4 resolve failed."
            exit 1
        } 1>&2
        # p4 resolve's message about no files to resolve goes to stderr.
        vsetp "${files_to_resolve}" && {
            echo "******* There are files to resolve *******"
            echo "******* output from p4 resolve -n  *******"
        # $() converts newlines to spaces.
            for ftr in ${files_to_resolve}
              do
              echo "${ftr}"
            done
            echo "These files must be resolved with the p4 resolve command."
            echo "*******"
        }
    }

} 2>&1 | EExec -y tee -a "${kwa_log_file}"

echo "log dir>${kwa_log_dir}<"

vunsetp "${keep_logs_p}" && EExecDashN_p && {
    echo "EExecDashN_p is true, deleting log dir."
    EExec -y rm -rf "${kwa_log_dir}"
} 1>&2

EExec dp4-sync-post-processor

vsetp "${send_mail_on_completion_p-}" && ! EExecDashN_p && ! vsetp "${p4_sync_dash_n}" && {
    EExec_verbose_msg "YOPP!ing."
    email-yopp 
}

exit
