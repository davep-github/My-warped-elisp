#!/bin/sh
source script-x
source eexec
set -u
progname="$(basename $0)"

# Should always symlink this to the proper/current test file.
default_command=./rerun-test.sh

#
# Motivation/initial requirement.
#
# E.g. run a test until failure (run while success)
# egrep -q TEST_SUCCEEDED <status-files...>
# if TEST_SUCCEEDED is present, rc = 0
# if 1 == 0
#   exit 0
# fi
#

interrupt_status=
exit_how()
{
    interrupt_status="Interrupted."
    while :
    do
      read -p "Exit now [q], after the next loop [n] or continue [c]? "
      case "$REPLY" in
          [Qq]) {
                   echo
                   echo "Immediate exit requested"
                   interrupt_status="Interrupt: Immediate exit."
                   exit 2
                };;
          [Nn]) run_p=;
                interrupt_status="Interrupt: Complete current iteration.";
                break
                ;;
          [Cc]) break;;

          *) echo "Unsupported response>$REPLY<";;
      esac
    done 1>&2
}

trap exit_how 2

user_pattern_files=

# Usage variable usage:
Usage_args_info=""
Usage_synopsis="Run tests until desired results.
"
Usage_details="${EExec_parse_usage}
"
# Example of arg parsing.
long_options=("command:"
    "pattern:"
    "pattern-files:"
    "log-file-base:"
    "grepper:"
    "grepper-args:"
    "ticker:"
    "ticker-args:"
    "loop-end-condition:"
    "max-loops:"
    "max-matches:"
    "loop-delay:"
    "log-file:"
    "log-dir:"
    "keep-logs"
    "save-pattern-files"
    "rm-pattern-files"
    "keep-nothing"
    "match" "present" "found"
    "nomatch" "missing" "not-found")
option_str="nvq"
source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      --command) shift; command=$1;;
      --pattern) shift; pattern=$1;;
      --pattern-files) shift; user_pattern_files=($user_pattern_files $1);;
      --log-file-base) shift; log_file_base=$1;;
      --grepper) shift; grepper=$1;;
      --grepper-args) shift; grepper_args=$1;;
      --ticker) shift; ticker=$1;;
      --ticker-args) shift; ticker_args=$1;;
      --loop-end-condition) shift; loop_end_condition=$1;;
      --max-loops) shift; max_loops=$1;;
      --max-matches) shift; max_matches=$1;;
      --loop-delay) shift; loop_delay=$1;;
      --log-file) shift; user_log_file=$1;;
      --log-dir) shift; user_log_dir=$1;;
      --no-keep-logs) keep_logs_p=;;
      --no-save-pattern-files) save_pattern_files_p=;;
      --no-rm-pattern-files) rm_pattern_files_p=;;
      --keep-nothing) keep_nothing_p=t;;
      --match|--present|--found) end_condition_p=end_condition_0_p;;
      --nomatch|--missing|--not-found) end_condition_p=end_condition_non_0_p;;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done

: ${command=}
: ${commands:=${command:=${default_command}}}
: ${pattern:=TEST_SUCCEEDED}
: ${pattern_files=${user_pattern_files:="trep.txt"}}
: ${log_file_base:=last-log-file}
: ${grepper:=egrep}
: ${grepper_args=-q}
: ${ticker:=ticker_teeker_sample}
: ${ticker_args:=-s}            # Sample
: ${loop_end_condition:=loop_end_condition_grep}
: ${max_loops=-1}
: ${keep_logs_p=t}
: ${save_pattern_files_p=t}
: ${rm_pattern_files_p=t}       # e.g. trep.txt is appended to.
: ${keep_nothing_p=}
: ${loop_delay=10s}
# Exit after reporting this many successes. Use `-', "" or something < 0 to get
# all possible matches.
: ${max_matches=1}
: ${user_log_file=}
: ${user_log_dir=}
: ${log_root=run-until-status.d}
: ${log_dir=${user_log_dir}}
: ${end_condition_p:=end_condition_non_0_p}

[ -n "$user_log_file" ] && {
    log_dir="$(dirname $user_log_file)"
}

[ -z "$log_dir" ] && {
    log_dir="$log_root/$(dp-std-timestamp)"
}

log_dir=$(normpath "$log_dir")
mkdir -p "$log_dir"

#
# "Passing a test" can mean either a file containing a particular string or
# not.
# E.g. I can run until the run status is not "TEST_SUCCEEDED" if chasing down
# an intermittent failure, or wait *for* success (TEST_SUCCEEDED) or for a
# particular fail mode, say, SIM_FAIL.

end_condition_0_p()
{
    (($1 == 0))
}

end_condition_non_0_p()
{
    (($1 != 0))
}

[ -n "$keep_nothing_p" ] && {
    keep_logs_p=
    save_pattern_files_p=
}

wrapup()
{
    local indent=""
    [ -n "${1-}" ] && {
        echo "Wrapup: $1"
        indent="  "
    }
    shift
    [ -n "$interrupt_status" ] && {
        echo "${indent}interrupt_status>$interrupt_status<"
    }
    echo "${indent}Num matches: $num_matches"
    echo "${indent}Loop count: $loop_count"
    echo "${indent}last log file>${current_log_file}<"
    echo "${indent}pattern>$pattern<"
    echo "${indent}Pattern file(s): $@"
}

loop_end_condition_grep()
{
  $grepper $grepper_args $pattern "$@"
}

ticker_silent()
{
    cat > /dev/null
}

ticker_cat_overwrite()
{
    local log_file=${1}; shift
    cat >| "$log_file"
}

ticker_cat_append()
{
    local log_file=${1}; shift
    cat >> "$log_file"
}

ticker_teeker_sample()
{
    local log_file=${1}; shift
    teeker -s "$log_file"
}

ticker_teeker_dots()
{
    local log_file=${1}; shift
    teeker -c. "$log_file"
}

ticker_teeker()
{
    local log_file=${1}; shift
    teeker ${ticker_args} "$log_file"
}

[ -z "$commands" ]  && {
    echo "One or more command names are needed."
    exit 1
} 1>&2

[ -z "$pattern" ] && {
    echo "A success/fail pattern is needed."
    exit 1
} 1>&2

loop_count=0
run_p=t

# Allow a user specified log file to be used.
num_matches=0
want_all_matches_p=
# - or < 0 --> All matches. The max possible matches is max_loops.
# num_matches can never reach (max_loops + 1) before the loop exits.
[ "$max_matches" = "-"  -o  -z "$max_matches" -o $max_matches -lt 0 ] && {
    max_matches=$((max_loops + 1))
    want_all_matches_p=t
}

infinite_loop_p=
[ "$max_loops" = "-" -o  -z "$max_loops" -o $max_loops -lt 0 ] && {
    infinite_loop_p=t
    echo "Looping TTCCH."
}

while [ -n "$run_p" -a \( -n "$infinite_loop_p"  -o $loop_count -lt $max_loops \) ]
do
  # We may as well use the loop_count even if we're not saving them.
  # Removes the need for conditional code and keeps loop_count info available
  # in the case of a crash.
  current_log_file=${user_log_file-}
  [ -z "$current_log_file" ] && {
      current_log_dir="${log_dir}/${loop_count}"
      EExec -y mkdir -p "${current_log_dir}"
      current_log_file="${current_log_dir}/log"
  }
  # This will also tell us the iteration.
  echo "Logging run to $current_log_file"

  # This is the log file of the current run's output.
  # The end condition data will not necessarily be in the log files.
  for command in $commands
  do
    EExec_verbose_msg "command>$command<"
    EExec_verbose_msg "ticker>$ticker<"

    # Let the command know the pattern files we want to use. This allows the
    # command to use that or those files. This allows us to specify the file
    # the command will use by using the --pattern-files option.
    EExec $command "$@" --run-until-status-pattern-files "${pattern_files}" 2>&1 \
         | EExec $ticker "$current_log_file"

    # Examine the pattern files one at a time.
    for pattern_file in "${pattern_files[@]}"
      do
      EExec_verbose_msg "pattern_file>$pattern_file<"

      if ! [ -e "$pattern_file" ]
      then
          echo 1>&2 -n "Skipping missing pattern file>$pattern_file<."
          echo 1>&2 " It may not exist yet, which is OK."
      else
          EExec $loop_end_condition "$pattern_file"
          rc=$?

          if $end_condition_p $rc
          then
              ((++num_matches))
              wrapup "${num_matches} of ${max_matches} end conditions met" \
                "$pattern_file of ${pattern_files[@]}"
              ((num_matches > 0)) && ((num_matches >= max_matches)) && {
                  echo
                  echo "All end conditions met. Exiting."
                  exit 0
              }
          fi
          # All related files have the same suffix.
          [ -n "${save_pattern_files_p}" ] && {
              # Use loop_count in case the user has specified a log file to
              # prevent files being overwritten.
              EExec cp $pattern_file $current_log_dir/$pattern_file.$loop_count
          }
      fi
    done
    [ -z "${keep_logs_p}" ] && EExec rm -f "${current_log_file}"
    [ -n "${rm_pattern_files_p}" ] && {
        rm -f "${pattern_files[@]}"
    }
    [ -n "${loop_delay}" ] && {
        EExec_verbose_msg "sleeping for $loop_delay"
        EExec -c -y sleep "${loop_delay}"
        EExec_verbose_msg "done sleeping."
    }
  done
  ((++loop_count))

  # Test detection logic
  #{
  #    echo 1>&2 "Forcing match for next iteration."
  #    echo "$pattern" >> "${pattern_files[0]}"
  #}
done

exit_reason=
if [ -z "$run_p" ]
then
    exit_reason="Loop cancelled."
elif ((num_matches == 0))
then
    exit_reason="Loop max reached: End condition never found."
elif [ -n "$want_all_matches_p" ]
then
    exit_reason="Looking for ALL matches (not an error)"
elif ((num_matches < max_matches))
then
    exit_reason="Loop max reached: End conditions, $num_matches of $max_matches"
else
    # There should be no unknown reason for exiting the loop.
    exit_reason="Unknown. Fix me."
fi
wrapup "$exit_reason" "${pattern_files[@]}"

exit 1
