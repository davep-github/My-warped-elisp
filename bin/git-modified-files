#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
#unset eexec_program
export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################

#echo "@>$@<"
optv=()
filter_mode_p=
S=-s
status_opts=
type=()
UOPT=
UNO=
#echo_id type
while (($# > 0))
do
  EExec_verbose_msg "1>${1}<"
  case "${1}" in
      -p|--filter) filter_mode_p=t;;
      --added|-a|--new) type+=("A");;
      -m|--modified|--changed) type+=("M");;
      --untracked|-ut) type+=('\?\?');;
      --type|-t) shift; type+=("${1}");;
      --) shift; break;;
      *) optv+=("${1}");;
  esac
  shift
done

#echo_id type
: ${type:=M}
#echo_id type

args=("$@")

if (("${#type[@]}" > 0))
then
    type=$(add-to-path-like.py -s\| "${type[@]}")
else
    type=
fi

if (("${#optv[@]}" > 0))
then
    set -- "${optv[@]}"
else
    : set --
fi

(("${#args[@]}" > 0)) && set -- "${args[@]}"
EExec_verbose_msg "0: @>$@<@"

# Make testing an option
if false && [ -n "${simple_test-}" ]  && (("${#args[@]}" > 0))
then
    # very simple testing.
    for a in "${args[@]}"
    do
      echo "$a"
    done
elif true_p "${filter_mode_p}"
then
    cat
else
    EExec_verbose_msg "1: @>$@<@"
    # short status and skip untracked files.
    EExec git status -s ${UNO} ${status_opts}
    EExec_verbose_msg "1: @>$@<@"
fi \
    | EExec sed -rn "s/(^[[:space:]]*${type}[[:space:]]+)(.*)$/\2/p" \
    | EExec file-relativizer "$@" \
    | EExec normpath
