#!/usr/bin/env perl

$rc = 1;
$func_name = "";                # This will use -X to get args, too.
$cmd = 0;
$cmd_args = "";
$num_to_print = -1;
$num_to_skip = 0;
$capture_output_p = 1;
$sudo = "";
$look_in_cwd = 0;
$files_only_p = 1;
$quiet_p = 0;                   # Just return status.
$debug_level = 0;

sub usage {
    printf("usage: sp [-{0-9}+] [-l[l]] [-r] [-L] [-S] [-X cmd [args]] [-x cmd] file...\n");
    exit(0);
}

sub echo {
  printf("echo: @_\n");
}

if (! @ARGV) {
    usage();
}

while (($opt, $opt_arg) = ($ARGV[0] =~ /^-(\S)(\S*)/)) {
  #printf("opt>$opt<, opt_arg>$opt_arg<\n");
  if ($opt eq "n" || $opt =~ /^\d+/) {
    if ($opt =~ /^[0-9]+/) {
      $num_to_print = $opt;
    } elsif ($opt_arg) {
      $num_to_print = $opt_arg;
    } else {
      $num_to_print = $ARGV[1];
      shift(@ARGV);
    }
  } elsif ($opt eq "s" || $opt eq "N") {
    printf("opt>$opt<, opt_arg>$opt_arg<\n") if ($debug_level);
    if (! ($opt_arg eq "")) {
      $num_to_skip = $opt_arg;
    } else {
      $num_to_skip = $ARGV[1];
      shift(@ARGV);
    }
    $num_to_print = 1 if ($opt eq "N");
  } elsif ($opt eq "D") {
    if (! ($opt_arg eq "")) {
      $debug_level = $opt_arg;
    } else {
      $debug_level = $ARGV[1];
      shift(@ARGV);
    }
  } elsif ($opt eq "l") {
    $cmd = "ls";
    $cmd_args = "-l " if ($opt_arg eq "l");
  } elsif ($opt eq "r") {
    $cmd = "realpath";
  } elsif ($opt =~ /([X])([^ ]*)/) {
    #printf("0, X: opt>$opt<, cmd_args>$cmd_args<\n");
    if ($opt_arg) {
      $cmd_args = $opt_arg;
    } else {
      $cmd_args = $ARGV[1];
      #printf("1, X: opt>$opt<, cmd_args>$cmd_args<\n");
      shift(@ARGV);
    }
    $cmd_args = "$cmd_args";
  } elsif ($opt eq "x") {
    if ($opt_arg) {
      $cmd = $opt_arg;
    } else {
      $cmd=$ARGV[1];
      shift(@ARGV);
    }
  } elsif ($opt eq "f") {
    if ($opt_arg) {
      $func_name = $opt_arg;
    } else {
      $func_name = $ARGV[1];
      shift(@ARGV);
    }
  } elsif ($opt eq "v") {
    $cmd = "vim";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "F") {
    $files_only_p = 0;
    $capture_output_p = 0;
  } elsif ($opt eq "e") {
    $cmd = "ec";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "L") {
    $cmd = "less";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "g") {
    $func_name = "dogo";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "G") {
    $cmd = "gdb";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "d") {
    $cmd = "dirname";
    $num_to_print = 1;
    $capture_output_p = 0;
  } elsif ($opt eq "S") {
    $sudo = "sudo";
  } elsif ($opt eq ".") {
    unshift(@path, ".")
  } elsif ($opt eq "q") {
    $quiet_p = 1;
  }

  shift(@ARGV);
  #printf("2, LX: opt>$opt<, cmd_args>$cmd_args<\n");
  last if ($opt eq "-");
}

printf("cmd>$cmd<, cmd_args>$cmd_args<\n") if ($debug_level);
printf("func_name>$func_name<, cmd_args>$cmd_args<\n") if ($debug_level);
printf("num_to_skip>$num_to_skip<\n") if ($debug_level);
printf("num_to_print>$num_to_print<\n") if ($debug_level);

die "cmd_args given without a cmd or func-name.\n" if ($cmd_args && !$cmd && !$func_name);

$path = $ENV{'SP_PATH'} ? $ENV{'SP_PATH'} : $ENV{'PATH'};
foreach $pathEl (split(/:/, $path)) {
  chop($pathEl = `echo $pathEl`);
  push(@path, $pathEl);
}

foreach $arg (@ARGV) {
  $num_printed = 0;
  foreach $pathEl (@path) {
    last if ($num_to_print >=0) && ($num_printed >= $num_to_print);
    $targ="$pathEl/$arg";
    #print "0, targ>$targ<\n";
    @targlist = glob($targ);
    printf("targlist>%s<\n", join("\n", @targlist)) if ($debug_level > 2);
    foreach $targ (@targlist) {
      #print "1, targ>$targ<\n";
      next if ($files_only_p && -d $targ);
      if ($func_name) {
        #&echo($cmd_args);
        eval("&$func_name(\"real: \", \$cmd_args);");
      } elsif (-x $targ) {
        exit(0) if $quiet_p;
        if ($num_to_skip > 0) {
          --$num_to_skip;
          next;
        }
        ++$num_printed if $num_to_print >= 0;
        if ($cmd) {
          $qmd = sprintf("%s %s %s%s%s", $sudo, $cmd,
                         $cmd_args, ($cmd_args) ? " " : "", $targ);
          #printf("qmd>$qmd<\n");
	  $capture_output_p ? print `$qmd` : system $qmd;
        } else {
          print "$targ\n";
        }
	$rc = 0;
      }
    }
  }
}

exit($rc)
