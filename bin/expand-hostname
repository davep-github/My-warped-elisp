#!/bin/bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################


# XXX !<@todo Make this use host-info stuff.
(($# > 0)) || {
    echo "Usage: ${progname}: nickname

Convert nickname to a real hostname.
Mostly defunct, but still part of some scripts.
NB: Spruce it up, give hostname completion."
    exit 1
} 1>&2
host=$1
ohost=$1
case $host in
    *[bt][0-9][0-9]*)
	num=`echo $host | perl -n -e 'print /([bt]\d+)/;'`
	host=tncl${num}.la.platsol.com
	;;
    demo*)
	# of historical interest, only.
	num=`echo $host | cut -c 5-`
	host=tnc_demo${num}.bos.platsol.com
	;;
    work|vanu-ssh|vanu)
        host="sentinels.vanu.com"
        ;;
    '')
	host=$HOST
	;;
    *)
	host=`nick2host $host`
	if [[ -z "${host-}" ]]
	then
	    host=$ohost
	fi
	;;
esac

echo $host
exit 0
