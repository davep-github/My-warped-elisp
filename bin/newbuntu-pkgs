#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################

: ${files=}
: ${nopkgs=}

packages=(
ccache
chromium-browser
cscope
ctags
curl
diffuse
dump
figlet
firefox
g++
gcc
gcolor2
git
git-email
git-extras
git-gui
gitk
gparted
gpm
ipython
ipython-doc
libcurl4-openssl-dev
libncurses5
libncurses5-dbg
libncurses5-dev
libreoffice
libssl-dev
lsscsi
make
meld
mpd
msmtp
#mutt
ncurses-base
ncurses-bin
ncurses-doc
ncurses-examples
ncurses-hexedit
ncurses-term
nfs-common
openssh-server
openssl
pcregrep
rcs
realpath
screen
thunderbird
tree
vim
vnc4server
wmctrl
xclip
xorg-dev
xterm
)

something_was_installed=

EExec_verbose_msg "0: len(packages): ${#packages[@]}"
if [ -n "${nopkgs}" ]
then
    packages=()
fi

EExec_verbose_msg "1: len(packages): ${#packages[@]}"

num_pkgs="${#packages[@]}"
pkg_num=1

((num_pkgs > 0)) && {
    something_was_installed=t
    for p in ${packages[@]}
    do
      echo "Installing ${pkg_num} of ${num_pkgs}" > /tmp/newbubtu-pkgs

      EExec_verbose_msg "Installing ${pkg_num} of ${num_pkgs}"
      EExec sudo apt-get --assume-yes install "${p}"
      ((++pkg_num))
    done
}

install_from_stream()
{
    local pkg_num=0
    local num_pkgs="${1-???}"; shift

    while read
    do
      p="${REPLY}"
      EExec_verbose_msg "Installing ${pkg_num} of ${num_pkgs}"
      EExec sudo apt-get --assume-yes install "${p}"
      ((++pkg_num))
    done
}

# e.g.
# From a existing installation, list the packages explicitly installed:
# apt-mark showmanual > apt-mark.showmanual.out
# Reinstall [elsewhere].
# files=apt-mark.showmanual.out newbuntu-pkgs -v
if [ -n "${files}" ]
then
    something_was_installed=t
    for file in "${files}"
    do
      EExec_verbose_echo_id file
      num_pkgs="$(wc -l $file)"
      pkg_num=0
      cat "${file}" | install_from_stream "${num_pkgs}"
    done
fi

isatty >& /dev/null || {
    EExec_verbose_msg "tryin' stdin"
    install_from_stream "stdin"
}

echo 'Some suggestions, if I may so bold:
GUI grub customizer:
sudo add-apt-repository ppa:danielrichter2007/grub-customizer
sudo apt-get update
sagi grub-customizer
'
suck_me=$(readlink /bin/sh)
if [ "${suck_me}" = "dash" ]
then
    echo "FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!
FUCK DASH!!!"
fi
