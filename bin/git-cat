#!/bin/bash

########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
### PASS on args: unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# davep specific code -------------8><------------------

#mutually exclusive with real EExec# EExec=
#mutually exclusive with real EExec# no_exec_p=
#mutually exclusive with real EExec# Non_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{-} $@" 1>&2
#mutually exclusive with real EExec# }

#mutually exclusive with real EExec# Verbose_EExecer()
#mutually exclusive with real EExec# {
#mutually exclusive with real EExec#     echo "{+} $@"
#mutually exclusive with real EExec#     "$@"
#mutually exclusive with real EExec# }

trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################

git_cat()
{
    # git show eb8e6983cb0871dde0194f9768bf67d89c76d3ff:$(git rev-parse --git-dir)/dpu-mmap.c
    local commit="$1"; shift
    local file="$1"; shift
    EExec_verbose_echo_id commit
    EExec_verbose_echo_id file
    local grf=$(EExec git-relative-filename ${file})
    EExec_verbose_echo_id grf
    EExec git show "${commit}:${grf}"
}

nth=
commit="$1"; shift
EExec_verbose_echo_id commit
case "$commit" in
    -n*|-[0-9]*|--oldest|--original|--initial|--earliest) nth="${commit}"; commit=;;
    *);;
esac


[ -z "$*" ] && {
    echo 1>&2 "Usage: git-cat [commit|-n[0-9]+|-[0-9]+|--oldest|--original|--earliest] file+"
    exit 1
}
for f in "$@"
do
  if [ -n "$nth" ]
  then
      EExec_verbose_echo_id nth f
      if [ -n "${nth}" ]
      then
          commit=$(EExec git-nth-rev "$nth" "$f")
      fi
      EExec_verbose_echo_id commit
      [ -z "${commit}" ] && {
          echo "Cannot find commit for >${nth}<"
          exit 1
      } 2>& 1
  fi
#  echo_id2 commit
#  echo_id2 f
#  exit 99
  EExec -y git_cat "$commit" "$f"
done
