#!/bin/sh
set -x

echo "id: $(id)"
if [ "$(id -u)" != "0" ]; then
    echo "sudo-ing"
    sudo "$0" "$@"
    exit
fi

PATH="/home/davep/bin:/home/davep/yokel/bin/:/home/davep/yokel/sbin/:$PATH"
echo "just running."

echo "\$@>$@<"
#source sh-script-template.sh
source dp-getopt+.sh
echo "\$@>$@<"

newname()
{
    uname -r
}

main()
{
    [[ -e "$latest_name" ]] && {
        [[ -L "$latest_name" ]] || \
            EExecError 1 "latest_name>$latest_name< is not a symlink; bailing."
        EExec rm -f "$latest_name"
        [[ -e "$latest_name" ]] && \
            EExecError "Could not get rid of $latest_name;  bailing."
    }
    EExec ln -s $(newname) "$latest_name"
}

for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $prog: "; EExecVerbose;;
      # -d is really just verbosity
      -d) EExecVerbose; DEBUG="echo 1>&2 $prog: ";;
      # superseded by . script-x# -D) set -x;;
      --) shift ; break ;;
      *) 
      echo 1>&2 "Unsupported option>$1<";
      ##Usage
      ##exit 1
      ;;
    esac
    shift
done

# "$@" isn't guaranteed to be args until parsing options is complete.
# No options --> complete.
: ${latest_name:="$1"}
: ${latest_name:="latest"}      # Or current... I'm torn :-(

main "$@"
