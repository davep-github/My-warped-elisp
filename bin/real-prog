#!/usr/bin/env bash
########################################################################
#
# template begin.

# davep specific code -------------8><------------------
source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
trap_exit_msg=

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
}
# trap 'on_exit' 0

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${trap_exit_msg}"
    trap '' 0
}
# trap 'on_error' ERR

sig_exit ()
{
    {
        local sig_num=$1; shift
        echo
        echo "sig_exit, sig_num: $sig_num"
        exit 1
    } 1>&2
}

# for sig in 2 3 4 5 6 7 8 15
# do
#     trap "sig_exit $sig" $sig
# done

display_stderr()
{
    echo 1>&2 "$progname: $@"
}

status_msg()
{
    display_stderr "$@"
}

fatal_error()
{
    local error="${1}"
    shift
    display_stderr "$@"
    exit "${error}"
}

Usage_error()
{
    fatal_error 1 "$@"
}

#
# template end.
########################################################################

: ${filter_regexp:=$HOME}
: ${filter_fun:=egrep_filter}
: ${exec_p=}

# Usage variable usage:
Usage_args_info=" -[a] <progname>"
Usage_synopsis="Find the real <progname>.
Real is anyone who's name doesn't match the filter_regexp, def: ${filter_regexp}
Mainly for allowing augmented/frontend programs to call the real program."
# Using ) after the args makes copy & paste between here and the
# case statement easier.
Usage_details="${EExec_parse_usage}
-a|--any|--first) Do not filter name (e.g. find those in my bin)
{-f|--fre|--filter-regexp} <filter_regexp>) Ignore these matches, def: ${filter_regexp}.
"
# Example of arg parsing.
option_str="af:re"
long_options=(
    "any" "first"
    "filter_regexp:"
    "exec" "run"
)
source dp-getopt+.sh || exit 1
while (($# > 0))
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support: -n -v -q, etc. q.v. ~/bin/eexec
      # Done by EExec_parse and friends.

      # Program options.
      -f|--filter-regexp) shift; filter_regexp="${1}";;
      -a|--any|--first) filter_fun=cat_filter;;

      # Help!
      --help) Usage; exit 0;;
      --exec|-e|--run|-r) exec_p=t;;
      --) shift ; break ;;
      # getopt will barf about unknown options.
      # Here we barf about known options that we have forgotten to handle.
      *) echo 1>&2 "Unhandled option>$1<"
         exit 1;;
    esac
    shift
done
# The following is needed only when args are required.
[ "$*" = "" ] && Usage

egrep_filter()
{
    egrep -v -e "${filter_regexp}"
}

cat_filter()
{
    cat
}

EExec_verbose_echo_id filter_regexp
EExec_verbose_echo_id filter_fun
prog="${1}"
real_prog=$(sp "${prog}" | "${filter_fun}" | head -n 1)
EExec_verbose_echo_id real_prog
EExec_verbose_msg "@>$@<"
if [ -z "${real_prog}" ]
then
    false
else
    if [ -n "${exec_p}" ]
    then
        shift
        EExec exec "${real_prog}" "$@"
        EExecDashN_p || echo 1>&2 "HTF did I get here?"
        exit 13
    else
        echo "${real_prog}"
        true
    fi
fi
