#!/usr/bin/env bash
# $Id: jaz-bak,v 1.41 2005/09/25 07:12:28 davep Exp $

. script-x

argses="$*"

: ${COMPRESSION_OPT:=-j}
##: ${TAR_VERIFY_OPT:=--verify}
# verify is desirable, but things change -- legitimately -- during the backup
# and cause errors. If they were just warnings it'd be ok(ish)
: ${TAR_VERIFY_OPT:=}
: ${TAR_COMPRESSOR:=bzip2}
: ${TAR_OPTS:=-9}               # Goes with bzip2 and gzip.

# libranet's (and others' )default sudo defines SECURE_PATH and so our
# binaries are inaccessible.
if [[ "$PATH" != *yokel/sbin* ]]
then
    rcfile="$HOME/.bashrc"
    [ -f $rcfile ] && . $rcfile
fi

jaz_root="/jaz"
dst=
calendrical_dirs=
ECHO=
dump_level=0
do_pax=yes
do_dump=yes
do_config=yes
do_spool=yes
# /usr/local/private is where smb user info is saved on FreeBSD.
# since we want this to work in many environs, we can:
# 1) allow dirs to not exist, which is less safe
# 2) get a locale specific list of dirs, e.g. host-info
#
# FUCK FUCK FUCK
# I hate getting screwed by the fact that a symlink to a dir on the command
# line isn't followed unless there's a / after the name. I (think) I'd like a
# global way of saying to follow symlinks on the command line.
def_pax_dirs_x='/etc /usr/local/etc /root /usr/X11R6/etc /usr/local/private
/boot /var/lib/pkg /var/db/pkg /yokel /var/lib/portage /var/lib/iptables
/usr/share/config'


def_pax_dirs=
for d in $def_pax_dirs_x
do
  r=$(realpath $d)
  echo "$d --> $r"
  def_pax_dirs="$def_pax_dirs $r"
done

echo_id def_pax_dirs_x
echo_id def_pax_dirs

#exit 99
############def_dump_dirs='/yokel'
def_dump_dirs=
pax_dirs=
dump_dirs=
date_str=
excl_dir=
# FreeBSD and linux don't see eye-to-eye on /usr/local, so avoid the debate
# and use yokel.
jaz_dates="$HOME/yokel/etc/jaz-dates"
jaz_tag="jaz-bak"
DUMPER=dumpit
ARCHIVER=FATAL
ARCHIVE_NAME=NONE
just_show=

BUP_GROUP=backup
BUP_FILE_PERMS='g+rw'
BUP_DIR_PERMS='g+rwx'

PKGS=/var/db/pkg/
PKG_DB=pkg-db.tar

. eexec
EExecEcho="echo 1>&2"
# backup /usr/yokel to a pax file on /jaz

### for testing
### EExecShowOnly=y; cfg_file=/dev/tty;

#
# XXX look for dst in fstab and mount if there and not mounted,
#  otherwise just stick stuff in dst.
# 
Usage()
{
    echo 1>&2 "jaz-bak [-n] [-l dump-level-for-dumped-dirs] [-d dest]"
    exit 0
}

q=$(getopt -o "nl:d:mPDCSp:f:seEcr:F:Z" -- $argses)
eval set -- "$q" 

nomount=n

[ $? != 0 ] && Usage

for i in $*
do
    case $1 in
	-n) EExecShowOnly=y; cfg_file=/dev/tty; just_show=y;;
	-l) dump_level=$2; shift;;
	-d) dst=$2; shift;;
	-m) nomount=y;;
	-P) do_pax=no;;
	-D) do_dump=no;;
	-C) do_config=no;;
	-S) do_spool=no;;
	-p) pax_dirs="$pax_dirs $2"; shift;;
	-f) dump_dirs="$dump_dirs $2"; shift;;
	-F) dump_dirs="$dump_dirs $2"; append_dump_dirs=y; shift;;
	-s) date_str=".`dp-std-date`";;
	-e) excl_dir=y;;
    	-E) eject=y;;
	-c) calendrical_dirs=y; dst="$jaz_root/`dp-std-date`";;
	-R) calendrical_dirs=n; dst="";;
	-r) jaz_root=$2; shift;;
	-L) loop_calendrical=y; dst=$(next_loop_calendrical_dir);;
        -Z) TAR_COMPRESSOR=:; TAR_OPTS=;;
	--) shift ; break ;;
	*) exit 1 ;;
    esac
    shift
done

#
# if calendrical_dirs is not set (=='') then we will set a default
# based on level of backup
# this allows the very large level 0 dump to overwrite the existing
# dump files, but other levels get their own subdirs for rollback
# if needed.
if [ -z "$calendrical_dirs" ]
then
    case "$dump_level" in
    [1-9])  if [ -z "$dst" ]
	    then
		calendrical_dirs=y; dst="$jaz_root/`dp-std-date`"
	    fi
	    ;;
    0) calendrical_dirs=n;;            # dst="";;
    *) 
    esac
fi

[ -z "$dst" ] && dst="$jaz_root/dump-$dump_level.d"

case "$dst" in
    /*)
	dst_base="/`echo $dst | cut -d/ -f2`"
	;;
    *)
	dst_base="$dst"
	;;
esac

#echo "dst>$dst<"
# set this after dst is finalized, but not if it has
# already been set by -n 
[ -z "$cfg_file" ] && cfg_file=$dst/print-config${date_str}.txt

paxit ()
{
    from="$1"
    shift
    ofile="$1"
    # note, this may result in no files begin archived.
    # pax will print:
    # pax: End of archive volume 1 reached
    # ATTENTION! pax archive volume change required.
    # Ready for archive volume: 1
    # Input archive name or "." to quit pax.
    # Archive name >
    pax -H -x cpio -w $from . | bzip2 -9c > $ofile
}

tarit ()
{
    from="$1"
    shift
    ofile="$1"

    echo "from>$from<"
    if [ -n "$from" ]
    then
	from=$(echo $from | sed 's/T/ /')
	echo "from>$from<"
	# @todo find a way to determine -0500 rather than it being a literal
	# NB: %z is a non-standard gnu extension
	numeric_tz=$(date +'%z')
	from="$AFTER_SW '$from $numeric_tz'"
	echo "from>$from<"
    fi

    # tar canna verify compressed archives.
    eval EExec tar -c ${TAR_VERIFY_OPT} -f $ofile $from .
    EExec ${TAR_COMPRESSOR} ${TAR_OPTS} $ofile
}

dumpit()
{
    fs=$1
    ofile=$2
    level=$3
    echo "dump -$level -f - -u $fs | gzip -9c > $ofile"
    EExec dump -$level -f - -u $fs | gzip -9c > $ofile
}

find_mp_dev()
{
    mp=$1
    cat /etc/fstab | while read line
    do
	case "$line" in
	    \#*) continue;;
	esac
	# dev        mp   fs    opts      fsck-info
	# /dev/da0c  /jaz ufs	rw,noauto 0  0
	# $1         $2   $3    $4        $5 $6
	set -- $line
	if [ "$2" = "$mp" ]
	then
	    echo -n $1
	    return 0
	fi
    done

    echo ""
    return 0
}

start=$(ctime)
#
# get date of last jaz-bak
# use that date to select files for the pax archive.
# pax wants: '[yy[mm[dd[hh]]]]mm[.ss]'
# we return the EPOCH as `-' which tells paxit to not use the -T option.
case "$(uname)" in
    FreeBSD) 
	fmt='%y%m%d%H%M.%S'
	ARCHIVER=paxit
	ARCHIVE_NAME=pax
	AFTER_SW='-T'
	;;
    Linux)
	#date --iso-8601=seconds --> 2000-12-15T11:48:05-0800
	fmt='%Y-%m-%dT%H:%M:%S'
	ARCHIVER=tarit
	ARCHIVE_NAME=tar
	AFTER_SW='-N'
	;;
    *)
	FATAL 3 "Unknown OS >$(uname)<"
	exit 3
	;;
esac

from=$(date-level-log.py -E - -F "$fmt" -f $jaz_dates -d $jaz_tag $dump_level)
case "$from" in
    -) AFTER_ARG='';;
    *) AFTER_ARG="$from";;
esac
echo "pf>$AFTER_ARG<"

#
# Is the dst base already mounted ???
#
if [ "$nomount" = "n" ]
then
    #
    # see if dst_base is a mount-point in fstab
    mount_dev=`find_mp_dev $dst_base`

    if [ -n "$mount_dev" ]
    then
	if ! mount | fgrep -q "on $dst_base"
	then
	    # not in mount list, mount it.
	    EExec mount "$dst_base"
	else
	    # already mounted, leave it mounted when we're done
	    nomount=y
	fi
    else
	nomount=y
    fi
fi

#
# make dest dir if it doesn't exist.
# We must do this after any needed mounts.
[ -d "$dst" ] || {
    [ "$excl_dir" = "y" ] && EEdie "$dst exists and excl_dir was specified."
    EExec mkdir -p "$dst"
}

if [ "$do_pax" = "yes" ]
then
    : ${pax_dirs:=$def_pax_dirs}

    for dir in $pax_dirs
    do
	[ -d "$dir" ] || continue
	EExec cd $dir
	# @todo make var name from pax_base + _opts
	# and pass the extra opts to paxit.
	# add /var/db/pkg to pax_dirs and make opt var that
	# excludes the pkgdb.db
	archive_base=`namify-path -n -c _ $dir`
	archive_name="$dst/$archive_base${date_str}.${dump_level}.${ARCHIVE_NAME}"
	EExec $ARCHIVER "$AFTER_ARG" $archive_name
    done
fi

if [ "$do_dump" = "yes" ]
then
    if [ "$append_dump_dirs" = 'y' ]
    then
	dump_dirs="$def_dump_dirs $dump_dirs"
    else
	: ${dump_dirs:=$def_dump_dirs}
    fi

    for dir in $dump_dirs
    do
	EExec cd $dir
	dump_base=`namify-path -n -c _ $dir`
	dump_name="$dst/$dump_base${date_str}.${dump_level}.dump.gz"
	EExec $DUMPER $dir $dump_name $dump_level
    done
fi

if [ "$do_spool" = "yes" ]
then
    [ -d $dst/mail-spool ] && rm -rf $dst/mail-spool
    spool_dst="$dst/mail-spool${date_str}"
    EExec mkdir $spool_dst
    EExec cp /var/mail/* $spool_dst
fi

if [ "$do_config" = "yes" ]
then
    case "$just_show" in
	y) cfile=/dev/null;;
	*) cfile=$cfg_file.bz2;;
    esac
    EExec print-config | bzip2 -9c > $cfile
fi

#
# save info of installed packages
#find /var/db/pkg -type d | sort | bzip2 -9c > $dst/installed-packages.txt.bz2
tar -c -f "$dst/${PKG_DB}" "${PKGS}/"
${TAR_COMPRESSOR} ${TAR_OPTS} "$dst/${PKG_DB}"

if [ -n "$BUP_GROUP" ]
then
    chgrp -R $BUP_GROUP $dst
    find $dst -type d | xargs chmod $BUP_DIR_PERMS
    find $dst -type f | xargs chmod $BUP_FILE_PERMS
fi

if [ "$nomount" = "n" ]
then
    df -h $dst_base
    EExec umount "$dst_base"
    [ x"$mount_dev" = "x" ] && die "Cannot find dev for $dst_base"
    bdev=`basename $mount_dev`
    if [ "$eject" = "y" ]
    then
    	EExec camcontrol eject $bdev
    else
	EExec camcontrol stop $bdev
    fi
fi

#
# record the operation as a whole rather than per directory.
EExec date-level-log.py -f $jaz_dates -a $jaz_tag $dump_level $start

exit 0
