#!/bin/sh
#set -x
dst="/jaz/`dp-std-date`"
ECHO=
dump_level=0
do_pax=yes
do_dump=yes
do_config=yes
do_spool=yes
def_pax_dirs='/etc /usr/local/etc /root /usr/X11R6/etc'
def_dump_dirs='/yokel'
pax_dirs=
dump_dirs=
date_str=
excl_dir=

. eexec
EExecEcho="echo 1>&2"
#
# backup /usr/yokel to a pax file on /jaz

### for testing
### EExecShowOnly=y; cfg_file=/dev/tty;

#
# XXX look for dst in fstab and mount if there and not mounted,
#  otherwise just stick stuff in dst.
# 
Usage()
{
    echo 1>&2 "jaz-bak [-n] [-l dump-level-for-yokel] [-d dest]"
    exit 0
}

set -- ` getopt nl:d:mPDCSp:f:seE $* `
nomount=n

[ $? != 0 ] && Usage

for i in $*
do
    case $1 in
	-n) EExecShowOnly=y; cfg_file=/dev/tty;;
	-l) dump_level=$2; shift;;
	-d) dst=$2; shift;;
	-m) nomount=y;;
	-P) do_pax=no;;
	-D) do_dump=no;;
	-C) do_config=no;;
	-S) do_spool=no;;
	-p) pax_dirs="$pax_dirs $2"; shift;;
	-f) dump_dirs="$dump_dirs $2"; shift;;
	-s) date_str=".`dp-std-date`";;
	-e) excl_dir=y;;
    	-E) eject=y;;
	--) shift ; break ;;
	*) exit 1 ;;
    esac
    shift
done

case "$dst" in
    /*)
	dst_base="/`echo $dst | cut -d/ -f2`"
	;;
    *)
	dst_base="$dst"
	;;
esac
#echo "dst>$dst<"
# set this after dst is finalized, but not if it has
# already been set by -n 
[ -z "$cfg_file" ] && cfg_file=$dst/print-config${date_str}.txt

paxit ()
{
    ofile=$1
    pax -x cpio -w . | gzip -9c > $ofile
}

dumpit()
{
    fs=$1
    ofile=$2
    level=$3
    echo "dump -$level -f - -u $fs | gzip -9c > $ofile"
    EExec dump -$level -f - -u $fs | gzip -9c > $ofile
}

find_mp_dev()
{
    mp=$1
    cat /etc/fstab | while read line
    do
	case "$line" in
	    \#*) continue;;
	esac
	# dev        mp   fs    opts      fsck-info
	# /dev/da0c  /jaz ufs	rw,noauto 0  0
	# $1         $2   $3    $4        $5 $6
	set -- $line
	if [ "$2" = "$mp" ]
	then
	    echo -n $1
	    return 0
	fi
    done

    echo ""
    return 0
}
	
#
# Is the jaz disk already mounted ???
#
if [ "$nomount" = "n" ]
then
    #
    # see if dst_base is a mount-point in fstab
    mount_dev=`find_mp_dev $dst_base`

    if [ -n "$mount_dev" ]
    then
	mount | fgrep -q "on $dst_base" || {
	    # not in mount list, mount it.
	    EExec mount "$dst_base"
	}
    else
	nomount=y
    fi
fi

#
# make dest dir if it doesn't exist.
# We must do this after any needed mounts.
[ -d "$dst" ] || {
    [ "$excl_dir" = "y" ] && EEdie "$dst exists and excl_dir was specified."
    EExec mkdir -p "$dst"
}

if [ "$do_pax" = "yes" ]
then
    : ${pax_dirs:=$def_pax_dirs}

    for dir in $pax_dirs
    do
	EExec cd $dir
	pax_base=`namify-path -n -c _ $dir`
	pax_name="$dst/$pax_base-${date_str}.pax.gz"
	EExec paxit $pax_name
    done
fi

if [ "$do_dump" = "yes" ]
then
    : ${dump_dirs:=$def_dump_dirs}

    for dir in $dump_dirs
    do
	EExec cd $dir
	dump_base=`namify-path -n -c _ $dir`
	dump_name="$dst/$dump_base-${date_str}.${dump_level}.dump.gz"
	EExec dumpit $dir $dump_name $dump_level
    done
fi

if [ "$do_spool" = "yes" ]
then
    [ -d $dst/mail-spool ] && rm -rf $dst/mail-spool
    spool_dst="$dst/mail-spool${date_str}"
    EExec mkdir $spool_dst
    EExec cp /var/mail/* $spool_dst
fi

if [ "$do_config" = "yes" ]
then
    EExec print-config > $cfg_file
fi

if [ "$nomount" = "n" ]
then
    df -h $dst_base
    EExec umount "$dst_base"
    [ x"$mount_dev" = "x" ] && die "Cannot find dev for $dst_base"
    bdev=`basename $mount_dev`
    if [ "$eject" = "y" ]
    then
    	EExec camcontrol eject $bdev
    else
	EExec camcontrol stop $bdev
    fi
fi

exit 0
