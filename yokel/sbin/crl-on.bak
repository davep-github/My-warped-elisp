#!/bin/sh
set -x
progname=`basename $0`

Usage()
{
   echo 1>&2 "${progname}: usage: $progname [-m <tun-mod>| -k]"
   exit 1
}

verbose=
#verbose="-d"
itnd=/usr/yokel/bin/itnd
itndrv_mod_name=if_tun2
#itndrv=/usr/yokel/lkm/$itndrv_mod_name.kld

#tunnel_name=crl
tunnel_name='CRL-Inbound'
tunnel_server='davep-home@crl.dec.com'
#tunnel_server='003/davep@crl.dec.com'
#tunnel_server='003/davep-fbsd@crl.dec.com'
#tunnel_server='004/davep-fbsd2@crl.dec.com'
#tunnel_server='004/davep-fbsd'
#tunnel_server='005/davep@crl.dec.com'
digital_net=16
hp_net=15

nets="$digital_net $hp_net"

# see the man page of getopt for inadequacies.
args=` getopt m:k $* `

[ $? != 0 ] && Usage

set -- $args
for i in $*
do
    case $1 in
	-k) one=1;;
	-m) itndrv_mod_name=$2; shift;;
	--) shift ; break ;;
	*) 
	    echo 1>&2 "Unsupported option>$1<";
	    Usage;;
    esac
    shift
done

itndrv=/usr/yokel/lkm/$itndrv_mod_name.ko

[ -n "$one" ] && no_kicker=y

cd / || {
    echo 2>&1 "Canna cd to /"
    exit 1
}

if_up()
{
    my_gw=`/usr/yokel/bin/ppp-info itn0`
    set -- $my_gw
    my_gw=$4
    if [ "$my_gw" != "" ]
    then
	return 0
    else
	return 1
    fi
}

delete_nets()
{
    for net in $nets
    do
	route delete -net $net > /dev/null 2>&1
    done
}

add_nets()
{
    for net in $nets
    do
	route add -net $net $my_gw || {
	    echo 1>&2 "Could not add route to $net."
	}
    done
}

do_on() 
{
    if if_up
    then
	echo "tunnel already running."
	return 0
    fi

    # tunnel not running
    #bash# itnd -L 003/davep-fbsd@crl.dec.com
    #D o 003/davep-fbsd@crl.dec.com 199.1.0.1 199.1.0.2 localhost
    #D o crl D {} mopang.crl.dec.com
	
    #tunnel running
    #bash# $itnd -L 003/davep-fbsd@crl.dec.com
    #D o 003/davep-fbsd@crl.dec.com 199.1.0.1 199.1.0.2 localhost
    #U o crl D {} mopang.crl.dec.com

    $itnd -k $tunnel_name $tunnel_server > /dev/null 2>&1 

    echo "Starting tunnel server..."
    $itnd $verbose -s $tunnel_name $tunnel_server || {
	echo 1>&2 "Cannot start tunnel."
	return 1
    }
    echo "$itnd -s OK."
	
    #
    # ppp-info gives us info about a point to point link:
    # e.g. 16.11.160.69  a-69.tunnel.crl.dec.com --> 16.11.160.68
    # but we need to wait for the link to come up
    #
    echo "Wait for itn i/f to come up:"
    loop_count=0
    LOOP_MAX=1000
    while [ "$(($loop_count '<' $LOOP_MAX))" = '1' ]
    do
	if if_up
	then
	    echo ""
	    echo "Connected."
	    break
	fi
	echo -n "."
	loop_count=$(($loop_count + 1))
    done
    if [ "$(($loop_count '>=' $LOOP_MAX))" = '1' ]
    then
	echo 1>&2 "if won't come up. returning."
	return 1
    fi

    delete_nets
    add_nets

    # netstat -rn | mail -s 'AV tunnel netstat -rn output ' davep@crl.dec.com
}

do_off()
{
    $itnd $verbose -k $tunnel_name $tunnel_server
    delete_nets
    killprog itnd
}

maybe_itnd()
{
    findprog itnd > /dev/null 2>&1 || {
	$itnd $verbose &
    }
}

#
# main()
#
kldstat | fgrep $itndrv_mod_name > /dev/null || {
    kldload $itndrv || {
    echo "kldload failed" 1>&2
    exit 3
    }
}

maybe_itnd

case $progname in
*-on)
    #do_on
    while : #false
    do
	sleeptime=5
	do_on && break
	echo "1, zzz/${sleeptime}..."
	sleep $sleeptime
	maybe_itnd
	do_off
	echo "2, zzz/${sleeptime}..."
	sleep $sleeptime
	maybe_itnd
    done
    ;;

*-off)
    do_off
    ;;

*)
    echo "unknown command name: $progname" 2>&1
    ;;
esac
