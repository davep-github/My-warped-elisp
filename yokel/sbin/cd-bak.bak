#!/usr/bin/env bash
# $Id: cd-bak,v 1.55 2004/03/12 06:16:26 davep Exp $
#
#set -x

argses="$*"
save_argses="$argses"

. eexec

EExecEchoPrefix='+'
umask 077

#
# do a jaz-bak to a directory named after the date
#  then dump that to CD
dummy=
. cdrw.conf
excl_dir=y
build_bak_img=y
burn_img=y
JAZ_PROG=jaz-bak
jaz_path=
jaz_args=
jaz_dump_level=
keep_img=n
append=
L0_DISC=
dump_and_exit=
refine_args=
query_I_args=

#def_log_file="/usr/local/etc/cd-bak.log"
def_log_file="/var/log/cd-bak.log"
def_log_prefix=
log_prefix=$def_log_prefix

info_prefix="INFO: "
info_file="/dev/tty"

LOG() {
    echo "$log_prefix$*" >> $log_file
}

INFO() {
    echo "$info_prefix$*" >> $info_file
}

mk_unique_name ()
{
    base="$1"
    suff_num=0
    while :
    do
	new_name="$base.$suff_num"
	INFO "Uniqifying, new_name>$new_name<"
	[ -e "$new_name" ] || {
	    echo $new_name
	    break
	}
	suff_num=$(($suff_num + 1))
    done
}
get_last_args() {
    set -- $(fgrep 'args: ' $def_log_file | tail -1)
    if [ "$?" != "0" ]
    then
	# usually means log file was rotated.
	# @todo zgrep thru archived log files
	INFO 'get_last_args could not find any args'
	exit 1
    fi
    shift			# discard args:
    echo $*
}

# @todo if l0, set zdisk to disk name
parse_args() {
#    echo "*>$*<"
    args_in="$*"
    for i in $*
    do
#  	echo "*>$*<"
#  	echo "i>$i<"
#  	echo "1>$1<"
#  	echo "2>$2<"
	case $1 in
	    -N) cd_name=$2; shift;;
	    -e) erase_first=y;;
	    -E) erase_first=n;;
	    -x) excl_dir=n;;
	    -n) dummy="-dummy"; EExecShowOnly=y; jaz_args="$jaz_args -n"
		show_only=y;;
	    -d) dev=$2; shift;;
	    -f) fs=$2; shift;;
	    -s) speed=$2; shift;;
	    -p) jaz_path="$jaz_path $2"; shift;;
	    -D) data='' ;;
	    -M) multi='' ;;
	    -B) build_bak_img=n ;;
	    -C) burn_image=n ;;
	    -j) jaz_args="$jaz_args $2"; shift;;
	    -J) jaz_args="$2 $jaz_args"; shift;;
	    -l) jaz_dump_level="-l $2"; shift;;
	    -k) keep_img=y;;
	    -b) not_a_backup='y'; build_bak_img=n; keep_image=y;
		;;
	    -a) append=y;;
	    -A) append=n;;
	    -I) I_args=`get_last_args`; 
		keep_parsing=y; 
		# @todo really need to sed -I into $*
		save_argses=$(echo "$args_in" | sed "s/-I/$I_args/")
		save_argses=$(echo "$save_argses" | sed 's/\(-- *\)*$//')
		I_args=$(echo "$I_args" | sed 's/\(-- *\)*$//')
		shift		# lose -I

		while [ -n "$refine_args" -o -n "$query_I_args" ]
		do
		    [ -n "$refine_args" ] && {
			I_args=$(viline $I_args)
			refine_args=''
		    }
		    echo 1>&2 "I_args>$I_args<"
		    if [ -n "$query_I_args" ]
		    then
			echo -n 1>&2 "I_args: [$I_args], use? "
			read ans
			case "$ans" in
			    [Yy1tT]) break;;
			    [eEvV]) refine_args=y;;
			    *) exit 1;;
			esac
		    fi
		done
		    
		set -- $I_args $* # splice -I args in w/rest of args
		echo 1>&2 "new \$*>$*<"
		[ -n "$dump_and_exit" ] && {
		    echo "I_args>$I_args<"
		    exit 0
		}
		break;;
	    -P) JAZ_PROG=$2; shift;;
	    -z) L0_DISC=$2; shift;;
	    -S) jaz_args="-f / -f /usr -f /var -CPS";;
	    -X) dump_and_exit=y;;
	    -r) if [ -n "$I_args" ]
		then
		    echo 1>&2 '-r must be specified before -I'
		    exit 2
		fi
		refine_args=y;;
	    -q) query_I_args=y;;
	    -c) comment="$2"; shift;;
	    --) shift; break;;
	    *) echo 1>&2 "Illegal option>$1<"; exit 3;;
	esac
	shift
    done
    echo 1>&2 "name>$cd_name<, level>$jaz_dump_level<"
    argses=$*
}
    
keep_parsing=y
while [ $keep_parsing = 'y' ]
do
#    set -- ` getopt nd:f:s:DMeBCp:j:J:l:EN:kbaAIP:z:S $* `
    set -- ` getopt ABCDEIJ:MN:P:SXabc:d:ef:j:kl:np:qs:xz:r $* `
    echo "status>$?<"
    echo "opts>$*<"
    # using set -- `parse_args $*` puts the func in a subshell and
    #  then it cannot set any of this shell's vars.
    parse_args $*
    set -- $argses

    case "$1" in
    -*) keep_parsing=y;;
    *) keep_parsing=n;;
    esac
    #echo "name>$cd_name<, level>$jaz_dump_level<"
done

[ -n "$dump_and_exit" ] && {
    echo 1>&2 "ERROR: specify -X before -I option."
    exit 1
}


############exit 98

#echo "name>$cd_name<, level>$jaz_dump_level<"

if [ "$show_only" = 'y' ]
then
    log_prefix="LOG:"
    log_file=/dev/tty
else
    log_prefix=$def_log_prefix
    log_file=$def_log_file
fi

if [ -n "$not_a_backup" ]
then
    log_prefix="LOG:"
    log_file=/dev/tty
fi

if [ "$not_a_backup" != "y" ]
then
    while [ -z "$cd_name" ]
    do
	echo -n "Please enter the CD's name: "
	read cd_name
    done

    #
    # get name of l0 disc 
    if [ "$jaz_dump_level" != "-l 0" ]
    then
	while [ -z "$L0_DISC" ]
	do
	    echo -n "Please enter the name of the l0 CD: "
	    read L0_DISC
	done
    else
	L0_DISC=$cd_name
	LOG "setting L0 to N [$L0_DISC]"
    fi
fi

one="$1"
# use def_log in case we are debugging.
last_bak_disc=$(fgrep 'start: ' $def_log_file | tail -1)
set -- $last_bak_disc
last_bak_disc=$2

start_time=`date`
LOG "start: $cd_name : $start_time"
LOG "args: $save_argses"
LOG "$(dfcdrw 2>&1)"
LOG "$(dfcdrw 2>&1) -h"

if [ -z "$jaz_path" ] 
then
    #
    # dest for initial jaz-bak is src for mkisofs
    jaz_base=${one:-/bfd/dumps}
    #
    # jaz_dir0 is the place from which we begin our mkisofs
    # Since we're writing to the CD in a WORM-like fashion
    # we may as well put each session in a unique dir so that 
    # all of them can be accessed. mkisofs does not use the name
    # of its start-point, so we need another dir so we can get
    # a unique name on the CD.  We just use jaz_dir0 twice, since
    # it is already uniquish.
    jaz_dir0=`dp-std-date`
    jaz_dir="$jaz_dir0/$jaz_dir0"

    jaz_path="$jaz_base/$jaz_dir"
    mkisofs_path="$jaz_base/$jaz_dir0"
else
    # jaz path was passed in, get the components.
    if [ -z "$not_a_backup" ]
    then
	mkisofs_path="$(dirname $jaz_path)"
    else
	# if this isn't a backup type operation, save all names
	# and make no assumptions about the name format.
	mkisofs_path="$jaz_path"
    fi
fi

LOG "mkisofs_path: $mkisofs_path"
LOG "jaz_path: $jaz_path"

#
# Should we build a backup dir using jaz-bak?
#
if [ "$build_bak_img" != "n" ]
then
    if [ -e "$jaz_path" ]
    then
	[ "$excl_dir" = 'y' ] && {
	    echo 1>&2 "$jaz_path already exists, and excl_dir is 'y'."
	    while :
	    do
		echo -n 1>&2 "(O)verwrite, (Q)uit, (U)niquify> "
		read line
		case "$line" in
		    [Oo]) excl_dir=n; break;;
		    [Qq]) exit 1;;
		    [Uu]) jaz_path=$(mk_unique_name $jaz_path); 
			  EExec mkdir -p $jaz_path;
			  break;;
		esac
	    done
	}
	echo 1>&2 "Using existing destination dir: $jaz_path"
    else
	EExec mkdir -p $jaz_path
    fi
    EExec $JAZ_PROG $jaz_dump_level -d $jaz_path $jaz_args
fi

#
# Should we burn the image to CDR[W]?
#
# we assume that l 0 dumps go to fresh CD and others are
# appended to an existing FS on the CD.
# This is perhaps not the best way to do this.
# It would be best to determine the state of an existing
# CD and append if not blank.  How? cdrecord -msinfo?
# ??? mount fails --> not written.
# @todo can I use -msinfo and failure means not written.
# @todo and use this fact to determine append or not if no arg is given
# @todo warn if no append and -msinfo succeeds.
# 
#
if [ "$burn_img" != "n" ]
then
    if [ "$show_only" != 'y' ]
    then
	for path in $mkisofs_path
	do
	    [ -d "$path" ] || {
		EEdie "mkisofs path ($mkisofs_path) does not exist"
	    }
	done
    fi
	
    #
    # allow user to specify append state
    if [ -z "$append" ]
    then
	# otherwise, make a feeble guess.
	if [ -z "$jaz_dump_level" -o "$jaz_dump_level" = "-l 0" ]
	then
	    append=n
	else
	    append=y
	fi
    fi

    #
    # see if a change to a new disc implies an erase
    # only do this if no erase option has been specified
    if [ -z "$erase_first" ]
    then
	if [ "$last_bak_disc" != "$cd_name" ]
	then
	    # this will fail for CDR
	    erase_first='y'
	fi
    fi
    
    #
    # Should we erase the disc first?
    if [ "$erase_first" = "y" ]
    then
	EExec cd-erase -N "$cd_name" "$dev"
	if [ "$append" = "y" ]
	then
	    echo 1>&2 "WARNING: append disabled by erase request."
	fi
	append=n
    elif [ "$erase_first" = "n" ]
    then
	INFO "skipping erase by request."
    fi

    # add the l0 name to the backup image
    if [ -n "$L0_DISC" ]
    then
	EExec touch "$jaz_path/l0-cd-is-$L0_DISC"
	LOG "L0_DISC: $L0_DISC"
    fi
    # Should we append the image to the CDR[W]?
    if [ "$append" = "n" ]
    then
	if [ "$show_only" != y ]
	then
	    mkisofs -R $mkisofs_path | cdrecord -v $dummy $multi \
		$data fs=$fs speed=$speed dev="$dev" - || {
		echo 1>&2 "mkisofs/cdrecord failed."
    		exit 1
	    }
	else
	    echo "NO append: mkisofs $mkisofs_path"
	fi
    else
	# perform the necessary incantation to append our data to
	# what is already on the disc.
	# Note that we need create a temp image as large as the
	# total image (old+new)
	if [ "$show_only" != 'y' ]
	then
	    magic=$(cdrecord -msinfo dev="$dev")
	else
	    magic="NO MAGIC, dummy run"
	fi
	    
	merge_tmp=/sundry/tmp/cd-bak-merge.iso

	# @todo why can't I just pipe the mkisofs into the cdrecord?
	EExec mkisofs -o $merge_tmp -R -C "$magic" -M "$dev" $mkisofs_path
	EExec cdrecord -v $dummy $multi $data fs=$fs speed=$speed \
		dev="$dev" $merge_tmp
	EExec rm -f $merge_tmp
    fi
    
    [ "$keep_img" = "n" ] && EExec rm -rf $mkisofs_path

fi

LOG "$(dfcdrw 2>&1)"
LOG "$(dfcdrw 2>&1) -h"

end_time=`date`
LOG "end: $cd_name: $end_time"
LOG "--"


