#!/usr/bin/env bash
# add element to path iff its not there already
# default is to append
# NB: null path elements will be converted to .s
#set -x

DEF_SEP=':'
prepend=
set -- `getopt 'ps:' "$@"`
for i in $*
do
    case $1 in
	-p) prepend=y;;
	-s) DEF_SEP=$2; shift;;
	--) shift ; break ;;
	*) echo 1>&1 "Unsupported option >$1<"; exit 1 ;;
    esac
    shift
done
    
if [ -n "$prepend" ]
then
    cmd='$out$sep$path'		# command to prepend new dirs
else
    cmd='$path$sep$out'		# command to append new dirs
fi

path=$1				# save the original path
shift
newargs="$*"			# the dirs to add

# add a trailing colon so an existing trailing colon is split into a
# empty string by the set --.  This seems to be a bash bug, since on
# FreeBSD, sh doesn't need this but on linux running bash as sh
# it does, and so does bash run as bash.
path="$path$DEF_SEP"			
oldIFS="$IFS"
IFS="$DEF_SEP"			# split path on DEF_SEP
set -- ${path}
IFS="$oldIFS"
path= sep=
for el in "$@"
do
    [ -n "$*" -a -z "$el" ] && el="."	# convert null entries to .s
    # delete existing, prepended entries.
    [ "$prepend" = 'y' ] && {
	case " $newargs " in
	    *\ $el\ *) el= ;;
	esac
    }
    [ -n "$el" ] && {
	path="$path$sep$el"
	sep=$DEF_SEP
    }
done

sep= out=
for new_el in $newargs
do
    [ -z "$new_el" ] && new_el=. # fix null entry
    case "$DEF_SEP$path$DEF_SEP" in
	*$DEF_SEP$new_el$DEF_SEP*)		# element aleady is in path
	    [ "$prepend" != "y" ] && new_el=
	    ;;
    esac
    [ -n "$new_el" ] && {
	out=$out$sep$new_el # not present, add to output string
	sep=$DEF_SEP
    }
done

sep=$DEF_SEP
# echo "out>$out<, sep>$sep<, path>$path<"
# no separator if path or out is empty, since that adds a null entry
[ -z "$out" -o -z "$path" ] && sep=""
eval echo $cmd
