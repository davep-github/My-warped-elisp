#!/bin/sh
#set -x
prog=`basename $0`
echo $prog: $* 1>&2

. /usr/yokel/bin/eexec
EExecContinue=1

DO_RCS_FILENAME='DP_DO_RCSDIR'
NO_RCS_FILENAME='DP_NO_RCSDIR'

rcs_suffix=',v'

Usage()
{
   echo "${prog}: usage: $prog -r rcs_root [-t text] [-m msg]" 1>&2
   exit 1
}

skip_dir()
{
    dir="$1"
    # only do this if explicitly set to y
    if [ "$DO_RCS_BY_DEFAULT" != y ]
    then
        # skip if no file named $DO_FILENAME
        if (cd "$dir"; [ -e "$DO_RCS_FILENAME" ] )
        then
            return 1            # don't skip
        else
            return 0            # skip
        fi
    else
        # skip if file named $NO_FILENAME
        if (cd "$dir"; [ -e "$NO_RCS_FILENAME" ] )
        then
            return 0
        else
            return 1
        fi
    fi        
}        

# init optional vars to defaults here...
ECHO="echo $prog: "
EKO=':'
text='rcsed_by_rcstree'
msg='rcsed_by_rcstree'
excl_files="$DO_RCS_FILENAME $NO_RCS_FILENAME"
LINK_FILE="./.rcstree-LINK-list-for-$(basename $PWD)..."

# on a PER-dir basis (not recursive)
# y: don't RCS by default but do so if $DO_FILENAME exists
# other: do RCS by default but skip dirs if $NO_FILENAME exists
DO_RCS_BY_DEFAULT=y

: ${debug:=':'}			# : -->off, echo -->on
dash_n_arg=

set -- ` getopt t:m:vr:nx:dD "$@" `

[ $? != 0 ] && Usage

for i in $*
do
    case $1 in
	-t) text=$2; shift;;
	-m) msg=$2; shift;;
	-v) verbose=1; EExecEcho=echo;;
	-r) rcs_root=$2; shift;;
	-n) verbose=1; EExecDashN;dash_n_arg='-n';;
	-x) excl_files="$excl_files $2";shift;;
        -D) DO_RCS_BY_DEFAULT=y;;
        -d) DO_RCS_BY_DEFAULT=n;;
	--) shift; break;;
	*) Usage ;;
    esac
    shift
done

if [ "$rcs_root" = '=' ]
then
    rcs_root="$PWD"
fi

# only if non optional args required
#[ "$*" = "" ] && Usage

[ -z "$rcs_root" ] && Usage

PRUNEDIRS="RCS CVS ,RCS-HIDE,"
excludes=
or=
for dir in $PRUNEDIRS
do 
    excludes="$excludes $or -name '$dir' -prune"
    or="-or"
done
[ -n "$excludes" ] && excludes="\\( $excludes \\) -or"

ex_files=
and=
for f in $excl_files
do
    ex_files="$ex_files $and \! -name $f"
    and="-and"
done
[ -n "$ex_files" ] && ex_files="\\( $ex_files \\) -and"

$debug "ex_files>$ex_files<"

#####or=
#####[ -n "$excludes" -a -n "$ex_files" ] && or='-or'

all_excludes="$excludes $ex_files"

$debug "allex>$all_excludes<"

#eko $excludes
#eval eko $excludes
$EKO find . $all_excludes -type f -print
$debug find . $all_excludes -type f -print

# save links into a file.  This will then be rcs'd below
eval find . $all_excludes -type l -ls >| $LINK_FILE

eval find . $all_excludes -type d -print |
while read dir
do
    $debug "dir>$dir<"
    #continue

    if skip_dir "$dir"
    then
        $debug "skipping dir>$dir<"
        [ -n "$verbose" ] && echo "skipping $dir"
        continue
    fi

    eval find "$dir" $all_excludes -type f -print |
    while read file
    do
        $debug "file>$file<"
        ###echo "$file" | rcstreefile $dash_n_arg -r "$rcs_root"
    done
done
