#!/bin/sh

source script-x
source eexec
set -u
progname="$(basename $0)"

# I will have a locate alias that references my db so we need to get the real
# one here.
: ${LOCATE:=which-locate}
: ${LOC_DIR:=/home/utils}
: ${LOC_EXCLUDES=}
: ${LOC_DB_NAME:=}
: ${LOC_DB_DIR:=.}
: ${lval:=0}

# Usage variable usage:
Usage_args_info="[options]"
Usage_synopsis="Make a locate db with a few extensions for nVIDIA environment:
"
Usage_details="-n -- Show what would happen but don't do it. [eexec]
-v -- Be verbose about it. [eexec]
-q -- Anti-verbose. [eexec]
-u <uniqifying-string> -- Incorporate this into the db name for differentiation.
-l|-d <dir-to-index> -- Build loc db from this tree.
"
# Example of arg parsing.
option_str="nvqu:l:d:"
source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      -u) shift; uniqifier=$1;;
      -l|-d) shift; LOC_DIR=$1;;
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done
# No args.
! [ "$*" = "" ] && Usage

LOC_DIR=$(dogo $LOC_DIR)
[ "$LOC_DIR" = "." ] && LOC_DIR="$PWD"

: ${uniqifier=$(basename "$LOC_DIR")}
loc_db=$(mk-loc-db-name -f "$LOC_DB_NAME" -d "$LOC_DB_DIR" -c -u "$uniqifier")    

[ -z "$loc_db" ] && {
    echo "I need an output file for the locate database."
    exit 1
} 1>&2

loc_exclude_opt=
[ -n "$LOC_EXCLUDES" ] && loc_exclude_opt="-e $LOC_EXCLUDES"

env | egrep -i 'eexec.*verbos'
EExec $LOCATE --create -U "${LOC_DIR}" ${loc_exclude_opt} \
   -o "${loc_db}" -l "$lval" "$@"
