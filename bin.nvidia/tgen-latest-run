#!/bin/sh

source script-x
set -u
progname="$(basename $0)"
source eexec

: ${test_name=}
: ${no_cd=}
: ${mecd_to=}
: ${printor=echo}
: ${log_dir_base=dp-run-tgens.d} # This is duplicated from tgen-run-one. Make a tgen.rc type file.
: ${print_base_dir_p=}
: ${test_dir_glob=}

# Usage variable usage:
Usage_args_info=" [test-number]"
Usage_synopsis="Show latest run dir made by testgen:
"
# Using ) after the args makes copy & paste between here and the 
# case statement easier.
Usage_details="${EExec_parse_usage}
--test-name <name>) Use newest dir in <name>. Name can be a wild-card with one expansion.
--no-cd|--stay-put|--.|--no-mecd-testgen) Don't \"mecd testgen\" first.
--realpath|--rp) Use realpath(1) to show dir.
"
# Example of arg parsing.
option_str="${EExec_parse_option_str}rbg:"
# long_options=("option-name-without-leading--" ...)
long_options=("test-name:" "testname:" "name:" "tn:"
"no-cd" "stay-put" "." "no-mecd-testgen"
"realpath"
"base-dir" "root-dir" "base" "root"
"test-type:" "type:" "out:"
"sb:" "sandbox:" "tree:"
"test-dir-glob:"
)

source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      --test-name|--testname|--name|--tn) shift; test_name="${1}";;
      --no-cd|--stay-put|--.|--no-mecd-testgen) no_cd=t;;
      -b|--base-dir|--root-dir|--base|--root) print_base_dir_p=t;;
      -r|--realpath) printor=realpath;;
      --sb|--sandbox|--tree) shift; mecd_to="${1}";;
      --test-type|--type|--out) shift; some_path_component="${1}";;
      -g) shift; test_dir_glob="*${1}*";;
      --test-dir-glob) shift; test_dir_glob="${1}";;
      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done

prefix=
vsetp "${1-}" && {
    case "${1-}" in
        [0-9]|"") ;;
        *) prefix="${1-}."; shift;;
     esac
}

vunsetp "${no_cd-}" && {
    mecd testgen ${mecd_to}
}

dir_num="${1-1}"
first_dir_num=$(printf "%02d" "${dir_num}")
second_dir_num=$(printf "%06d" "${dir_num}" | sed -r 's/(.*)([0-9]{6})/\2/')

if vunsetp "${test_name-}"
then
    latest_out_dir=$(${prefix}latest_out_dir)
else
    vsetp "${no_cd-}" && {
        echo "$progname: no_cd is mutually exclusive with test_name"
        exit 1
    } 1>&2
    latest_out_dir=$(ls -t1d ${log_dir_base}/${test_name}/* | \
        while read
        do 
          [ -d "${REPLY}" ] && {
              echo "${REPLY}"
              break
          }
        done)
fi

#some_path_component=$(echo $(cat last_out_dir)/tests/*)
vunsetp "${some_path_component-}" && {
    some_path_component=$(find ${latest_out_dir}/tests -type d)
}
EExec_verbose_echo_id some_path_component
EExec_verbose_msg "some_path_component glob: >${latest_out_dir}/tests/*<"
tmp_some_path_component=
num_components=$(echo "${some_path_component}" | wc -l)
case "${some_path_component}" in
    0) echo 1>&2 "Cannot find any components under ${latest_out_dir}/tests"; exit 1;;
    1) break;;
    *) {
             echo "Multiple test type dirs exist. Don't know which to use:"
             if vsetp "${test_dir_glob}"
             then
                 echo "   Will select first match of>${test_dir_glob}<."
             fi
             for d in ${some_path_component}
             do
               EExec_verbose_echo_id d
               #echo " $(basename $d)"
               dir_rp="$(realpath $d)"
               EExec_verbose_echo_id dir_rp
               if vsetp "${test_dir_glob-}"
               then
                   EExec_verbose_echo "applying glob: $(echo_id test_dir_glob)"
                   case "$dir_rp" in
                       ${test_dir_glob}) tmp_some_path_component="${dir_rp}"; break;;
                       *) ;;
                   esac
               fi
             done
          } 1>&2
          vunsetp "${tmp_some_path_component}" && {
              echo "*** Try a unique glob: --test-dir-glob <glob>"
              exit 1
       }
       some_path_component="${tmp_some_path_component}"
       dest="${some_path_component}";;
esac
EExec_verbose_echo_id some_path_component
some_path_component=$(basename $some_path_component)

EExec_verbose_echo_id latest_out_dir some_path_component first_dir_num second_dir_num

if vsetp "${print_base_dir_p}"
then
    "${printor}" "${latest_out_dir}"
else
    vunsetp "${dest}" && dest="${latest_out_dir}/tests/${some_path_component}/00/00/${first_dir_num}/${second_dir_num}"
    "${printor}" "${dest}"
    [ -d "${dest}" ] # Print the value, but set status based on its actual existence.
fi
