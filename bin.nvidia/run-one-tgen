#!/bin/sh

source script-x
source eexec
set -u
progname="$(basename $0)"

chip_opt=$(guess-chip) || {
    echo "Cannot guess chip type based on current directory:
$PWD
Specify chip with [-c|--chip] <chip>
"
    exit 1
} 1>&2
echo_id chip_opt

was=$(pwd)
mecd testgen
[ "${was}" = "$(pwd)" ] || {
    echo "Changed to testgen dir."
}

: ${chip:=AAAAAAAAAHHHHHHHHHHHHHHH-am-I-used?}
: ${mdiag_more=}
: ${mdiag_args=}
: ${tgen_prog="./tgen.pl"}
: ${axf_p=}
: ${axf_plugin_bin=""}
: ${axf_cpu_model=0}
: ${axf_mdiag_args="-force_sockserv -reserve_sysmem 258 -top -sec_elf_name $(realpath $(pwd)/../../drv/mpcore/@chip@/ObjLinux_MPCoreXC/boot_page_table.axf) -cpu_model ${axf_cpu_model}"}
: ${rtl_args=-simv top_peatrans_gpurtl}
: ${rtl_args_more=}
: ${clib_linux=$(realpath "$(pwd)/../../clib/Linux")}
: ${d_path="$(pwd)/../../"}
: ${d_opt=""}
: ${last_and_latest_p=t}
: ${last_out_dir_file_name=last_out_dir}
: ${latest_out_dir_file_name=latest_out_dir}
: ${last_and_latest_prefix=}
: ${hist_file_name=$(basename $0).hist}
: ${mailto_opt=}
: ${sandbox_opt=-nosandbox}
: ${max_file_size_opt=}

# Usage variable usage:
Usage_args_info=" <tgen-level-test>..."
Usage_synopsis="Run tgen levels one at a time using a consistent set of vars.
See also tgen.pl and testgen.pl for additional ops.
AXF options apply to all <tgen-level-test>s.
"
Usage_details="${EExec_parse_usage}
-k) Run EExec -n using eko rather than echo.
-w) Wait for completion rather than submitting to LSF.
-T|--tgen-opt <tgen-opt>) Add value to an additional string of tgen options.
-C) Clear clobber opt.
-l <level>) Specify tgen level file.
-r <trace-root>) Root for traces.
-c <chip>) Chip name/type.
-t <target>) E.g. FMODEL.
-d <???>) Default is hwApPath=\$(pwd)/../../ [${d_opt}]
--wait) Run synchronously. Implies --nomail. --mail after this will override.
--status) Print status after a sync run.
--wait-status|--status-wait|--ws) --wait and --status.
--nomail) No status/results mail is sent upon completion.
--mail) Not --nomail.
--mail-to|--mailto <addr>) Set email address.
--mail-me|--mailme) Add myself back in when --mail-to is used.
--mdiag-more|--md-more) <arg> Speciy mdiag args.
--dump-images) -dumpImages to trace3d.
"
# Example of arg parsing.
option_str="${EExec_parse_option_str}wT:Cl:r:c:t:d:kP:Q:"
long_options=("wait"
"tgen-opt:" "tgen-arg:"
"wrapper:"
"max-file-size:"
"clobber"
"level:"
"trace-root:"
"chip:"
"project:"
"target:"
"d-target:"
"log-dir:"
"log-base:"
"out-dir-prefix:" "odprefix:" "odpre:"
"out-dir-suffix:" "odsuffix:" "odsuf:"
"status"
"status-wait" "wait-status" "ws"
"mdiag-args:"
"mdiag-more:" "md-more:"
"dump-images"
"nomail" "no-mail"
"mail-to:" "mailto:"
"mail-me" "mailme"
"all-but-run" "abr" "no-run"
"axf"
"axf-bin:" "axf-exe:" "axf-prog:" "--axf-plugin:"
"rtl"
"rtl-args-more:"
"start-record:"
"queue:"
"split-waveform" "div-waveform"
"no-last" "no-latest"
"last-out-dir:" "latest-out-dir:"
"last-and-latest-prefix:" "ll-prefix:"
"mail"
"eko"
)


: ${user_levels=}
: ${user_tgen_opts=}
: ${mail_opt=}                  # Whatever tgen*'s default is.

source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;
      -k|--eko) EExecDashN -k;;

      # Program options.
      # No mail if we're waiting. Can be turned on by a following --mail.
      -w|--wait) wait_opt=-wait; mail_opt="-nomail";;
      --wrapper) shift; wrapper_opt="${1}";;
      -T|--tgen-opt|--tgen-arg) shift; user_tgen_opts="$user_tgen_opts $1";;
      -C|--clobber) clobber_opt=;;
      -l|--level) shift; llist=$(echo "$1" | sed -r 's/,/ /g')
                  user_levels="${user_levels} ${llist}";;
      -r|--trace-root) shift; traceRoot_opt="$1";;
      -c|--chip) shift; chip_opt="$1";;
      -P|--project) shift; project="$1";;
      -t|--target) shift; target_opt="$1";;
      --d-target) shift; d_TARGET_opt="$1";;
      --all-but-run|--abr|--no-run) all_but_run_opt="-allButRun";;
      -d) shift; d_path="$1";;
      --log-dir) shift; user_log_dir="$1";;
      --log-base) shift; log_dir_base="$1";;
      --out-dir-prefix|--odprefix|--odpre) shift; out_dir_prefix="${1}";;
      --out-dir-suffix|--odsuffix|--odsuf) shift; out_dir_suffix="${1}";;
      --wait-status|--status-wait|--ws) wait_opt="-wait"; mail_opt='-nomail';
                                        display_status_p=t;;
      --mdiag-more|--md-more) shift; mdiag_more="$mdiag_more $1";;
      --mdiag-args|--md-args) shift; mdiag_args="$1";;
      --dump-images) mdiag_more="$mdiag_more -dumpImages";;
      --status) display_status_p=t;;
      --nomail|--no-mail) mail_opt="-nomail";;
      --mail) mail_opt="-mail";;
      --mail-to|--mailto) shift; mailto_opt="${mailto_opt} -mailto ${1}";;
      --mail-me|--mailme) mailto_opt="${mailto_opt} -mailto ${USER}";;
      --axf) axf_p=t;;
      --axf-bin|--axf-exe|--axf-prog|--axf-plugin) shift; axf_plugin_bin="${1}"; axf_p=t;;
      --rtl) rtl_p=t; d_TARGET_opt=;;
      --rtl-args-more) shift; rtl_args_more="${rtl_args_more} ${2}";;
      --start-record) rtl_args_more="${rtl_args_more} +startrecord+${1}";;
      --split-waveform|--div-waveform) rtl_args_more="${rtl_args_more} +fsdbAutoSwitch";;
      -Q|--queue) shift; queue="$1";;
      --no-last|--no-latest) last_and_latest_p=;;
      --last-out-dir) shift; last_out_dir_file_name="${1}";;
      --latest-out-dir) shift; latest_out_dir_file_name="${1}";;
      --last-and-latest-prefix|--ll-prefix) shift; last_and_latest_prefix="${1}";;
      --max-file-size) shift; max_file_size_opt="${1}";;
      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done
# The following is needed only when non optional args are required.
[ "$*" = "" ] && {
    Usage "Test name[s] are required. Use \"all\" to run all tests."
    exit 1
}

case "$chip_opt" in
    t210) level_file=$(pwd)/config/levels/tegra/multiengine/gpu_multiengine_ar2;;
    *) level_file=$(pwd)/config/levels/tegra/regress_tegra_gpu_multiengine;;
esac

: ${default_level=${level_file}}
: ${wait_opt=}
: ${tgen_opts=${user_tgen_opts}}
: ${clobber_opt=-clobber}
: ${levels:=${user_levels:-${default_level}}}
: ${traceRoot_opt=/home/scratch.traces02/arch/traces/}
: ${chip_opt="?"}
: ${target_opt=FMODEL}
: ${d_TARGET_opt=csim}
: ${user_log_dir=}
: ${log_dir_base=dp-run-tgens.d} # This is duplicated in tgen-latest-run. Make a tgen.rc type file.
: ${log_dir=${user_log_dir}}
: ${display_status_p=}
: ${all_but_run_opt=}
: ${rtl_p=}
: ${queue=}
: ${wrapper_opt=$(pwd)/bin/gpu_multiengine_run_wrapper.pl}
: ${out_dir_prefix=}
: ${out_dir_suffix=}

# Common timestamp
timestamp=$(dp-std-timestamp)

vunsetp "${levels}" && {
    Usage "At least one level is needed."
    exit 1
}

if vunsetp "$user_log_dir"
then
    log_dir="$log_dir_base"
else
    log_dir="${user_log_dir}"
fi
log_dir=$(normpath "$log_dir")
EExec mkdir -p $(dirname "$log_dir")
hist_file=$(normpath "${log_dir}/${hist_file_name}")

dollar_at=("$@")

set --

vsetp "${d_opt}" || {
    d_opt="hwApPath=$(realpath ${d_path})"
}
d_opt=$(normpath "${d_opt}")/

case "${chip_opt}" in
    t210)
    traceRoot_opt=
    sandbox_opt=
    ;;
    *)
    wrapper_opt=;
    ;;
esac

: ${project=${chip_opt}}

vsetp "${rtl_p}" && target_opt=RTL

# Appending to $@ allows for more kinds of quoting to be preserved.
# This might be able to be done with arrays.
vsetp "${queue}" && set -- "$@" -queue "${queue}"
vsetp "${project}"  && set -- "$@" -project "${project}"
vsetp "${chip_opt}"  && set -- "$@" -chip "${chip_opt}"
vsetp "${target_opt}"  && set -- "$@" -target "${target_opt}"
vsetp "${rtl_p}" && set -- "$@" ${rtl_args}
vsetp "${d_TARGET_opt}" && set -- "$@" -d TARGET="${d_TARGET_opt}"
vsetp "${d_opt}" ] && set -- "$@" -d "${d_opt}"
vsetp "${traceRoot_opt}" && set -- "$@" -traceRoot "${traceRoot_opt}"
vsetp "${all_but_run_opt}" && set -- "$@" "${all_but_run_opt}"
vsetp "${mailto_opt}" && set -- "$@" ${mailto_opt}
vsetp "${wrapper_opt}" && set -- "$@" -wrapperScript ${wrapper_opt}
vsetp "${sandbox_opt}" && set -- "$@" ${sandbox_opt}
vsetp "${max_file_size_opt}" && set -- "$@" -maxFileSize "${max_file_size_opt}"
log_prefix="$log_dir"

[ -n "$display_status_p" -a -n "$wait_opt" ] && {
    echo "WARNING: display status and wait do not play well together."
} 1>&2

EExec_verbose_echo_id levels

if EExecDashN_p
then
    eexec_dash_n_prefix="{-}"
else
    eexec_dash_n_prefix=""
fi

rc=22
base_dollar_at=("$@")
for level in $levels
do
  level_opt="-level $level"
  EExec_verbose_echo_id level
  for test_name in "${dollar_at[@]}"
  do
    EExec_verbose_echo_id test_name
    set -- "${base_dollar_at[@]}" -level "${level}"

    [ "${test_name}" = 'all' ] || set -- "$@" -only "${test_name}"
    vsetp "$mdiag_more" && {
        set -- "$@" -mdiagArgsMore "${mdiag_more}"
    }
    vsetp "${axf_p}" && {
        mdiag_args="${mdiag_args} ${axf_mdiag_args}"
        axf_mdiag_args=$(echo "$axf_mdiag_args" | sed -r "s/@chip@/$chip_opt/")
    }
    vsetp "${axf_plugin_bin}" && {
        case "${axf_plugin_bin}" in
            *.axf) ;;
            *) axf_plugin_bin="${axf_plugin_bin}.axf";;
        esac
        
        case "${axf_plugin_bin}" in
            */*) ;; # Assume any slash means the full pathname has been given.
            *) axf_plugin_bin="${clib_linux}/${axf_plugin_bin}";;
        esac
        [ -e "${axf_plugin_bin}" ] || {
            echo "$progname: axf plugin [$axf_plugin_bin] doesn't exist."
            exit 1
        } 1>&2
        mdiag_args="${mdiag_args} -plugin ${axf_plugin_bin}"
    }

    vsetp "$mdiag_args" && set -- "$@" -mdiagArgs "${mdiag_args}"
    vsetp "${clobber_opt}" && set -- "$@" -clobber
    vsetp "${wait_opt}" && set -- "$@" "${wait_opt}"
    vsetp "${mail_opt}" && set -- "$@" "${mail_opt}"
    vsetp "${tgen_opts}" && set -- "$@" ${tgen_opts}
    set -- "${tgen_prog}" "$@"

    # Can't create out_dir and put this in it because tgen will complain the
    # dir exists if -clobber is not used and if -clobber is used, the
    # directory will be nuked first.
    # Could put another layer under which the command line file can live next to the tgen output dir.
    if vsetp "${user_log_dir}"
    then
        out_dir="${user_log_dir}"
    else
        out_dir="${log_prefix}/${test_name}/${out_dir_prefix}${timestamp}${wait_opt}.out${out_dir_suffix}"
    fi
    out_dir=$(normpath -r "${out_dir}")

    EExec_verbose_echo_id out_dir
    set -- "$@" -outDir "${out_dir}"

    if [ "${last_and_latest_prefix}" = "." ]
    then
        ll_prefix="${test_name}."
    else
        ll_prefix="${last_and_latest_prefix}"
    fi

    last_out="${ll_prefix}${last_out_dir_file_name}"
    latest_out="${ll_prefix}${latest_out_dir_file_name}"
    echo_id last_out
    echo_id latest_out

    command_line_log="${out_dir}.command-line"
    if ! EExecDashN_p
    then
##        EExec mkdir -p $(dirname "${out_dir}")
        EExec mkdir -p "${out_dir}"
        # Save the list of jobs that are running before we start. This will
        # help us to determine the jobs associated with this run.
        bjobs >| "${out_dir}/bjobs-${test_name}.before"
        vsetp "${last_and_latest_p}" && {
            # Keep a history with latest last.
            # The script below now tails the last line.
            echo "$out_dir" >> "${last_out}"
            echo "#!/bin/sh
tail -n1 ${last_out_dir_file_name}" >| "${latest_out}"
            chmod +x "${latest_out}"
        }
        EExec_verbose_echo_id command_line_log
        echo "$@" > "${command_line_log}"
    else
        echo "Not running: $@"
    fi        
    echo "${eexec_dash_n_prefix}${level}::${test_name} --> ${out_dir}" >> "${hist_file}"
    # EExecDashV_p && EExec -y -0 eko "EExec eko: $@"
    # @todo XXX ??? Check for: testgen.pl: INFO: No tests generated ???

    EExec "$@"
    rc=$?

    echo_id out_dir
    if [ -d "${out_dir}" ]
    then
        # Hopefully, they'll be running by now.
        EExecDashN_p || {
            bjobs >| "${out_dir}/bjobs-${test_name}.after"
        }
        [ -n "${display_status_p}" ] && {
            EExec ./batch_status "${out_dir}"
        }
    else
        echo 1>&2 "   out_dir was not created; tgen.pl's rc: $rc"
    fi
  done
done

vsetp "${all_but_run_opt}" && {
    echo "
++++ $progname: -allButRun was used.
  Don't forget to run them if you need to."
} 1>&2

exit $rc
