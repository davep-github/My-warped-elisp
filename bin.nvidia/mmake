#!/bin/sh

source script-x
source eexec
set -u
progname="$(basename $0)"
#echo "0: \$@>$@<"

: ${o_xterm_ok_p=}

eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done
unset eexec_program

cat_log()
{
    cat
}

null_log()
{
    cat > /dev/null
}

tee_log()
{
    if [ -n "${log_file}" ]
    then
        tee "${log_file}"
    else
        cat_log
    fi
}

case "${PWD}" in
    /home/scratch.dpanariti_*);;
    *) echo "INFO: you are not in a sandbox." 1>&2;;
esac

: ${send_mail_on_completion=}

# Usage variable usage:
Usage_args_info=' `depth`/bin/make-options-and-args...'
Usage_synopsis='make using the proper make for t124, et al, tree: `depth`/bin/make
'
Usage_details="${EExec_parse_usage}
--log-file <file>) Log output to <file>.
--logger <logger>) Log with <logger> [tee, cat or null].
--notify|--mail) Send email when done.
--tee) Log with tee.
--cat) 
--null) Send output to /dev/null
"
# Example of arg parsing.
option_str="${EExec_parse_option_str}"
long_options=("logger:" "log-file:" "null" "override" "o-xterm-ok" "tee" "cat"
"mail" "notify")
#echo "1: \$@>$@<"
source dp-getopt+.sh
#echo "2: \$@>$@<"
for i in "$@"
do
  # do. e.g.  shift; $OPTION_ARG=$1;; # to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      --logger) shift; logger="$1";;
      --log-file) shift; log_file="$1";;
      --null) log_file=/dev/null;;
      --tee) logger=tee_log;;
      --cat) logger=cat_log;;
      --override|--o-xterm-ok) o_xterm_ok_p=y;;
      --mail|--notify) send_mail_on_completion=t;;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done

on-o-xterm-p && vunsetp "${o_xterm_ok_p}" && {
    echo "$progname: Should not do this on an o-xterm box."
    exit 1
} 1>&2

: ${log_file=}
: ${logger:=cat_log}

# @todo XXX Look for logger. If not look for ${logger}_log. If not, set to cat.

bin_dir="$(me-expand-dest tot)/bin"

EExec ${bin_dir}/make "$@" 2>&1 | $logger

vsetp "${send_mail_on_completion-}" && {
    mail -s "$progname is done" "${USER}" < /dev/null >/dev/null 2>&1
}
