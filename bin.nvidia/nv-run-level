#!/bin/sh

if vsetp "$*"
then
    dolat=("$@")
else
    dolat=("--")
fi

source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_echo_id eexec_program
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${cron_opt}"
}

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${cron_opt}"
    trap '' 0
}

num_sort()
{
    for a in "$@"
    do
      echo "$a"
    done | sort -n
}

basic_level=nvlink/bringup_new_features_medium_gpc_sysmem
medium_gpc_peer_level=nvlink/bringup_new_features_medium_gpc_peer
medium_gpc_sysmem_level=nvlink/bringup_new_features_medium_gpc_sysmem
medium_level=nvlink/bringup_new_features_medium
medium_ce_sanity_level=nvlink/bringup_new_features_medium_ce_sanity
medium_ce_peer_level=nvlink/bringup_new_features_medium_ce_peer
medium_peer_atomics=nvlink/bringup_new_features_medium_peer_atomics
: ${abr_opt=}
levels=()
: ${level=${medium_level}}
: ${only_opt=}
: ${mail_opt=-mail}             # Default on, can turn off w/opt.
: ${fc_csl="+fc_nvlink_translator_egress.cpp,+fc_nvlink_translator_egress.h,+fc_nvlink_translator.cpp,+fc_nvlink_translator.h,+fc_nvlink_translator_ingress.cpp,+fc_nvlink_translator_ingress.h,+fc_nvlink_config.cpp,+fc_nvlink_config.h,+fc_nvlink_fs_comm.cpp,+fc_nvlink_fs_comm.h"}
: ${hsh_csl="+hshub_xbar.cpp,+hshub_nvlink_main.cpp,+hshub_nvlink_xbar_handler.cpp"}
: ${ALL_CSL="${fc_csl},${hsh_csl}"}
#: ${CSL=${fc_csl}}              # It's all about me.
: ${CSL=}                       # Silence is golden.
: ${big_queue:=o_cpu_16G}
: ${small_queue:=o_cpu_rel5_4G_8H}
: ${queue:=${big_queue}}
: ${seq_file_option=}

option_str="${EExec_parse_option_str}o:"
long_options=(
"abr"
"level:"
"nvlevel:"
"only:"
"wait"
"basic"
"med-gpc-peer" "medium-gpc-peer" "mgp"
"med-gpc-sysmem" "medium-gpc-sysmem" "mgs"
"medium"
"nomail" "no-mail"
"queue:"
"big-queue" "big-q" "bigq" "bq"
"small-queue" "small-q" "smallq" "sq"
"csl:"
"fc-csl" "csl-fc" "nvl-csl" "csl-nvl"
"hsh-csl" "csl-hsh"
"all-fc-csl" "csl-all-fc"
"all-csl" "csl-all"
"no-csl"
"csl:"
"add-csl:" "append-csl:"
"push-csl:" "prepend-csl:"
"env:"
"env-grep:" "grep-env:" "envgrep:" "grepenv:"
"ce-sanity"
"ce-peer" "medium-ce-peer" "med-ce-peer"
"link-type:"
"GFake_ingress_interface_with_socket:"
"fii"
"no-fii"
"seq-file:"
"server-port:" "sport:"
"client-port:" "cport:"
"med-peer-atomics" "mpa"
)
source dp-getopt+.sh
while (($#))
do
  case "${1}" in
      --abr) abr_opt="-allButRun";;
      --level) shift; levels+=("${1}");;
      --nvlevel) shift; levels+=("nvlink/${1}");;
      -o|--only) shift; only_test="${1}"; only_opt="-only ${only_test}";;
      --wait) wait_opt="-wait";;
      --nomail|--no-mail) mail_opt=;;
      --queue) shift; queue="${1}";;
      --big-queue|--big-q|--bigq|--bq) queue="${big_queue}";;
      --small-queue|--small-q|--smallq|--sq) queue="${small_queue}";;
      --basic) levels+=(${basic_level});;
      --medium) levels+=(${medium_level});;
      --ce-sanity) levels+=("${medium_ce_sanity_level}");;
      --ce-peer|--medium-ce-peer|--med-ce-peer) level+=("${medium_ce_peer_level}");;
      --med-gpc-peer|--medium-gpc-peer|--mgp) levels+=("${medium_gpc_peer_level}");;
      --med-gpc-sysmem|--medium-gpc-sysmem|--mgs) levels+=("${medium_gpc_sysmem_level}");;
      --med-peer-atomics|--mpa) levels+=("${medium_peer_atomics}");;
      --link-type) shift; link_info="${1}";
                   EExec_verbose_echo_id link_info
                   link_num=$(echo "${link_info}" | cut -d/ -f 1)
                   link_type=$(echo "${link_info}" | cut -d/ -f 2)
                   EExec_verbose_echo_id link_num
                   EExec_verbose_echo_id link_type
                   case "${link_type}" in
                       p2p|peer) link_type=46;;
                       p2p-loop*|peer-loop*) link_type=46;;
                       p2p-full*|p2p-fs|peer-full|peer-fs) link_type=47;;
                       sys*|"") link_type=45;;
                       45|46|47) ;;
                       *) echo 1>&2 "Unsupported link type>${link_type}<";
                          exit 1
                          ;;
                   esac
                   EExec_verbose_echo_id link_type
                   link_var="FC_NVLINK_${link_num}_MEM_TYPE=${link_type}";
                   EExec_verbose_echo_id link_var
                   export "$link_var"
                   ;;
      --help) Usage; exit 0;;
      --csl) shift; CSL="${1}";;
      --fc-csl|--csl-fc|--nvl-csl|--csl-nvl) CSL="${fc_csl}";;
      --hsh-csl|--csl-hsh) CSL="${hsh_csl}";;
      --all-fc-csl|--csl-fc-all) CSL="${CSL},${fc_csl},${hsh_csl}";;
      # The definition of all may change.
      --all-csl|--csl-all) CSL="${ALL_CSL}";;
      --no-csl) CSL=;;
      --csl) shift; CSL="${1}";;
      --add-csl|--append-csl) shift; CSL="${CSL},${1}";;  # N.B. We add the ,
      --push-csl|--prepend-csl) shift; CSL="${1},${CSL}";;  # N.B. We add the ,
      --GFake_ingress_interface_with_socket) shift;
        export GFake_ingress_interface_with_socket="${1}";;
      --fii)
        export GFake_ingress_interface_with_socket=1;;
      --no-fii)
        export GFake_ingress_interface_with_socket=0;;
      --seq-file) shift; seq_file_option="-runSeq ${1}";;
      --server-port|--sport) shift; export FCNVL_SERVER_PORT="${1}";;
      --client-port|--cport) shift; export FCNVL_CLIENT_PORT="${1}";;
      --env) shift; e="${1}"
             # Given the options: --env 'x1="jjdj djdj 123"'
             # e is 'x1="jjdj djdj 123"
             EExec_verbose_msg "export $e"
             eval export $e
             ;;
      --envgrep|--env-grep|--grepenv|--grep-env)
             shift; env | egrep -e "${1}"
             ;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
 esac
  shift
done

# trim possible leading commas left over from concatenation process.
EExec_verbose_msg "Trimming possible leading commas."
EExec_verbose_echo_id CSL
CSL=$(echo "${CSL}" | sed -rn 's/^(,*)(.*)/\2/p')
EExec_verbose_echo_id CSL
export CSL

((${#levels} == 0)) && levels=("${level}")


: ${only_test:=ALL}

: ${latest_out_dir_file_name=latest_out_dir}
: ${last_and_latest_p=t}

: ${last_and_latest_prefix=}
if [ "${last_and_latest_prefix}" = "." ]
then
    ll_prefix="${test_name}."
else
    ll_prefix="${last_and_latest_prefix}"
fi
: ${last_out_dir_file_name=last_out_dir}

last_out="${ll_prefix}${last_out_dir_file_name}"
latest_out="${ll_prefix}${latest_out_dir_file_name}"
command_line_log_file="${progname}.command-line-log"

free_space_warning=10G
free_space=$(df -h . | tail -n1 | awk '{print $3}')
min_space=$(num_sort "${free_space_warning}" "${free_space}" | head -n1)
if [ "${min_space}" != "${free_space_warning}" ]
then
    echo "*** Warning: Only ${free_space} remains."
    df -h .
fi 1>&2

for level in "${levels[@]}"
do
  out_dir=$(normpath -r "dp-run-tgens.d/${level}/${only_test}/$(dp-std-timestamp).d")
  command_line_script_file="${out_dir}.command-line"

  if ! EExecDashN_p
  then
      vsetp "${last_and_latest_p}" && {
        # Keep a history with latest last.
        # The script below now tails the last line.
          echo "$out_dir" >> "${last_out}"
          echo "#!/bin/sh
nth-line "'${1-0}'" ${last_out_dir_file_name}" >| "${latest_out}"
          chmod +x "${latest_out}"
      }
      EExec_verbose_echo_id command_line_script_file
  else
      echo "Not running: $@"
  fi        

  EExec_verbose_echo_id last_out
  EExec_verbose_echo_id latest_out

  EExec tgen.pl \
    -project gp100 \
    -level "${level}" \
    -outDir "${out_dir}"  \
    -noclobber \
    -nosandbox \
    -cacheLevels \
    -maxFileSize 0 \
    -queue "${queue}" \
    -traceroot /home/scratch.traces02 \
    ${only_opt} \
    ${abr_opt} \
    ${mail_opt} \
    ${seq_file_option} \
    "$@"

  command_line="$0 ${dolat[@]}"
  command_script="!#/bin/sh
export CSL='${CSL}'
pushd ${PWD}
${command_line}"

  EExecDashN_p && {
      command_line_script_file="/proc/self/fd/1"
      command_line_log_file="/dev/null"
  }

  echo "${command_script}" > "${command_line_script_file}"
  [ -f "${command_line_script_file}" ] && chmod +x "${command_line_script_file}"

  if EExecDashN_p
  then
      echo 1>&2 "Removing outDir>${out_dir}<"
      rm -rf "${out_dir}"
  else
      echo "out_dir: ${out_dir}"
  fi

  EExec_verbose_echo_id command_line_log_file
  echo "=======  On $(dp-std-timestamp), ${USER} ran: =======
outDir>${out_dir}<
${command_line}" | tee -a "${command_line_log_file}"
done
