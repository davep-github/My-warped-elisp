#!/bin/sh


vunsetp "${any_shell_p}" && {
    test $(basename "${SHELL}") = tcsh || {
        echo "You are not in a c-shell.
At this time, it is recommended to run tests that environment.
> ssh localhost
will get a pristine standard environment.
But if you insist on BASHing your test against the wall, 
set then environment variable any_shell_p"
    exit 1
    } 1>&2
}

echo_id SHELL

source script-x
set -u
progname="$(basename $0)"
source eexec
eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done
unset eexec_program

: ${p4_clib_dir:=//hw/ap_tlit1/clib/Linux}
: ${log_file_base_name:=dot-sh}
: ${teeker_options=--slog -Z9 --ts --hg}
: ${testname=}

check_test()
{
    local testname="$@"
    local rc=1
    if test -d "${testname}"
    then 
        echo "${testname} is a dir."
    elif ! test -x "${testname}"
    then 
        echo "${testname} is not executable."
    else
        rc=0
    fi
    return "$rc"
}

if vunsetp "${testname}"
then
    case "${1-}" in 
        -|.|--) shift;;
        -*|"") ;;
        *) testname="${1}"; shift ;;
    esac
    vunsetp "${testname}" && {
        testname=$(ls -1 *.sh | egrep -v '^(command|.*\.cmd)\.sh$')
        if vunsetp "${testname}" || ! test -x "${testname}" || test -d "${testname}"
        then
            echo "$progname: No test name given and cannot guess a good default.
Usage:  testname [additional-teeker-options]"
            check_test "${testname}"
            exit 1
        fi 1>&2
        echo "Deduced test name>${testname}<"
    }
fi
check_test "${testname}" 1>&2 || exit 1
test_base_name=$(basename "${testname}" .sh)
cfg_file_name="${test_base_name}.cfg"
so_name=$(sed -rn "s/(.*-plugin ')([^[:space:]]+)( .*)/\2/p" "${cfg_file_name}").so
echo_id so_name
clib_dir=$(me-expand-dest "${p4_clib_dir}")
so_path="${clib_dir}/${so_name}"
echo_id so_path
# Check for no go&^@*(#amn(*#&(#*&$other-*&^#*$&-ing link errors.
ldd "${so_path}"
echo "COMPLETE ldd check!"

# E.g. ./surface_write_read_no_smmu_bar1.sh 2>&1 | teeker --slog -Z9 --ts --grep 'surface_write_read:' --hg dot-sh --egrep 'ERROR: cannot aquire /tmp'; email-yopp

EExec "${testname}" 2>&1 | EExec teeker ${teeker_options} "$@" "${log_file_base_name}"

rc="$?"
EExec email-yopp "$progname: \"${testname} $@\" is done. RC: $rc"
