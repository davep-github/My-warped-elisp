#!/bin/sh

if vsetp "$*"
then
    dolat=("$@")
else
    dolat=("--")
fi

source script-x
set -u
progname="$(basename $0)"
source eexec
if vsetp "${eexec_program-}"    # Did the caller provide a program?
then
    EEXEC_SHIFT=:
else
    eexec_program=$(EExec_parse "$@")
    EEXEC_SHIFT=shift
fi

for op in $eexec_program
do
  $op
  ${EEXEC_SHIFT}
done
EExec_verbose_msg $(echo_id eexec_program)
unset eexec_program
#export eexec_program
# Or export eexec_program to propagate eexec info to a called program.
# export eexec_program

# Useful traps
on_exit()
{
    local rc="$?"
    local signum="${1-}"; shift

    echo "on_exit: rc: $rc; ${cron_opt}"
}

on_error()
{
    local rc="${1-}"; shift

    echo "on_exit: rc: $rc; ${cron_opt}"
    trap '' 0
}

: ${abr_opt=}
: ${level=nvlink/bringup_new_features_medium}
: ${only_opt=}
: ${mail_opt=-mail}             # Default on, can turn off w/opt.

option_str="${EExec_parse_option_str}o:"
long_options=(
"abr"
"level:"
"only:"
"wait"
"nomail" "no-mail"
)
source dp-getopt+.sh
while (($#))
do
  case "${1}" in
      --abr) abr_opt="-allButRun";;
      --level) shift; level="${1}";;
      -o|--only) shift; only_test="${1}"; only_opt="-only ${only_test}";;
      --wait) wait_opt="-wait";;
      --nomail|--no-mail) mail_opt=;;
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
 esac
  shift
done

: ${only_test:=ALL}

: ${out_dir:=$(normpath -r "dp-run-tgens.d/${level}/${only_test}/$(dp-std-timestamp)")}

: ${latest_out_dir_file_name=latest_out_dir}
: ${last_and_latest_p=t}

: ${last_and_latest_prefix=}
if [ "${last_and_latest_prefix}" = "." ]
then
    ll_prefix="${test_name}."
else
    ll_prefix="${last_and_latest_prefix}"
fi

: ${last_out_dir_file_name=last_out_dir}
last_out="${ll_prefix}${last_out_dir_file_name}"
latest_out="${ll_prefix}${latest_out_dir_file_name}"
command_line_log_file="${progname}.command-line-log"
command_line_script_file="${out_dir}.command-line"

if ! EExecDashN_p
then
    vsetp "${last_and_latest_p}" && {
        # Keep a history with latest last.
        # The script below now tails the last line.
        echo "$out_dir" >> "${last_out}"
        echo "#!/bin/sh
tail -n"'${1-1}'" ${last_out_dir_file_name}" >| "${latest_out}"
            chmod +x "${latest_out}"
    }
    EExec_verbose_echo_id command_line_script_file
else
    echo "Not running: $@"
fi        

EExec_verbose_echo_id last_out
EExec_verbose_echo_id latest_out

EExec tgen.pl \
    -project gp100 \
    -level "${level}" \
    -outDir "${out_dir}"  \
    -noclobber \
    -nosandbox \
    -cacheLevels \
    -maxFileSize 0 \
    -queue o_cpu_rel5_4G_8H \
    -traceroot /home/scratch.traces02 \
    ${only_opt} \
    ${abr_opt} \
    ${mail_opt} \
    "$@"

command_line="$0 ${dolat[@]}"
command_script="!#/bin/sh
pushd ${PWD}
${command_line}"

EExecDashN_p && {
    command_line_script_file="/proc/self/fd/1"
    command_line_log_file="/dev/null"
}

echo "${command_script}" > "${command_line_script_file}"
[ -f "${command_line_script_file}" ] && chmod +x "${command_line_script_file}"

if EExecDashN_p
then
    echo 1>&2 "Removing outDir>${out_dir}<"
    rm -rf "${out_dir}"
else
    echo "out_dir: ${out_dir}"
fi

EExec_verbose_echo_id command_line_log_file
echo "=======  On $(dp-std-timestamp), ${USER} ran: =======
outDir>${out_dir}<
${command_line}" | tee -a "${command_line_log_file}"
