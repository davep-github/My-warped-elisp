#!/bin/sh

source script-x
set -u
progname="$(basename $0)"
source eexec
eexec_program=$(EExec_parse "$@")
for op in $eexec_program
do
  $op
  shift
done
unset eexec_program

: ${P4_SW_ROOT:=$HOME/sw}
: ${DEFAULT_p4review_repository:="http://nvp4review/p4review"}
: ${p4r_opts=}
force_fetch_p=
force_no_fetch_p=
guess_location_p=t

# Usage variable usage:
Usage_args_info=" .p4r-files..."
Usage_synopsis="p4review the files.
"
Usage_details="${EExec_parse_usage}
--diff <diff-prig> -- Set diff program.
--server <server> -- default server holding the review files.
--p4r <p4review-program> -- Use this program to do the reviewing.
--p4r-opt <p4review-opt> -- Add p4review-opt to the list of extra options.
--no-fetch|--file|--local -- Use the file names directly and don't delete.
--fetch|--remote -- Force a remote fetch.
"
# Example of arg parsing.
long_options=("diff:" "server:" "p4r:" "p4r-opt:" "no-fetch" "file" "local"
"fetch" "remote")
option_str="$EExec_parse_option_str"
source dp-getopt+.sh
for i in "$@"
do
  # do. e.g.  $OPTION_ARG=$2; shift;; to process options with arguments.
  case $1 in
      # eexec support
      -n) EXEC=echo; EExecDashN;; # Don't actually execute stuff
      -v) VERBOSE="echo $progname: "; EExecVerbose;;
      -q) VERBOSE=":"; EExecQuiet;;

      # Program options.
      --diff) shift; diff_program="$1";;
      --server) shift; p4review_repository="$1";;
      --p4r) shift; p4review_program="$1";;
      --p4r-opt) shift; p4r_opts="$p4r_opts $1";;
      --no-fetch|--file|--local) p4review_repository=; fetch_function=fetch_no_fetch
                                 fetch_cleanup=cleanup_no_fetch
                                 force_no_fetch_p=t
                                 guess_location_p=
                                 ;;
      --fetch|--remote) p4review_repository=; fetch_function=fetch_no_fetch
                        fetch_cleanup=cleanup_no_fetch
                        force_fetch_p=t
                        guess_location_p=
                        ;;

      # Help!
      --help) Usage; exit 0;;
      --) shift ; break ;;
      *) echo 1>&2 "Unsupported option>$1<"
         exit 1;;
    esac
    shift
done
# The following is needed only when args are required.
[ "$*" = "" ] && Usage "At least one review file is needed."

: ${diff_program:=${P4DIFF-xxdiff}}
: ${p4review_repository=$DEFAULT_p4review_repository}
: ${p4review_program:=${P4_SW_ROOT}/sw/main/apps/p4review/p4review.pl}
: ${fetch_function:=fetch_wget}
: ${fetch_cleanup:=cleanup_wget}

cleanup_tmp_files()
{
    local file_name="${1}"; shift
    [ -n "$file_name" ] && EExec rm -f "$file_name"
}

sig_handler()
{
   echo 1>&2  "rc>$?<"
   {
        local sig="${1}"; shift
        echo  "sig_handler: sig: ${sig}, args>$@<"
        cleanup_tmp_files "$@"
        echo "Exiting..."
    } 1>&2
   exit 1
}

set_traps()
{
    local handler="${1}"; shift
    local handler_args="${1}"; shift
    for sig in "$@"
    do
      trap "$handler $sig ${handler_args}" $sig
    done
}

fetch_no_fetch()
{
    EExec -y echo "${1}"
}

cleanup_no_fetch()
{
    EExec -y true
}

cleanup_wget()
{
    cleanup_tmp_files "${1}"
}

fetch_wget()
{
    local fetch_file="${1}"; shift
    local server="${1}"; shift
    local tmp_file
    tmp_file=$(mktemp "$HOME/tmp/dp4-review.tmp.XXXXXXX") || {
        echo "Couldn't make a temp file."
        exit 1
    } 1>&2
    set_traps "sig_handler" "$tmp_file" ERR 1 2 3 4 5 6 7 8 10 11 12 13 15 # EXIT
    EExec wget --http-user=svcsw \
      "--http-passwd=Gforcetop#1" \
      -O "${tmp_file}" \
     "${server}/${fetch_file}"
    echo "${tmp_file}"
}    

for f in "$@"
do
  f=$($fetch_function "${f}" "${p4review_repository}")
  EExec perl "$p4review_program" \
    ${p4r_opts} \
    -diff "${diff_program}" -autoreview "${f}"
  $fetch_cleanup "${f}"
done
